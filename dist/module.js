define(["@grafana/data","@grafana/ui","react"], function(__WEBPACK_EXTERNAL_MODULE__grafana_data__, __WEBPACK_EXTERNAL_MODULE__grafana_ui__, __WEBPACK_EXTERNAL_MODULE_react__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./module.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "../node_modules/css-loader/dist/cjs.js?!../node_modules/postcss-loader/src/index.js?!../node_modules/sass-loader/lib/loader.js!./style/CoordinateSpace.css":
/*!***************************************************************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js??ref--8-1!../node_modules/postcss-loader/src??ref--8-2!../node_modules/sass-loader/lib/loader.js!./style/CoordinateSpace.css ***!
  \***************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(true);
// Module
exports.push([module.i, "div.inputCoor {\n  margin-bottom: 2%; }\n\ndiv.buttonAddCoor {\n  text-align: center; }\n", "",{"version":3,"sources":["CoordinateSpace.css"],"names":[],"mappings":"AAAA;EACE,iBAAiB,EAAE;;AAErB;EACE,kBAAkB,EAAE","file":"CoordinateSpace.css","sourcesContent":["div.inputCoor {\n  margin-bottom: 2%; }\n\ndiv.buttonAddCoor {\n  text-align: center; }\n"]}]);
// Exports
module.exports = exports;


/***/ }),

/***/ "../node_modules/css-loader/dist/cjs.js?!../node_modules/postcss-loader/src/index.js?!../node_modules/sass-loader/lib/loader.js!./style/SimpleEditor.css":
/*!************************************************************************************************************************************************************************!*\
  !*** ../node_modules/css-loader/dist/cjs.js??ref--8-1!../node_modules/postcss-loader/src??ref--8-2!../node_modules/sass-loader/lib/loader.js!./style/SimpleEditor.css ***!
  \************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// Imports
var ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "../node_modules/css-loader/dist/runtime/api.js");
exports = ___CSS_LOADER_API_IMPORT___(true);
// Module
exports.push([module.i, "div.divSimpleEditor {\n  width: 100%;\n  /* margin: 2%;\n  padding: 2%; */ }\n\ndiv.CoordinateSpaceInitital {\n  /* margin: 1%; */\n  /* margin-bottom: 8%; */ }\n\nh3.titreSection {\n  margin-bottom: 2%;\n  /*   color: blue; */ }\n\n.parameter-interface-container {\n  width: 100%; }\n\n.parameter-interface-list-title {\n  display: -webkit-flex;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-flex-direction: row;\n      -ms-flex-direction: row;\n          flex-direction: row;\n  -webkit-justify-content: space-around;\n      -ms-flex-pack: distribute;\n          justify-content: space-around;\n  border-bottom: 4px solid white;\n  margin: 10px 0; }\n\n.parameter-interface-title {\n  padding: 10px;\n  list-style: none;\n  cursor: pointer; }\n", "",{"version":3,"sources":["SimpleEditor.css"],"names":[],"mappings":"AAAA;EACE,WAAW;EACX;gBACc,EAAE;;AAElB;EACE,gBAAgB;EAChB,uBAAuB,EAAE;;AAE3B;EACE,iBAAiB;EACjB,mBAAmB,EAAE;;AAEvB;EACE,WAAW,EAAE;;AAEf;EACE,qBAAa;EAAb,oBAAa;EAAb,aAAa;EACb,2BAAmB;MAAnB,uBAAmB;UAAnB,mBAAmB;EACnB,qCAA6B;MAA7B,yBAA6B;UAA7B,6BAA6B;EAC7B,8BAA8B;EAC9B,cAAc,EAAE;;AAElB;EACE,aAAa;EACb,gBAAgB;EAChB,eAAe,EAAE","file":"SimpleEditor.css","sourcesContent":["div.divSimpleEditor {\n  width: 100%;\n  /* margin: 2%;\n  padding: 2%; */ }\n\ndiv.CoordinateSpaceInitital {\n  /* margin: 1%; */\n  /* margin-bottom: 8%; */ }\n\nh3.titreSection {\n  margin-bottom: 2%;\n  /*   color: blue; */ }\n\n.parameter-interface-container {\n  width: 100%; }\n\n.parameter-interface-list-title {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-around;\n  border-bottom: 4px solid white;\n  margin: 10px 0; }\n\n.parameter-interface-title {\n  padding: 10px;\n  list-style: none;\n  cursor: pointer; }\n"]}]);
// Exports
module.exports = exports;


/***/ }),

/***/ "../node_modules/css-loader/dist/runtime/api.js":
/*!******************************************************!*\
  !*** ../node_modules/css-loader/dist/runtime/api.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
// eslint-disable-next-line func-names
module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return "@media ".concat(item[2], " {").concat(content, "}");
      }

      return content;
    }).join('');
  }; // import a list of modules into the list
  // eslint-disable-next-line func-names


  list.i = function (modules, mediaQuery, dedupe) {
    if (typeof modules === 'string') {
      // eslint-disable-next-line no-param-reassign
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    if (dedupe) {
      for (var i = 0; i < this.length; i++) {
        // eslint-disable-next-line prefer-destructuring
        var id = this[i][0];

        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }

    for (var _i = 0; _i < modules.length; _i++) {
      var item = [].concat(modules[_i]);

      if (dedupe && alreadyImportedModules[item[0]]) {
        // eslint-disable-next-line no-continue
        continue;
      }

      if (mediaQuery) {
        if (!item[2]) {
          item[2] = mediaQuery;
        } else {
          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
        }
      }

      list.push(item);
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring

  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || '').concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
  return "/*# ".concat(data, " */");
}

/***/ }),

/***/ "../node_modules/style-loader/lib/addStyles.js":
/*!*****************************************************!*\
  !*** ../node_modules/style-loader/lib/addStyles.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "../node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "../node_modules/style-loader/lib/urls.js":
/*!************************************************!*\
  !*** ../node_modules/style-loader/lib/urls.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "../node_modules/tslib/tslib.es6.js":
/*!******************************************!*\
  !*** ../node_modules/tslib/tslib.es6.js ***!
  \******************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __createBinding, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault, __classPrivateFieldGet, __classPrivateFieldSet */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__createBinding", function() { return __createBinding; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldGet", function() { return __classPrivateFieldGet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__classPrivateFieldSet", function() { return __classPrivateFieldSet; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}

function __exportStar(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}

function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to get private field on non-instance");
    }
    return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) {
        throw new TypeError("attempted to set private field on non-instance");
    }
    privateMap.set(receiver, value);
    return value;
}


/***/ }),

/***/ "./Functions/CreateInput/createInputCoor.tsx":
/*!***************************************************!*\
  !*** ./Functions/CreateInput/createInputCoor.tsx ***!
  \***************************************************/
/*! exports provided: createInputCoor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createInputCoor", function() { return createInputCoor; });
/* harmony import */ var Models_InputClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Models/InputClass */ "./Models/InputClass.tsx");

var createInputCoor = function createInputCoor(id, isInitial) {
  var l10n = __webpack_require__(/*! Localization/en.json */ "./Localization/en.json");

  var newFieldLabel = new Models_InputClass__WEBPACK_IMPORTED_MODULE_0__["InputClass"](id.toString() + 'label', l10n.basics.label, 'label' + id.toString(), 'text', true, 'Label', undefined);
  var newFieldPositionXMin = new Models_InputClass__WEBPACK_IMPORTED_MODULE_0__["InputClass"](id.toString() + 'xMin', l10n.inputCoordinate.minXPosition, 'positionXMin' + id.toString(), 'text', true, l10n.inputCoordinate.minXPosition, undefined);
  var newFieldPositionXMax = new Models_InputClass__WEBPACK_IMPORTED_MODULE_0__["InputClass"](id.toString() + 'xMax', l10n.inputCoordinate.maxXPosition, 'positionXMax' + id.toString(), 'text', true, l10n.inputCoordinate.maxXPosition, undefined);
  var newFieldPositionYMin = new Models_InputClass__WEBPACK_IMPORTED_MODULE_0__["InputClass"](id.toString() + 'yMin', l10n.inputCoordinate.minYPosition, 'positionYMin' + id.toString(), 'text', true, l10n.inputCoordinate.minYPosition, undefined);
  var newFieldPositionYMax = new Models_InputClass__WEBPACK_IMPORTED_MODULE_0__["InputClass"](id.toString() + 'yMax', l10n.inputCoordinate.maxYPosition, 'positionYMax' + id.toString(), 'text', true, l10n.inputCoordinate.maxYPosition, undefined); // const newFieldKey: InputClass = new InputClass(id.toString() + 'key',
  // 	l10n.inputCoordinate.key, 'key' + id.toString(),
  // 	'text', true, l10n.inputCoordinate.key, undefined);
  // const newFieldValueKey: InputClass = new InputClass(id.toString() + 'valueKey',
  // 	l10n.inputCoordinate.valueKey, 'valueKey' + id.toString(),
  // 	'text', true, l10n.inputCoordinate.valueKey, undefined);
  // const newFieldButton: InputClass = new InputClass(id.toString() + 'supprimer',
  // 	l10n.basics.delete, 'supprimer' + id.toString(),
  // 	'button', false, undefined, l10n.basics.delete);

  var finalArray = [];

  if (!isInitial) {
    finalArray = [newFieldLabel];
  } else {
    finalArray = [newFieldLabel, newFieldPositionXMin, newFieldPositionXMax, newFieldPositionYMin, newFieldPositionYMax];
  }

  return finalArray;
};

/***/ }),

/***/ "./Functions/CreateInput/createInputsOrientedLink.tsx":
/*!************************************************************!*\
  !*** ./Functions/CreateInput/createInputsOrientedLink.tsx ***!
  \************************************************************/
/*! exports provided: createInputsOrientedLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createInputsOrientedLink", function() { return createInputsOrientedLink; });
/* harmony import */ var Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Models/InputSelectableClass */ "./Models/InputSelectableClass.tsx");

var createInputsOrientedLink = function createInputsOrientedLink(id, dataCoordinateSpace, dataPoint) {
  var newFieldOrientationLink = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'orientationLink', 'Orientation', 'orientationLink' + id.toString(), 'select', [{
    label: 'Nodirectional',
    value: 'no'
  }, {
    label: 'Monodirectional',
    value: 'AB'
  }, {
    label: 'Bidirectional',
    value: 'double'
  }], '', true, 'Orientation', undefined);
  var newFieldSize = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'size', 'Size (px)', 'size' + id.toString(), 'text', // [
  //   { value: 'Small', label: 'Small' },
  //   { value: 'Medium', label: 'Medium' },
  //   { value: 'Large', label: 'Large' },
  // ],
  [], '', true, 'Size', undefined);
  var newFieldPointAPositionX = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'pointAX', 'CoordinateClick A - X', 'pointAX' + id.toString(), 'text', [], '', true, 'PointA-X', undefined);
  var newFieldPointAPositionY = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'pointAY', 'CoordinateClick A - Y', 'pointAY' + id.toString(), 'text', [], '', true, 'PointA-Y', undefined);
  var newFieldPointBPositionX = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'pointBX', 'CoordinateClick B - X', 'pointBX' + id.toString(), 'text', [], '', true, 'PointB-X', undefined);
  var newFieldPointBPositionY = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'pointBY', 'CoordinateClick B - Y', 'pointBY' + id.toString(), 'text', [], '', true, 'PointB-Y', undefined);
  var newFieldLabelLink = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'labelLink', 'Label', 'label' + id.toString(), 'text', [], '', true, 'Label', undefined);
  var newFieldRegionIn = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'regionIn', 'AssociateRegionIn', 'regionIn' + id.toString(), 'select', dataCoordinateSpace, '', true, 'Associate Region In', undefined);
  var newFieldRegionOut = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'regionOut', 'AssociateRegionOut', 'regionOut' + id.toString(), 'select', dataCoordinateSpace, '', true, 'Associate Region Out', undefined);
  var newFieldPointIn = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'pointIn', 'AssociatePointIn', 'pointIn' + id.toString(), 'select', dataPoint, '', true, 'Associate Point In', undefined);
  var newFieldPointOut = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'pointOut', 'AssociatePointOut', 'pointOut' + id.toString(), 'select', dataPoint, '', true, 'Associate Point Out', undefined);
  var newFieldIsIncurved = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'isIncurved', 'Incurved', 'isIncurved' + id.toString(), 'select', [{
    label: 'Yes',
    value: true
  }, {
    label: 'No',
    value: false
  }], '', true, 'Incurved', undefined);
  var newFieldPointCPositionX = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'pointCX', 'CoordinateClick C - X', 'pointCX' + id.toString(), 'text', [], '', true, 'PointC-X', undefined);
  var newFieldPointCPositionY = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'pointCY', 'CoordinateClick C - Y', 'pointCY' + id.toString(), 'text', [], '', true, 'PointC-Y', undefined);
  var newFieldButton = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'deleteLink', 'Delete', 'delete' + id.toString(), 'button', [], '', false, undefined, 'delete');
  var finalArray = [newFieldLabelLink, newFieldOrientationLink, newFieldSize, newFieldPointIn, newFieldRegionIn, newFieldPointAPositionX, newFieldPointAPositionY, newFieldPointOut, newFieldRegionOut, newFieldPointBPositionX, newFieldPointBPositionY, newFieldIsIncurved, newFieldPointCPositionX, newFieldPointCPositionY, newFieldButton];
  return finalArray;
};

/***/ }),

/***/ "./Functions/CreateInput/createInputsPoint.tsx":
/*!*****************************************************!*\
  !*** ./Functions/CreateInput/createInputsPoint.tsx ***!
  \*****************************************************/
/*! exports provided: createInputsPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createInputsPoint", function() { return createInputsPoint; });
/* harmony import */ var Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Models/InputSelectableClass */ "./Models/InputSelectableClass.tsx");
 //import { SelectableValue } from '@grafana/data';
//import { RegionClass } from 'Models/RegionClass';

var createInputsPoint = function createInputsPoint(id) {
  var newFieldDrawGraphicMarker = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'drawGraphicMarker', 'Display ', 'drawGraphicMarker' + id.toString(), 'select', [{
    value: 'true',
    label: 'Yes'
  }, {
    value: 'false',
    label: 'No'
  }], '', true, 'drawGraphicMarker', undefined);
  var newFieldShape = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'shape', 'Shape', 'shape' + id.toString(), 'select', [{
    value: 'none',
    label: 'None'
  }, {
    value: 'circle',
    label: 'Circle'
  }, {
    value: 'square',
    label: 'Square'
  }, {
    value: 'diamond',
    label: 'Diamond'
  }], '', true, 'Shape', undefined);
  var newFieldSizeWidthShape = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'sizeWidth', 'Size (px)', 'sizeWidth' + id.toString(), 'text', // [
  //   { value: 'small', label: 'Small' },
  //   { value: 'medium', label: 'Medium' },
  //   { value: 'large', label: 'Large' },
  // ],
  [], '', true, 'SizeWidth', undefined);
  var newFieldSizeHeightShape = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'sizeHeight', 'Width', 'sizeHeight' + id.toString(), 'select', [{
    value: 'small',
    label: 'Small'
  }, {
    value: 'medium',
    label: 'Medium'
  }, {
    value: 'large',
    label: 'Large'
  }], '', true, 'SizeHeight', undefined);
  var newFieldRotateArrow = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'rotateArrow', 'Orientation', 'rotateArrow' + id.toString(), 'text', [], '', true, 'RotateArrow', undefined);
  var newFieldPositionXShape = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'positionShapeX', 'Position X', 'positionShapeX' + id.toString(), 'text', [], '', true, 'Position X Shape', undefined);
  var newFieldPositionYShape = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'positionShapeY', 'Position Y', 'positionShapeY' + id.toString(), 'text', [], '', true, 'Position Y Shape', undefined);
  var newFieldLabel = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'labelPoint', 'Label', 'labelPoint' + id.toString(), 'text', [], '', true, 'Label', undefined);
  var newFieldButton = new Models_InputSelectableClass__WEBPACK_IMPORTED_MODULE_0__["InputSelectableClass"](id.toString() + 'deletePoint', 'Delete', 'delete' + id.toString(), 'button', [], '', true, undefined, 'Delete');
  var finalArray = [newFieldLabel, newFieldDrawGraphicMarker, newFieldShape, newFieldSizeWidthShape, newFieldSizeHeightShape, newFieldRotateArrow, newFieldPositionXShape, newFieldPositionYShape, newFieldButton];
  return finalArray;
};

/***/ }),

/***/ "./Functions/EditParameter/editGoodParameter.tsx":
/*!*******************************************************!*\
  !*** ./Functions/EditParameter/editGoodParameter.tsx ***!
  \*******************************************************/
/*! exports provided: editGoodParameter, limitValueInitialSpace, editGoodParameterExtend */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editGoodParameter", function() { return editGoodParameter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "limitValueInitialSpace", function() { return limitValueInitialSpace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editGoodParameterExtend", function() { return editGoodParameterExtend; });
/**
 * Edit the parameter in Coor object
 * @param {string} name parameter to edit
 * @param {Coor} editCoor object to edit
 * @param {string} newValue value to insert in the parameter
 * @returns {Coor} object edit
 */
var editGoodParameter = function editGoodParameter(name, editCoor, newValue, widthBackground, heigthBackground) {
  if (name.startsWith('positionXMin')) {
    editCoor.coordinate.xMin = limitValueInitialSpace(newValue, 1, widthBackground, heigthBackground); //editCoor.coordinate.xMin = newValue;
  } else if (name.startsWith('positionXMax')) {
    editCoor.coordinate.xMax = limitValueInitialSpace(newValue, 2, widthBackground, heigthBackground); //editCoor.coordinate.xMax = newValue;
  } else if (name.startsWith('positionYMin')) {
    editCoor.coordinate.yMin = limitValueInitialSpace(newValue, 3, widthBackground, heigthBackground); //editCoor.coordinate.yMin = newValue;
  } else if (name.startsWith('positionYMax')) {
    editCoor.coordinate.yMax = limitValueInitialSpace(newValue, 4, widthBackground, heigthBackground); //editCoor.coordinate.yMax = newValue;
  }

  return editCoor;
};
var limitValueInitialSpace = function limitValueInitialSpace(coorInitialSpace, position, widthBackground, heigthBackground) {
  var result = parseInt(coorInitialSpace, 10);

  if (position === 1 || position === 2) {
    //xMin + xMax
    if (result > widthBackground) {
      result = widthBackground;
    }
  } else if (position === 3 || position === 4) {
    //yMin + yMax
    if (result > heigthBackground) {
      result = heigthBackground;
    }
  } // if (!defaultInitialSpace) {
  //   result = coorInt;
  // } else {
  //   if (coorInt > 100) {
  //     result = 100;
  //   } else if (coorInt < 0) {
  //     result = 0;
  //   } else if (coorInt >= 0 && coorInt <= 100) {
  //     result = coorInt;
  //   } else {
  //     result = 0;
  //   }
  // }


  if (!result) {
    result = 0;
  }

  return result.toString();
};
var editGoodParameterExtend = function editGoodParameterExtend(name, editCoor, newValue // widthInitialSpace?: string,
// heightInitialSpace?: string
) {
  if (name.startsWith('positionXMin')) {
    editCoor.coords.xMin = newValue;
  } else if (name.startsWith('positionXMax')) {
    editCoor.coords.xMax = newValue;
  } else if (name.startsWith('positionYMin')) {
    editCoor.coords.yMin = newValue;
  } else if (name.startsWith('positionYMax')) {
    editCoor.coords.yMax = newValue;
  } else if (name.startsWith('label')) {
    editCoor.label = newValue;
  } else if (name.startsWith('image')) {
    editCoor.img = newValue;
  } else if (name.startsWith('key')) {
    editCoor.mainMetric.key = newValue;
  } else if (name.startsWith('valueKey')) {
    editCoor.mainMetric.keyValue = newValue;
  }

  return editCoor;
};

/***/ }),

/***/ "./Functions/EditParameter/editGoodParameterOrientedLink.tsx":
/*!*******************************************************************!*\
  !*** ./Functions/EditParameter/editGoodParameterOrientedLink.tsx ***!
  \*******************************************************************/
/*! exports provided: editGoodParameterOrientedLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editGoodParameterOrientedLink", function() { return editGoodParameterOrientedLink; });
/**
 * Edit the parameter in Coor object
 * @param {string} name parameter to edit
 * @param {Coor} editCoor object to edit
 * @param {string} newValue value to insert in the parameter
 * @returns {Coor} object edit
 */
var editGoodParameterOrientedLink = function editGoodParameterOrientedLink(name, editCoor, newValue, newValueSelect) {
  if (name.startsWith('label')) {
    editCoor.label = newValue;
  } else if (name.startsWith('orientationLink')) {
    editCoor.orientationLink = newValueSelect;
  } else if (name.startsWith('pointAX')) {
    editCoor.pointAPositionX = newValue;
  } else if (name.startsWith('pointAY')) {
    editCoor.pointAPositionY = newValue;
  } else if (name.startsWith('pointBX')) {
    editCoor.pointBPositionX = newValue;
  } else if (name.startsWith('pointBY')) {
    editCoor.pointBPositionY = newValue;
  } else if (name.startsWith('colorCoordinateA')) {
    editCoor.colorCoordinateA = newValue;
  } else if (name.startsWith('colorCoordinateB')) {
    editCoor.colorCoordinateB = newValue;
  } else if (name.startsWith('refIdMainMetric')) {
    editCoor.mainMetric.refId = newValue;
  } else if (name.startsWith('keyMainMetric')) {
    editCoor.mainMetric.key = newValue;
  } else if (name.startsWith('keyValueMainMetric')) {
    editCoor.mainMetric.keyValue = newValue;
  } else if (name.startsWith('isIncurved')) {
    editCoor.isIncurved = newValueSelect;
  } else if (name.startsWith('pointCX')) {
    editCoor.pointCPositionX = newValue;
  } else if (name.startsWith('pointCY')) {
    editCoor.pointCPositionY = newValue;
  } else if (name.startsWith('pointIn')) {
    editCoor.pointIn = newValue;
  } else if (name.startsWith('pointOut')) {
    editCoor.pointOut = newValue;
  } else if (name.startsWith('regionIn')) {
    editCoor.regionIn = newValue;
  } else if (name.startsWith('regionOut')) {
    editCoor.regionOut = newValue;
  } else if (name.startsWith('size')) {
    editCoor.size = newValue;
  }

  return editCoor;
};

/***/ }),

/***/ "./Functions/EditParameter/editGoodParameterPoint.tsx":
/*!************************************************************!*\
  !*** ./Functions/EditParameter/editGoodParameterPoint.tsx ***!
  \************************************************************/
/*! exports provided: editGoodParameterPoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editGoodParameterPoint", function() { return editGoodParameterPoint; });
/**
 * Edit the parameter in Coor object
 * @param {string} name parameter to edit
 * @param {Coor} editCoor object to edit
 * @param {string} newValue value to insert in the parameter
 * @returns {Coor} object edit
 */
var editGoodParameterPoint = function editGoodParameterPoint(name, editCoor, newValue, newValueSelect) {
  if (name.startsWith('label')) {
    editCoor.label = newValue;
  } else if (name.startsWith('drawGraphicMarker')) {
    editCoor.drawGraphicMarker = newValueSelect;
  } else if (name.startsWith('shape')) {
    editCoor.shape = newValueSelect;
  } else if (name.startsWith('sizeWidth')) {
    editCoor.sizeWidth = newValue;
  } else if (name.startsWith('sizeHeight')) {
    editCoor.sizeHeight = newValueSelect;
  } else if (name.startsWith('rotateArrow')) {
    editCoor.rotateArrow = newValue;
  } else if (name.startsWith('positionShapeX')) {
    editCoor.positionShapeX = newValue;
  } else if (name.startsWith('positionShapeY')) {
    editCoor.positionShapeY = newValue;
  } else if (name.startsWith('color')) {
    editCoor.color = newValue;
  } else if (name.startsWith('refIdMainMetric')) {
    editCoor.mainMetric.refId = newValue;
  } else if (name.startsWith('keyMainMetric')) {
    editCoor.mainMetric.key = newValue;
  } else if (name.startsWith('keyValueMainMetric')) {
    editCoor.mainMetric.keyValue = newValue;
  }

  return editCoor;
};

/***/ }),

/***/ "./Functions/Input/inputButton.tsx":
/*!*****************************************!*\
  !*** ./Functions/Input/inputButton.tsx ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);



var InputButtonField = function InputButtonField(_a) {
  var label = _a.label,
      value = _a.value,
      name = _a.name,
      required = _a.required,
      _handleChange = _a._handleChange,
      id = _a.id,
      withLabel = _a.withLabel;

  if (withLabel === true) {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__["FormField"], {
      label: label,
      labelWidth: 10,
      inputWidth: 20,
      type: "button",
      required: required,
      name: name,
      id: id,
      onClick: _handleChange,
      value: label || ''
    }));
  } else {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__["Button"], {
      onClick: _handleChange,
      variant: "danger",
      id: id,
      size: "md"
    }, "Delete"));
  }
};

/* harmony default export */ __webpack_exports__["default"] = (InputButtonField);

/***/ }),

/***/ "./Functions/Input/inputSelect.tsx":
/*!*****************************************!*\
  !*** ./Functions/Input/inputSelect.tsx ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);



var InputSelect = function InputSelect(_a) {
  var _onChange = _a._onChange,
      data = _a.data,
      defaultValue = _a.defaultValue;
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__["Select"], {
    onChange: function onChange(value) {
      return _onChange(value);
    },
    allowCustomValue: false,
    options: data,
    width: 30,
    value: defaultValue
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (InputSelect);

/***/ }),

/***/ "./Functions/Input/inputSelectOrientedLink.tsx":
/*!*****************************************************!*\
  !*** ./Functions/Input/inputSelectOrientedLink.tsx ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);



var InputSelectOrientedLink = function InputSelectOrientedLink(_a) {
  var _onChange = _a._onChange,
      data = _a.data,
      index = _a.index,
      defaultValue = _a.defaultValue,
      name = _a.name,
      label = _a.label;
  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
    style: {
      display: 'flex',
      marginBottom: '2px'
    }
  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__["FormLabel"], {
    width: 15
  }, label), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__["Select"], {
    onChange: function onChange(value) {
      return _onChange(value, name, index);
    },
    allowCustomValue: false,
    options: data,
    value: defaultValue,
    width: 20
  }));
};

/* harmony default export */ __webpack_exports__["default"] = (InputSelectOrientedLink);

/***/ }),

/***/ "./Functions/Input/inputSelectPoint.tsx":
/*!**********************************************!*\
  !*** ./Functions/Input/inputSelectPoint.tsx ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__);



var InputSelectPoint = function InputSelectPoint(_a) {
  var _onChange = _a._onChange,
      data = _a.data,
      index = _a.index,
      defaultValue = _a.defaultValue,
      name = _a.name,
      shape = _a.shape,
      label = _a.label;

  if (name !== undefined) {
    if (shape !== 'arrow' && name.startsWith('sizeHeight')) {
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null);
    } else {
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        style: {
          display: 'flex',
          marginBottom: '2px'
        }
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__["FormLabel"], {
        width: 15
      }, label), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__["Select"], {
        onChange: function onChange(value) {
          return _onChange(value, name, index);
        },
        allowCustomValue: false,
        options: data,
        value: defaultValue,
        width: 20
      }));
    }
  } else {
    return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
      style: {
        display: 'flex',
        marginBottom: '2px'
      }
    }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__["FormLabel"], {
      width: 15
    }, label), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_1__["Select"], {
      onChange: function onChange(value) {
        return _onChange(value, name, index);
      },
      allowCustomValue: false,
      options: data,
      value: defaultValue,
      width: 20
    }));
  }
};

/* harmony default export */ __webpack_exports__["default"] = (InputSelectPoint);

/***/ }),

/***/ "./Functions/Input/inputSeriesColorPicker.tsx":
/*!****************************************************!*\
  !*** ./Functions/Input/inputSeriesColorPicker.tsx ***!
  \****************************************************/
/*! exports provided: InputSeriesColorPicker, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputSeriesColorPicker", function() { return InputSeriesColorPicker; });
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


/**
 * 1.7 -> taille approximative d'un caractere
 * @param param0 voir InputTextFieldProps
 */

var InputSeriesColorPicker = function InputSeriesColorPicker(_a) {
  var color = _a.color,
      keyInt = _a.keyInt,
      text = _a.text,
      _onChange = _a._onChange,
      width = _a.width;
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    className: "form-field"
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__["FormLabel"], {
    width: width ? width : 15
  }, text), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
    id: "colorPicker",
    style: {
      margin: '0.5%',
      padding: '0.5%',
      paddingTop: '5px',
      backgroundColor: '#1f1f20',
      border: '3px solid black'
    }
  }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__["ColorPicker"], {
    color: color,
    onChange: function onChange(newColor) {
      return _onChange(keyInt, newColor);
    }
  })));
};
/* harmony default export */ __webpack_exports__["default"] = (InputSeriesColorPicker); // width || Math.round(text.length * 1.7)

/***/ }),

/***/ "./Functions/Input/inputText.tsx":
/*!***************************************!*\
  !*** ./Functions/Input/inputText.tsx ***!
  \***************************************/
/*! exports provided: InputTextField, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputTextField", function() { return InputTextField; });
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


var InputTextField = function InputTextField(_a) {
  var label = _a.label,
      name = _a.name,
      placeholder = _a.placeholder,
      required = _a.required,
      value = _a.value,
      _handleChange = _a._handleChange,
      disabled = _a.disabled,
      id = _a.id;
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__["FormField"], {
    id: id,
    label: label,
    labelWidth: 15,
    inputWidth: 15,
    type: "text",
    required: required,
    name: name,
    value: value,
    onChange: _handleChange,
    placeholder: placeholder,
    disabled: disabled ? disabled : false
  }));
};
/* harmony default export */ __webpack_exports__["default"] = (InputTextField); // Math.round((label && label.length > 0 ? label.length : 1) * 1.7)

/***/ }),

/***/ "./Functions/Input/inputTextOrientedLink.tsx":
/*!***************************************************!*\
  !*** ./Functions/Input/inputTextOrientedLink.tsx ***!
  \***************************************************/
/*! exports provided: InputTextOrientedLink, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputTextOrientedLink", function() { return InputTextOrientedLink; });
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


var InputTextOrientedLink = function InputTextOrientedLink(_a) {
  var label = _a.label,
      name = _a.name,
      placeholder = _a.placeholder,
      required = _a.required,
      value = _a.value,
      _handleChange = _a._handleChange,
      isIncurved = _a.isIncurved;

  if (name.startsWith('pointCX') || name.startsWith('pointCY')) {
    if (isIncurved.value) {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__["FormField"], {
        label: label,
        labelWidth: 15,
        inputWidth: 20,
        type: "text",
        required: required,
        name: name,
        value: value,
        onChange: _handleChange,
        placeholder: placeholder
      }));
    } else {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
    }
  } else {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__["FormField"], {
      label: label,
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      required: required,
      name: name,
      value: value,
      onChange: _handleChange,
      placeholder: placeholder
    }));
  }
};
/* harmony default export */ __webpack_exports__["default"] = (InputTextOrientedLink);

/***/ }),

/***/ "./Functions/Input/inputTextPoint.tsx":
/*!********************************************!*\
  !*** ./Functions/Input/inputTextPoint.tsx ***!
  \********************************************/
/*! exports provided: InputTextPoint, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputTextPoint", function() { return InputTextPoint; });
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);


var InputTextPoint = function InputTextPoint(_a) {
  var label = _a.label,
      name = _a.name,
      placeholder = _a.placeholder,
      required = _a.required,
      value = _a.value,
      _handleChange = _a._handleChange,
      shape = _a.shape;

  if (name !== undefined) {
    if (shape !== 'arrow' && name.startsWith('rotateArrow')) {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
    } else {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__["FormField"], {
        label: label,
        labelWidth: 15,
        inputWidth: 20,
        type: "text",
        required: required,
        name: name,
        value: value,
        onChange: _handleChange,
        placeholder: placeholder
      }));
    }
  } else {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_0__["FormField"], {
      label: label,
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      required: required,
      name: name,
      value: value,
      onChange: _handleChange,
      placeholder: placeholder
    }));
  }
};
/* harmony default export */ __webpack_exports__["default"] = (InputTextPoint);

/***/ }),

/***/ "./Functions/fetchMetrics.tsx":
/*!************************************!*\
  !*** ./Functions/fetchMetrics.tsx ***!
  \************************************/
/*! exports provided: reqMetricRegion, reqMetricAuxRegion, reqMetricPoint, reqMetricAuxPoint, reqMetricLink, reqMetricAuxLink, reqMetricOrientedLink, reqMetricAuxOrientedLink, reqUpdateMetrics */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reqMetricRegion", function() { return reqMetricRegion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reqMetricAuxRegion", function() { return reqMetricAuxRegion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reqMetricPoint", function() { return reqMetricPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reqMetricAuxPoint", function() { return reqMetricAuxPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reqMetricLink", function() { return reqMetricLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reqMetricAuxLink", function() { return reqMetricAuxLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reqMetricOrientedLink", function() { return reqMetricOrientedLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reqMetricAuxOrientedLink", function() { return reqMetricAuxOrientedLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reqUpdateMetrics", function() { return reqUpdateMetrics; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");

var reqMetricRegion = function reqMetricRegion(region, props) {
  var e_1, _a;

  var data = [];

  try {
    for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.data.series), _c = _b.next(); !_c.done; _c = _b.next()) {
      var line = _c.value;

      if (line.refId === region.mainMetric.refId) {
        data.push(line);
      }
    }
  } catch (e_1_1) {
    e_1 = {
      error: e_1_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
    } finally {
      if (e_1) throw e_1.error;
    }
  }

  region.mainMetric.returnQuery = data;
};
var reqMetricAuxRegion = function reqMetricAuxRegion(region, props) {
  var e_2, _a, e_3, _b;

  try {
    for (var _c = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(region.metrics), _d = _c.next(); !_d.done; _d = _c.next()) {
      var metric = _d.value;
      var data = [];

      try {
        for (var _e = (e_3 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.data.series)), _f = _e.next(); !_f.done; _f = _e.next()) {
          var line = _f.value;

          if (line.refId === metric.refId) {
            data.push(line);
          }
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (_f && !_f.done && (_b = _e["return"])) _b.call(_e);
        } finally {
          if (e_3) throw e_3.error;
        }
      }

      metric.returnQuery = data;
    }
  } catch (e_2_1) {
    e_2 = {
      error: e_2_1
    };
  } finally {
    try {
      if (_d && !_d.done && (_a = _c["return"])) _a.call(_c);
    } finally {
      if (e_2) throw e_2.error;
    }
  }
};
var reqMetricPoint = function reqMetricPoint(point, props) {
  var e_4, _a;

  var data = [];

  try {
    for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.data.series), _c = _b.next(); !_c.done; _c = _b.next()) {
      var line = _c.value;

      if (line.refId === point.mainMetric.refId) {
        data.push(line);
      }
    }
  } catch (e_4_1) {
    e_4 = {
      error: e_4_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
    } finally {
      if (e_4) throw e_4.error;
    }
  }

  point.mainMetric.returnQuery = data;
};
var reqMetricAuxPoint = function reqMetricAuxPoint(point, props) {
  var e_5, _a, e_6, _b;

  try {
    for (var _c = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(point.metrics), _d = _c.next(); !_d.done; _d = _c.next()) {
      var metric = _d.value;
      var data = [];

      try {
        for (var _e = (e_6 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.data.series)), _f = _e.next(); !_f.done; _f = _e.next()) {
          var line = _f.value;

          if (line.refId === metric.refId) {
            data.push(line);
          }
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (_f && !_f.done && (_b = _e["return"])) _b.call(_e);
        } finally {
          if (e_6) throw e_6.error;
        }
      }

      metric.returnQuery = data;
    }
  } catch (e_5_1) {
    e_5 = {
      error: e_5_1
    };
  } finally {
    try {
      if (_d && !_d.done && (_a = _c["return"])) _a.call(_c);
    } finally {
      if (e_5) throw e_5.error;
    }
  }
};
var reqMetricLink = function reqMetricLink(link, props) {
  var e_7, _a;

  var data = [];

  try {
    for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.data.series), _c = _b.next(); !_c.done; _c = _b.next()) {
      var line = _c.value;

      if (line.refId === link.mainMetric.refId) {
        data.push(line);
      }
    }
  } catch (e_7_1) {
    e_7 = {
      error: e_7_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
    } finally {
      if (e_7) throw e_7.error;
    }
  }

  link.mainMetric.returnQuery = data;
};
var reqMetricAuxLink = function reqMetricAuxLink(link, props) {
  var e_8, _a, e_9, _b;

  try {
    for (var _c = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(link.metrics), _d = _c.next(); !_d.done; _d = _c.next()) {
      var metric = _d.value;
      var data = [];

      try {
        for (var _e = (e_9 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.data.series)), _f = _e.next(); !_f.done; _f = _e.next()) {
          var line = _f.value;

          if (line.refId === metric.refId) {
            data.push(line);
          }
        }
      } catch (e_9_1) {
        e_9 = {
          error: e_9_1
        };
      } finally {
        try {
          if (_f && !_f.done && (_b = _e["return"])) _b.call(_e);
        } finally {
          if (e_9) throw e_9.error;
        }
      }

      metric.returnQuery = data;
    }
  } catch (e_8_1) {
    e_8 = {
      error: e_8_1
    };
  } finally {
    try {
      if (_d && !_d.done && (_a = _c["return"])) _a.call(_c);
    } finally {
      if (e_8) throw e_8.error;
    }
  }
};
var reqMetricOrientedLink = function reqMetricOrientedLink(orientedLink, props) {
  var e_10, _a;

  var data = [];
  var dataB = [];

  try {
    for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.data.series), _c = _b.next(); !_c.done; _c = _b.next()) {
      var line = _c.value;

      if (line.refId === orientedLink.mainMetric.refId) {
        data.push(line);
      }

      if (line.refId === orientedLink.mainMetricB.refId) {
        dataB.push(line);
      }
    }
  } catch (e_10_1) {
    e_10 = {
      error: e_10_1
    };
  } finally {
    try {
      if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
    } finally {
      if (e_10) throw e_10.error;
    }
  }

  orientedLink.mainMetric.returnQuery = data;
  orientedLink.mainMetricB.returnQuery = dataB;
};
var reqMetricAuxOrientedLink = function reqMetricAuxOrientedLink(orientedLink, props) {
  var e_11, _a, e_12, _b, e_13, _c, e_14, _d;

  try {
    for (var _e = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(orientedLink.metrics), _f = _e.next(); !_f.done; _f = _e.next()) {
      var metric = _f.value;
      var data = [];

      try {
        for (var _g = (e_12 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.data.series)), _h = _g.next(); !_h.done; _h = _g.next()) {
          var line = _h.value;

          if (line.refId === metric.refId) {
            data.push(line);
          }
        }
      } catch (e_12_1) {
        e_12 = {
          error: e_12_1
        };
      } finally {
        try {
          if (_h && !_h.done && (_b = _g["return"])) _b.call(_g);
        } finally {
          if (e_12) throw e_12.error;
        }
      }

      metric.returnQuery = data;
    }
  } catch (e_11_1) {
    e_11 = {
      error: e_11_1
    };
  } finally {
    try {
      if (_f && !_f.done && (_a = _e["return"])) _a.call(_e);
    } finally {
      if (e_11) throw e_11.error;
    }
  }

  try {
    for (var _j = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(orientedLink.metricsB), _k = _j.next(); !_k.done; _k = _j.next()) {
      var metric = _k.value;
      var dataB = [];

      try {
        for (var _l = (e_14 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.data.series)), _m = _l.next(); !_m.done; _m = _l.next()) {
          var line = _m.value;

          if (line.refId === metric.refId) {
            dataB.push(line);
          }
        }
      } catch (e_14_1) {
        e_14 = {
          error: e_14_1
        };
      } finally {
        try {
          if (_m && !_m.done && (_d = _l["return"])) _d.call(_l);
        } finally {
          if (e_14) throw e_14.error;
        }
      }

      metric.returnQuery = dataB;
    }
  } catch (e_13_1) {
    e_13 = {
      error: e_13_1
    };
  } finally {
    try {
      if (_k && !_k.done && (_c = _j["return"])) _c.call(_j);
    } finally {
      if (e_13) throw e_13.error;
    }
  }
};
var reqUpdateMetrics = function reqUpdateMetrics(props) {
  var e_15, _a, e_16, _b, e_17, _c, e_18, _d;

  try {
    // Update regions
    for (var _e = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.options.regionCoordinateSpace), _f = _e.next(); !_f.done; _f = _e.next()) {
      var region = _f.value;
      reqMetricRegion(region, props);
      reqMetricAuxRegion(region, props);
    }
  } catch (e_15_1) {
    e_15 = {
      error: e_15_1
    };
  } finally {
    try {
      if (_f && !_f.done && (_a = _e["return"])) _a.call(_e);
    } finally {
      if (e_15) throw e_15.error;
    }
  }

  try {
    // Update links
    for (var _g = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.options.arrayLinks), _h = _g.next(); !_h.done; _h = _g.next()) {
      var link = _h.value;
      reqMetricLink(link, props);
      reqMetricAuxLink(link, props);
    }
  } catch (e_16_1) {
    e_16 = {
      error: e_16_1
    };
  } finally {
    try {
      if (_h && !_h.done && (_b = _g["return"])) _b.call(_g);
    } finally {
      if (e_16) throw e_16.error;
    }
  }

  try {
    // Update links
    for (var _j = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.options.arrayOrientedLinks), _k = _j.next(); !_k.done; _k = _j.next()) {
      var orientedLink = _k.value;
      reqMetricOrientedLink(orientedLink, props);
      reqMetricAuxOrientedLink(orientedLink, props);
    }
  } catch (e_17_1) {
    e_17 = {
      error: e_17_1
    };
  } finally {
    try {
      if (_k && !_k.done && (_c = _j["return"])) _c.call(_j);
    } finally {
      if (e_17) throw e_17.error;
    }
  }

  try {
    // Update points
    for (var _l = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(props.options.arrayPoints), _m = _l.next(); !_m.done; _m = _l.next()) {
      var point = _m.value;
      reqMetricPoint(point, props);
      reqMetricAuxPoint(point, props);
    }
  } catch (e_18_1) {
    e_18 = {
      error: e_18_1
    };
  } finally {
    try {
      if (_m && !_m.done && (_d = _l["return"])) _d.call(_l);
    } finally {
      if (e_18) throw e_18.error;
    }
  }
};

/***/ }),

/***/ "./Functions/getLowerLimit.tsx":
/*!*************************************!*\
  !*** ./Functions/getLowerLimit.tsx ***!
  \*************************************/
/*! exports provided: getLowerLimit */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getLowerLimit", function() { return getLowerLimit; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");

/**
 * Get color with lower limit and prometheus value
 * @returns {LowerLimit} new color value
 */

var getLowerLimit = function getLowerLimit(coordinate, value) {
  var e_1, _a;

  var lowerLimit = coordinate.lowerLimit;
  var result = {
    colorBack: '',
    colorBorder: '',
    sizeBorder: 0
  };

  if (coordinate.colorMode && value) {
    try {
      for (var lowerLimit_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(lowerLimit), lowerLimit_1_1 = lowerLimit_1.next(); !lowerLimit_1_1.done; lowerLimit_1_1 = lowerLimit_1.next()) {
        var line = lowerLimit_1_1.value; //const min: string = line.lowerLimitMin.replace('>', '');

        var min = line.lowerLimitMin.split('')[0] === '>' ? line.lowerLimitMin.substr(1) : line.lowerLimitMin;
        var minFloat = parseFloat(min);
        var maxFloat = parseFloat(line.lowerLimitMax);

        if ((minFloat <= value || !line.lowerLimitMin) && (maxFloat >= value || !line.lowerLimitMax)) {
          if (lowerLimit.length > 0) {
            result.colorBack = coordinate.traceBack ? line.backColor : '';
            result.colorBorder = coordinate.traceBorder ? line.borderColor : '';
            result.sizeBorder = coordinate.traceBorder ? parseInt(line.sizeBorder, 10) : 0;
            break;
          }
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (lowerLimit_1_1 && !lowerLimit_1_1.done && (_a = lowerLimit_1["return"])) _a.call(lowerLimit_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  } else {
    if (lowerLimit.length > 0) {
      result.colorBack = coordinate.traceBack ? lowerLimit[0].backColor : '';
      result.colorBorder = coordinate.traceBorder ? lowerLimit[0].borderColor : '';
      result.sizeBorder = coordinate.traceBorder ? parseInt(lowerLimit[0].sizeBorder, 10) : 0;
    }
  }

  return result;
};

/***/ }),

/***/ "./Functions/getResultQuery.tsx":
/*!**************************************!*\
  !*** ./Functions/getResultQuery.tsx ***!
  \**************************************/
/*! exports provided: searchNameIsFilter, getResultQuery */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "searchNameIsFilter", function() { return searchNameIsFilter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getResultQuery", function() { return getResultQuery; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");

/** search is key and keyValue is in query */

var searchNameIsKey = function searchNameIsKey(query, mainMetric) {
  var e_1, _a;

  var _b;

  if (mainMetric.key === '' && mainMetric.keyValue === '') {
    return true;
  }

  var remove = (_b = query.name) === null || _b === void 0 ? void 0 : _b.split('{');
  var nameQuery = remove[1].split(',').flatMap(function (value) {
    return value.replace(/[\"{}]/gm, '');
  }) || [];

  if (nameQuery && nameQuery.length > 0) {
    try {
      for (var nameQuery_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(nameQuery), nameQuery_1_1 = nameQuery_1.next(); !nameQuery_1_1.done; nameQuery_1_1 = nameQuery_1.next()) {
        var oneQuery = nameQuery_1_1.value;
        var keyValue = oneQuery.split('=');

        if (keyValue.length === 2) {
          if (keyValue[0] === mainMetric.key && keyValue[1] === mainMetric.keyValue) {
            return true;
          }
        }
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (nameQuery_1_1 && !nameQuery_1_1.done && (_a = nameQuery_1["return"])) _a.call(nameQuery_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }
  }

  return false;
};

var searchNameIsFilter = function searchNameIsFilter(query, mainMetric) {
  var e_2, _a, e_3, _b;

  var _c;

  if (!mainMetric.filter) {
    return true;
  }

  var res = 0;
  var filters = mainMetric.filter;
  var remove = (_c = query.name) === null || _c === void 0 ? void 0 : _c.split('{');
  var nameQuery = remove[1].split(',').map(function (value) {
    return value.replace(/[\"{}]/gm, '');
  }) || [];

  if (nameQuery && nameQuery.length > 0) {
    try {
      for (var nameQuery_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(nameQuery), nameQuery_2_1 = nameQuery_2.next(); !nameQuery_2_1.done; nameQuery_2_1 = nameQuery_2.next()) {
        var oneQuery = nameQuery_2_1.value;
        var keyValue = oneQuery.split('=');

        try {
          for (var filters_1 = (e_3 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(filters)), filters_1_1 = filters_1.next(); !filters_1_1.done; filters_1_1 = filters_1.next()) {
            var filter = filters_1_1.value;

            if (keyValue.length === 2) {
              if (keyValue[0] === filter.label && keyValue[1] === filter.value) {
                res++;
              }
            }
          }
        } catch (e_3_1) {
          e_3 = {
            error: e_3_1
          };
        } finally {
          try {
            if (filters_1_1 && !filters_1_1.done && (_b = filters_1["return"])) _b.call(filters_1);
          } finally {
            if (e_3) throw e_3.error;
          }
        }
      }
    } catch (e_2_1) {
      e_2 = {
        error: e_2_1
      };
    } finally {
      try {
        if (nameQuery_2_1 && !nameQuery_2_1.done && (_a = nameQuery_2["return"])) _a.call(nameQuery_2);
      } finally {
        if (e_2) throw e_2.error;
      }
    } // console.log(res);
    // console.log(filters.length)


    if (res === filters.length) {
      return true;
    }
  }

  return false;
};
var getResultQuery = function getResultQuery(mainMetric) {
  var e_4, _a, e_5, _b;

  var cnt = null;

  if (mainMetric.returnQuery && mainMetric.returnQuery.length > 0) {
    var debug = [];
    var countValue = 0;
    cnt = 0;

    if (!mainMetric.filter) {
      try {
        for (var _c = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(mainMetric.returnQuery), _d = _c.next(); !_d.done; _d = _c.next()) {
          var line = _d.value;
          var result = searchNameIsKey(line, mainMetric);

          if (result) {
            var sizeQuery = line.fields[0].values.length; // in grafana 7 change line.field[0] to line.field[1]

            for (var i = 0; i < sizeQuery; i++) {
              if (line.fields.length > 0 && line.fields[0].values.get(i)) {
                cnt += line.fields[0].values.get(i);
                debug.push(line.fields[0].values.get(i));
                ++countValue;
              }
            }
          }
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (_d && !_d.done && (_a = _c["return"])) _a.call(_c);
        } finally {
          if (e_4) throw e_4.error;
        }
      }

      if (mainMetric.manageValue === 'avg') {
        cnt /= countValue;
      } else if (mainMetric.manageValue === 'err') {
        if (countValue > 1) {
          cnt = null;
        }
      }
    } else {
      try {
        for (var _e = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(mainMetric.returnQuery), _f = _e.next(); !_f.done; _f = _e.next()) {
          var line = _f.value;
          var result = searchNameIsFilter(line, mainMetric);

          if (result) {
            var sizeQuery = line.fields[0].values.length; // in grafana 7 change line.field[0] to line.field[1]

            for (var i = 0; i < sizeQuery; i++) {
              if (line.fields.length > 0 && line.fields[0].values.get(i)) {
                cnt += line.fields[0].values.get(i);
                debug.push(line.fields[0].values.get(i));
                ++countValue;
              }
            }
          }
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (_f && !_f.done && (_b = _e["return"])) _b.call(_e);
        } finally {
          if (e_5) throw e_5.error;
        }
      }

      if (mainMetric.manageValue === 'avg') {
        cnt /= countValue;
      } else if (mainMetric.manageValue === 'err') {
        if (countValue > 1) {
          cnt = null;
        }
      }
    }
  }

  return cnt;
};
/*********************************** the best solution it's check the instant checbox in addquery */

/*****************************Other solution but there are a problem with average of node_network_up */
// export const getResultQuery = (mainMetric: Metric) => {
//   let cnt: number | null = null;
//   console.log(mainMetric.returnQuery);
//   if (mainMetric.returnQuery && mainMetric.returnQuery.length > 0) {
//     const debug: number[] = [];
//     let countValue = 0;
//     cnt = 0;
//     for (const line of mainMetric.returnQuery) {
//       const result = searchNameIsKey(line, mainMetric);
//       if (result) {
//         const sizeQuery: number = line.fields[0].values.length;
//         // in grafana 7 change line.field[0] to line.field[1]
//         for (let i = 0; i < sizeQuery; i++) {
//           if (line.fields.length > 0 && line.fields[0].values.get(i)) {
//             cnt += line.fields[0].values.get(i);
//             debug.push(line.fields[0].values.get(i));
//             ++countValue;
//           }
//           if (countValue > -1 && mainMetric.manageValue === 'sum') {
//             break;
//           }
//         }
//       }
//     }
//     if (mainMetric.manageValue === 'avg') {
//       cnt /= countValue;
//     } else if (mainMetric.manageValue === 'err') {
//       if (countValue > -1) {
//         cnt = null;
//       }
//     }
//     console.log(debug);
//   }
//   return cnt;
// };

/***/ }),

/***/ "./Functions/initOrientedLink.tsx":
/*!****************************************!*\
  !*** ./Functions/initOrientedLink.tsx ***!
  \****************************************/
/*! exports provided: initOrientedLink, cloneOrientedLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initOrientedLink", function() { return initOrientedLink; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cloneOrientedLink", function() { return cloneOrientedLink; });
/* harmony import */ var _Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Models/TextObjectClass */ "./Models/TextObjectClass.tsx");
/* harmony import */ var _Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Models/LinkURLClass */ "./Models/LinkURLClass.tsx");
/* harmony import */ var _Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Models/PositionParameterClass */ "./Models/PositionParameterClass.tsx");
/* harmony import */ var _Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Models/OrientedLinkClass */ "./Models/OrientedLinkClass.tsx");




var initOrientedLink = function initOrientedLink(newId, newZIndex) {
  var num = newId;
  var zIndex = newZIndex;
  var initTextObject = new _Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_0__["TextObject"]('', false, 'white', 'black', {
    bold: false,
    italic: false,
    underline: false
  }, true, {
    legendElement: '',
    numericFormatElement: '5',
    unit: '',
    displayObjectInTooltip: false,
    // 'displayObjectPermanently': false,
    addColorTextElement: false,
    colorTextElement: 'white',
    addColorBackElement: false,
    colorBackElement: 'black'
  }, {
    legendElement: '',
    numericFormatElement: '5',
    unit: '',
    displayObjectInTooltip: true,
    // 'displayObjectPermanently': false,
    addColorTextElement: true,
    colorTextElement: 'white',
    addColorBackElement: true,
    colorBackElement: 'black'
  });
  var linkUrl = new _Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_1__["LinkURLClass"]('', '', '');
  var initPositionParameter = new _Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_2__["PositionParameterClass"]('0', '0', '0', '0', {
    label: 'Right',
    value: 'Right'
  }, {
    label: 'Right',
    value: 'Right'
  });
  var initMainMetrics = {
    key: '',
    unit: '',
    format: '',
    keyValue: '',
    refId: '',
    manageValue: 'avg'
  };
  var initMainMetricsB = {
    key: '',
    unit: '',
    format: '',
    keyValue: '',
    refId: '',
    manageValue: 'avg'
  };
  var newCoordinate = new _Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_3__["OrientedLinkClass"](num, linkUrl, [], [], '', initTextObject, // {
  // 	'key': keyMainMetric || '',
  // 	'unit': '',
  // 	'format': '',
  // 	'keyValue': keyValueMainMetric || '',
  // 	'refId': refIdMainMetric || '',
  // 	'manageValue': 'avg',
  // }
  initMainMetrics, [], false, false, false, initPositionParameter, 'orientedLink' + num.toString(), {
    label: 'Monodirectional',
    value: 'AB'
  }, '9', '0', '0', '#5794F2', '0', '0', '#E54658', '', '', '', '', '', '', zIndex, '', '', {}, initMainMetricsB, [], '0', '0', '0', '0', '0', '0', '0', '0');
  return newCoordinate;
};
var cloneOrientedLink = function cloneOrientedLink(orientedLink) {
  var initTextObject = new _Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_0__["TextObject"]( //orientedLink.textObj.legend,
  orientedLink.textObj.value, orientedLink.textObj.isTextTooltip, orientedLink.textObj.colorBack, orientedLink.textObj.colorText, orientedLink.textObj.style, orientedLink.textObj.generateObjectText, orientedLink.textObj.valueGenerateObjectText, orientedLink.textObj.generateAuxiliaryElement);
  var linkURL = new _Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_1__["LinkURLClass"](orientedLink.linkURL.followLink, orientedLink.linkURL.hoveringTooltipLink, orientedLink.linkURL.hoveringTooltipText);
  var positionParameter = new _Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_2__["PositionParameterClass"](orientedLink.positionParameter.labelAPositionX, orientedLink.positionParameter.labelAPositionY, orientedLink.positionParameter.labelBPositionX, orientedLink.positionParameter.labelBPositionY, orientedLink.positionParameter.tooltipPositionA, orientedLink.positionParameter.tooltipPositionB);
  var mainMetric = {
    key: orientedLink.mainMetric.key,
    unit: orientedLink.mainMetric.unit,
    format: orientedLink.mainMetric.format,
    keyValue: orientedLink.mainMetric.keyValue,
    refId: orientedLink.mainMetric.refId,
    expr: orientedLink.mainMetric.expr,
    returnQuery: orientedLink.mainMetric.returnQuery,
    manageValue: orientedLink.mainMetric.manageValue
  };
  var newCoordinate = new _Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_3__["OrientedLinkClass"](orientedLink.id, linkURL, orientedLink.meta, orientedLink.lowerLimit, orientedLink.label, initTextObject, mainMetric, orientedLink.metrics, orientedLink.colorMode, orientedLink.traceBack, orientedLink.traceBorder, positionParameter, orientedLink.name, orientedLink.orientationLink, orientedLink.size, orientedLink.pointAPositionX, orientedLink.pointAPositionY, orientedLink.colorCoordinateA, orientedLink.pointBPositionX, orientedLink.pointBPositionY, orientedLink.colorCoordinateB, orientedLink.valueMainMetricA, orientedLink.valueMainMetricB, orientedLink.pointIn, orientedLink.pointOut, orientedLink.regionIn, orientedLink.regionOut, orientedLink.zIndex, orientedLink.pointCPositionX, orientedLink.pointCPositionY, orientedLink.isIncurved, orientedLink.mainMetricB, orientedLink.metricsB, orientedLink.widthInitialSpaceDefault, orientedLink.heightInitialSpaceDefault, orientedLink.pointAPositionXDefault, orientedLink.pointAPositionYDefault, orientedLink.pointBPositionXDefault, orientedLink.pointBPositionYDefault, orientedLink.pointCPositionXDefault, orientedLink.pointCPositionYDefault);
  return newCoordinate;
};

/***/ }),

/***/ "./Functions/initPoint.tsx":
/*!*********************************!*\
  !*** ./Functions/initPoint.tsx ***!
  \*********************************/
/*! exports provided: initPoint, clonePoint */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initPoint", function() { return initPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "clonePoint", function() { return clonePoint; });
/* harmony import */ var _Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Models/TextObjectClass */ "./Models/TextObjectClass.tsx");
/* harmony import */ var _Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../Models/LinkURLClass */ "./Models/LinkURLClass.tsx");
/* harmony import */ var _Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../Models/PositionParameterClass */ "./Models/PositionParameterClass.tsx");
/* harmony import */ var _Models_PointClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Models/PointClass */ "./Models/PointClass.tsx");



 //rgba(255, 255, 255, 0)

var initPoint = function initPoint(index) {
  var newId = index;
  var initTextObject = new _Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_0__["TextObject"]('', false, 'white', 'black', {
    italic: false,
    bold: false,
    underline: false
  }, true, {
    legendElement: '',
    numericFormatElement: '5',
    unit: '',
    displayObjectInTooltip: false,
    // 'displayObjectPermanently': false,
    addColorTextElement: false,
    colorTextElement: 'white',
    addColorBackElement: false,
    colorBackElement: 'black'
  }, {
    legendElement: '',
    numericFormatElement: '5',
    unit: '',
    displayObjectInTooltip: true,
    // 'displayObjectPermanently': false,
    addColorTextElement: true,
    colorTextElement: '',
    addColorBackElement: true,
    colorBackElement: 'black'
  });
  var linkURL = new _Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_1__["LinkURLClass"]('', '', '');
  var positionParameter = new _Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_2__["PositionParameterClass"]('0', '0', '0', '0', {
    label: 'Right',
    value: 'Right'
  }, {});
  var newCoordinate = new _Models_PointClass__WEBPACK_IMPORTED_MODULE_3__["PointClass"](newId, linkURL, [], [], '', initTextObject, {
    key: '',
    unit: '',
    format: '',
    keyValue: '',
    refId: '',
    manageValue: 'avg'
  }, [], false, false, false, positionParameter, 'point' + newId.toString(), '', {
    label: 'Yes',
    value: 'true'
  }, {
    label: 'Circle',
    value: 'circle'
  }, '12', {
    label: 'Medium',
    value: 'medium'
  }, '0', '0', '0', 'black', [], [], '0', '0', '0', '0');
  return newCoordinate;
};
var clonePoint = function clonePoint(point, xMinInitialSpace, xMaxInitialSpace, widthBackground, yMinInitialSpace, yMaxInitialSpace, heightBackground) {
  var initTextObject = new _Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_0__["TextObject"]( // point.textObj.legend,
  point.textObj.value, point.textObj.isTextTooltip, point.textObj.colorBack, point.textObj.colorText, point.textObj.style, point.textObj.generateObjectText, point.textObj.valueGenerateObjectText, point.textObj.generateAuxiliaryElement);
  var linkURL = new _Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_1__["LinkURLClass"](point.linkURL.followLink, point.linkURL.hoveringTooltipLink, point.linkURL.hoveringTooltipText);
  var positionParameter = new _Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_2__["PositionParameterClass"](point.positionParameter.labelAPositionX, point.positionParameter.labelAPositionY, point.positionParameter.labelBPositionX, point.positionParameter.labelBPositionY, point.positionParameter.tooltipPositionA, point.positionParameter.tooltipPositionB);
  var mainMetric = {
    key: point.mainMetric.key,
    unit: point.mainMetric.unit,
    format: point.mainMetric.format,
    keyValue: point.mainMetric.keyValue,
    filter: point.mainMetric.filter,
    refId: point.mainMetric.refId,
    expr: point.mainMetric.expr,
    returnQuery: point.mainMetric.returnQuery,
    manageValue: point.mainMetric.manageValue
  };
  var widthInitialSpace = xMaxInitialSpace - xMinInitialSpace;
  var positionXDefault = ((parseInt(point.positionShapeX, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
  var heightInitialSpace = yMaxInitialSpace - yMinInitialSpace;
  var positionYDefault = ((parseInt(point.positionShapeY, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
  var newCoordinate = new _Models_PointClass__WEBPACK_IMPORTED_MODULE_3__["PointClass"](point.id, linkURL, point.meta, point.lowerLimit, point.label, initTextObject, mainMetric, point.metrics, point.colorMode, point.traceBack, point.traceBorder, positionParameter, point.name, point.valueMetric, point.drawGraphicMarker, point.shape, point.sizeWidth, point.sizeHeight, point.rotateArrow, point.positionShapeX, point.positionShapeY, point.color, point.associateOrientedLinksIn, point.associateOrientedLinksOut, point.widthInitialSpaceDefault, point.heightInitialSpaceDefault, positionXDefault, positionYDefault);
  return newCoordinate;
};

/***/ }),

/***/ "./Functions/initRegionCoordinateSpace.tsx":
/*!*************************************************!*\
  !*** ./Functions/initRegionCoordinateSpace.tsx ***!
  \*************************************************/
/*! exports provided: initRegionCoordinateSpace, cloneRegionCoordinateSpace */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initRegionCoordinateSpace", function() { return initRegionCoordinateSpace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cloneRegionCoordinateSpace", function() { return cloneRegionCoordinateSpace; });
/* harmony import */ var Models_RegionClass__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Models/RegionClass */ "./Models/RegionClass.tsx");
/* harmony import */ var Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Models/TextObjectClass */ "./Models/TextObjectClass.tsx");
/* harmony import */ var Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! Models/LinkURLClass */ "./Models/LinkURLClass.tsx");
/* harmony import */ var Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Models/PositionParameterClass */ "./Models/PositionParameterClass.tsx");




/** init CoordinateSpaceExtendClass */

var initRegionCoordinateSpace = function initRegionCoordinateSpace(index) {
  var newId = index + 1;
  var initTextObject = new Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_1__["TextObject"]('', false, 'rgb(255, 255, 255, 0)', 'black', {
    bold: false,
    italic: false,
    underline: false
  }, true, {
    legendElement: '',
    numericFormatElement: '5',
    unit: '',
    displayObjectInTooltip: false,
    // 'displayObjectPermanently': false,
    addColorTextElement: false,
    colorTextElement: 'white',
    addColorBackElement: false,
    colorBackElement: 'black'
  }, {
    legendElement: '',
    numericFormatElement: '5',
    unit: '',
    displayObjectInTooltip: true,
    // 'displayObjectPermanently': false,
    addColorTextElement: false,
    colorTextElement: 'white',
    addColorBackElement: false,
    colorBackElement: 'black'
  });
  var linkURL = new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_2__["LinkURLClass"]('', '', '');
  var coords = {
    xMin: '0',
    xMax: '0',
    yMin: '0',
    yMax: '0'
  };
  var coordsDefault = {
    xMin: '0',
    xMax: '0',
    yMin: '0',
    yMax: '0'
  };
  var positionParameter = new Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_3__["PositionParameterClass"]('0', '0', '0', '0', {
    label: 'Right',
    value: 'Right'
  }, {});
  var newCoordinate = new Models_RegionClass__WEBPACK_IMPORTED_MODULE_0__["RegionClass"](newId, linkURL, [], [], '', initTextObject, {
    key: '',
    unit: '',
    format: '',
    keyValue: '',
    refId: '',
    manageValue: 'avg'
  }, [], false, false, false, positionParameter, '', [], coords, coordsDefault, true, '', '', '');
  return newCoordinate;
};
var cloneRegionCoordinateSpace = function cloneRegionCoordinateSpace(region, xMinInitialSpace, xMaxInitialSpace, widthBackground, yMinInitialSpace, yMaxInitialSpace, heightBackground) {
  var initTextObject = new Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_1__["TextObject"]( // region.textObj.legend,
  region.textObj.value, region.textObj.isTextTooltip, region.textObj.colorBack, region.textObj.colorText, region.textObj.style, region.textObj.generateObjectText, region.textObj.valueGenerateObjectText, region.textObj.generateAuxiliaryElement);
  var linkURL = new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_2__["LinkURLClass"](region.linkURL.followLink, region.linkURL.hoveringTooltipLink, region.linkURL.hoveringTooltipText);
  var coords = {
    xMin: region.coords.xMin,
    xMax: region.coords.xMax,
    yMin: region.coords.yMin,
    yMax: region.coords.yMax
  };
  var coordsDefault = {
    xMin: region.coordsDefault.xMin,
    xMax: region.coordsDefault.xMax,
    yMin: region.coordsDefault.yMin,
    yMax: region.coordsDefault.yMax
  };
  var positionParameter = new Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_3__["PositionParameterClass"](region.positionParameter.labelAPositionX, region.positionParameter.labelAPositionY, region.positionParameter.labelBPositionX, region.positionParameter.labelBPositionY, region.positionParameter.tooltipPositionA, region.positionParameter.tooltipPositionB);
  var mainMetric = {
    key: region.mainMetric.key,
    unit: region.mainMetric.unit,
    format: region.mainMetric.format,
    keyValue: region.mainMetric.keyValue,
    refId: region.mainMetric.refId,
    expr: region.mainMetric.expr,
    returnQuery: region.mainMetric.returnQuery,
    manageValue: region.mainMetric.manageValue
  }; // const widthInitialSpace = xMaxInitialSpace - xMinInitialSpace;
  // const xMinDefault = (((parseInt(region.coordsDefault.xMin, 10) - xMinInitialSpace) / widthInitialSpace) * widthBackground).toString();
  // const xMaxDefault = (((parseInt(region.coordsDefault.xMax, 10) - xMinInitialSpace) / widthInitialSpace) * widthBackground).toString();
  // const heightInitialSpace = yMaxInitialSpace - yMinInitialSpace;
  // const yMinDefault = (((parseInt(region.coordsDefault.yMin, 10) - yMinInitialSpace) / heightInitialSpace) * heightBackground).toString();
  // const yMaxDefault = (((parseInt(region.coordsDefault.yMax, 10) - yMinInitialSpace) / heightInitialSpace) * heightBackground).toString();
  // const coordsDefault: Coord4D = {
  //   xMin: xMinDefault,
  //   xMax: xMaxDefault,
  //   yMin: yMinDefault,
  //   yMax: yMaxDefault,
  // };

  var newCoordinate = new Models_RegionClass__WEBPACK_IMPORTED_MODULE_0__["RegionClass"](region.id, linkURL, region.meta, region.lowerLimit, region.label, initTextObject, mainMetric, region.metrics, region.colorMode, region.traceBack, region.traceBorder, positionParameter, region.idSVG, region.orientedLink, coords, coordsDefault, region.mode, region.img, region.widthInitialSpaceDefault, region.heightInitialSpaceDefault);
  return newCoordinate;
};

/***/ }),

/***/ "./Functions/isNumFloat.tsx":
/*!**********************************!*\
  !*** ./Functions/isNumFloat.tsx ***!
  \**********************************/
/*! exports provided: isNumFloat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isNumFloat", function() { return isNumFloat; });
var isNumFloat = function isNumFloat(value) {
  if (String(value).match(/^-{0,1}\d+$/) || String(value).match(/^\d+\.\d+$/)) {
    return 1;
  }

  return 0;
};

/***/ }),

/***/ "./Functions/loaderGabarit.tsx":
/*!*************************************!*\
  !*** ./Functions/loaderGabarit.tsx ***!
  \*************************************/
/*! exports provided: coordParse, coordParseRegion, filterParseRegion, filterParse */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coordParse", function() { return coordParse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coordParseRegion", function() { return coordParseRegion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterParseRegion", function() { return filterParseRegion; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filterParse", function() { return filterParse; });
//import { SimpleOptions, GlobalGabarit, GabaritFile, TemplateGabaritLink, TemplateGabaritPoint, TemplateGabaritRegion } from '../types';
//import { Button } from '@grafana/ui';
var coordParse = function coordParse(coord) {
  var tmp = coord.split('#');
  var result = {
    x: '',
    y: ''
  };
  result.x = tmp[0].split('|')[1];
  result.y = tmp[1].split('|')[1];
  return result;
}; // Coord Region

var coordParseRegion = function coordParseRegion(coord) {
  var tt = coord.split('#');
  var result = {
    xMin: '',
    xMax: '',
    yMin: '',
    yMax: ''
  };
  result.xMin = tt[0].split('|')[1];
  result.xMax = tt[1].split('|')[1];
  result.yMin = tt[2].split('|')[1];
  result.yMax = tt[3].split('|')[1];
  return result;
}; // FilterParse Region

var filterParseRegion = function filterParseRegion(filter) {
  var tt = filter.split('#');
  var result = [];
  tt.forEach(function (element) {
    var split = element.split('|');
    result.push({
      label: split[0],
      value: split[1]
    });
  });
  return result;
};
var filterParse = function filterParse(filter) {
  if (filter.length > 0) {
    var tmp = filter.split('#');
    var result_1 = [];
    tmp.forEach(function (element) {
      var split = element.split('|');
      result_1.push({
        label: split[0],
        value: split[1]
      });
    });
    return result_1;
  }

  return [];
};

/***/ }),

/***/ "./Functions/parseColor.tsx":
/*!**********************************!*\
  !*** ./Functions/parseColor.tsx ***!
  \**********************************/
/*! exports provided: parseColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseColor", function() { return parseColor; });
var parseColor = function parseColor(color) {
  var colorEdit = color;
  var transparency = '';

  if (color.indexOf('#') > -1) {
    colorEdit = color.replace('rgba', 'rgb');

    if (colorEdit.indexOf(',') > -1) {
      var arrayColor = colorEdit.split(',');
      colorEdit = arrayColor[0] + ',' + arrayColor[1] + ',' + arrayColor[2] + ')';

      if (arrayColor.length > 3) {
        transparency = arrayColor[3].replace(')', '');
      }
    }
  }

  return {
    color: colorEdit,
    transparency: transparency
  };
};

/***/ }),

/***/ "./Functions/searchIDLimit.tsx":
/*!*************************************!*\
  !*** ./Functions/searchIDLimit.tsx ***!
  \*************************************/
/*! exports provided: pixelToPercent, returnAllId */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pixelToPercent", function() { return pixelToPercent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "returnAllId", function() { return returnAllId; });
/** verif limit for one coordinate */
// const verifAllLimit = (n: number, limit: number[], isWith: boolean) => {
//   //console.log(n);
//   if (isWith) {
//     if (limit[0] <= n && limit[1] >= n) {
//       return true;
//     }
//   } else {
//     if (limit[2] <= n && limit[3] >= n) {
//       return true;
//     }
//   }
//   return false;
// };
// /** search all coordinate if attribute is d */
// const searchOtherLimitDAttribute = (data: string, limit: number[]): boolean => {
//   const parseWithLetter = [];
//   const regex = /[a-zA-Z]{1}[0-9.\W]*/g;
//   let tmp;
//   do {
//     tmp = regex.exec(data);
//     if (tmp) {
//       parseWithLetter.push(tmp.toString());
//     }
//   } while (tmp);
//   //console.log(parseWithLetter);
//   for (const line of parseWithLetter) {
//     const tmpBis: string[] = line.split(' ');
//     //const tmpTest: string[] = line.split(/,| /);
//     let index = 0;
//     // console.log(tmpBis);
//     //console.log(tmpTest);
//     // console.log(limit);
//     for (const lineTmp of tmpBis) {
//       if (lineTmp === '') {
//         break;
//       }
//       if (index !== 0 && index % 2 !== 0) {
//         if (!verifAllLimit(parseInt(lineTmp, 10), limit, true)) {
//           //console.log('no');
//           return true;
//         }
//       } else if (index !== 0) {
//         if (!verifAllLimit(parseInt(lineTmp, 10), limit, false)) {
//           //console.log('no');
//           return true;
//         }
//       }
//       ++index;
//     }
//   }
//   //console.log('ok');
//   return false;
// };

/** search if x and y are in limit */
// const searchOtherLimitXYAttribute = (element: HTMLElement, limit: number[], labelX: string, labelY: string): boolean => {
//   //console.log(element);
//   const x: number = parseInt(element.getAttribute(labelX) || '0', 10);
//   const y: number = parseInt(element.getAttribute(labelY) || '0', 10);
//   if (x !== null && y !== null) {
//     if (verifAllLimit(x, limit, true) && verifAllLimit(y, limit, false)) {
//       return false;
//     }
//   }
//   return true;
// };

/** search if x1|2 and y1|2 are in limit */
// const searchOtherLimitXnYnAttribute = (element: HTMLElement, limit: number[]): boolean => {
//   const x1: number = parseInt(element.getAttribute('x1') || '0', 10);
//   const x2: number = parseInt(element.getAttribute('x2') || '0', 10);
//   const y1: number = parseInt(element.getAttribute('y1') || '0', 10);
//   const y2: number = parseInt(element.getAttribute('y2') || '0', 10);
//   if (x1 && x2 && y1 && y2) {
//     if (verifAllLimit(x1, limit, true) && verifAllLimit(x2, limit, true) && verifAllLimit(y1, limit, false) && verifAllLimit(y2, limit, false)) {
//       return false;
//     }
//   }
//   return true;
// };
// /** search if region id svg is in limit */
// const regionIsOverLimit = (element: HTMLElement | null, limit: number[]): boolean => {
//   //console.log(element);
//   if (!element) {
//     //console.log('1');
//     return true;
//   }
//   let attribute: string | null = element.getAttribute('d');
//   //console.log(attribute);
//   if (attribute) {
//     //console.log('2');
//     return searchOtherLimitDAttribute(attribute, limit);
//   }
//   attribute = element.getAttribute('x');
//   //console.log(attribute);
//   if (attribute) {
//     //console.log('3');
//     return searchOtherLimitXYAttribute(element, limit, 'x', 'y');
//   }
//   attribute = element.getAttribute('x1');
//   if (attribute) {
//     //console.log('4');
//     return searchOtherLimitXnYnAttribute(element, limit);
//   }
//   attribute = element.getAttribute('cx');
//   if (attribute) {
//     //console.log('5');
//     return searchOtherLimitXYAttribute(element, limit, 'cx', 'cy');
//   }
//   return true;
// };

/** convert initial percent coordinate from -100 -> 100 to 0 -> 100 */
var convertInitialCoordinate = function convertInitialCoordinate(n) {
  var midPercent = 50;
  n = n >= 0 ? (n / 2 || 0) + midPercent : -n / 2 - midPercent;
  return n;
};

var pixelToPercent = function pixelToPercent(coordinate, baseMap) {
  var limit = [parseInt(coordinate.xMin, 10), parseInt(coordinate.xMax, 10), parseInt(coordinate.yMin, 10), parseInt(coordinate.yMax, 10)];
  limit[0] = convertInitialCoordinate(limit[0]);
  limit[1] = convertInitialCoordinate(limit[1]);
  limit[2] = convertInitialCoordinate(limit[2]);
  limit[3] = convertInitialCoordinate(limit[3]);
  var sizeHeight = parseInt(baseMap.height, 10);
  var sizeWidth = parseInt(baseMap.width, 10);
  var percent = 100;
  limit[0] = limit[0] / percent || 0;
  limit[0] = sizeWidth * limit[0];
  limit[1] = limit[1] / percent || 0;
  limit[1] = sizeWidth * limit[1];
  limit[2] = limit[2] / percent || 0;
  limit[2] = sizeHeight * limit[2];
  limit[3] = limit[3] / percent || 0;
  limit[3] = sizeHeight * limit[3];
  return {
    xMin: limit[0],
    xMax: limit[1],
    yMin: limit[2],
    yMax: limit[3]
  };
};
/** return all id list in principal id */

var returnAllId = function returnAllId(coordinate, baseMap) {
  var _a;

  var arrId = [];
  var arrIdVerif = [];
  var listElement = (_a = document.getElementById(baseMap.idSVG)) === null || _a === void 0 ? void 0 : _a.querySelectorAll('*[id]'); //console.log(listElement);
  // const filtered = [listElement].filter();
  //     function(e) {
  //       return
  //     },
  //     [octpath,octrect,octellipse]
  // );
  //console.log(listElement);

  if (listElement) {
    // const limit: number[] = [
    //   parseInt(coordinate.xMin, 10),
    //   parseInt(coordinate.xMax, 10),
    //   parseInt(coordinate.yMin, 10),
    //   parseInt(coordinate.yMax, 10),
    // ];
    // limit[0] = convertInitialCoordinate(limit[0]);
    // limit[1] = convertInitialCoordinate(limit[1]);
    // limit[2] = convertInitialCoordinate(limit[2]);
    // limit[3] = convertInitialCoordinate(limit[3]);
    // const sizeHeight: number = parseInt(baseMap.height, 10);
    // const sizeWidth: number = parseInt(baseMap.width, 10);
    // const percent = 100;
    // limit[0] = limit[0] / percent || 0;
    // limit[0] = sizeWidth * limit[0];
    // limit[1] = limit[1] / percent || 0;
    // limit[1] = sizeWidth * limit[1];
    // limit[2] = limit[2] / percent || 0;
    // limit[2] = sizeHeight * limit[2];
    // limit[3] = limit[3] / percent || 0;
    // limit[3] = sizeHeight * limit[3];
    // const coordInt = pixelToPercent(coordinate, baseMap);
    // const limit: number[] = [coordInt.xMin, coordInt.xMax, coordInt.yMin, coordInt.yMax];
    Array.from(listElement).forEach(function (e) {
      //console.log(e);
      // if (!regionIsOverLimit(document.getElementById(e.id), limit)) {
      //   //console.log('is pushed');
      //   arrId.push(e.id);
      // }
      if (e.localName === 'path' || e.localName === 'rect' || e.localName === 'ellipse') {
        arrId.push(e.id);
      }

      arrIdVerif.push(e.id);
    }); //console.log(arrId.length);

    arrId.sort(function (a, b) {
      if (a < b) {
        return -1;
      }

      if (a > b) {
        return 1;
      }

      return 0;
    });
  } else {
    console.error('id svg not found');
  }

  return arrId;
};

/***/ }),

/***/ "./Localization/en.json":
/*!******************************!*\
  !*** ./Localization/en.json ***!
  \******************************/
/*! exports provided: objectVisibility, basics, simpleEditor, coordinateSpace, initialCoordonateSpace, inputCoordinate, textDefault, genericParameter, metricPrincipalSetting, colorVariable, textObject, defaultTextRendering, default */
/***/ (function(module) {

module.exports = {"objectVisibility":{"decalCenterPointTextRegion":"Shift the center point of the text region","decalCenterBubble":"Shift the point or center of a tooltip","forceCalqueLevel":"Force a specific layer level","forceCourbSpecificLink":"Force a specific link curvature","calcLevel":"Layer level","courbure":"Curvature"},"basics":{"abscisses":"Abscissa","ordonnees":"Ordered","delete":"Delete","label":"Label"},"simpleEditor":{"renduTextDefault":"Default text rendering","display":"Display","pictureLink":"Image SVG","genericSettings":"Generic parameters","genericSettingsBis":"Generic parameters bis","spaceInitialVisualisation":"Initial viewing space","CoordinateSpace":"Coordinates space","objectVisibility":"Visibility of objects","metricsSettings":"Metrics Settings"},"coordinateSpace":{"addCoordinate":"Add coordinates"},"initialCoordonateSpace":{"label":"Initial coordinates space"},"inputCoordinate":{"minXPosition":"Position X min","maxXPosition":"Position X max","minYPosition":"Position Y min","maxYPosition":"Position Y max","image":"Image","interfaceJson":"Interface name","key":"Key","valueKey":"Value key"},"textDefault":{"police":"Font","size":"Size","style":"Style"},"genericParameter":{"settingPrincipalMetric":"Main metric parameter","graphicObject":"Graphic object","variableColor":"Variable color","traceBackground":"Trace the background","traceContour":"Trace the border"},"metricPrincipalSetting":{"followLink":"Following link","link":"Link","text":"Text","linkTooltip":"Link tooltip","textInTooltip":"Text in tooltip"},"colorVariable":{"switchBackgroundColor":"Edit background color","switchOutlineColor":"Edit border color","thicknessOutline":"Size border","variationNumber":"Variation number","number":"Number","addColor":"Add color","infoSeuil":"Info seuil"},"textObject":{"titleTextObject":"A text object","optionalLegend":"Optional legend","legend":"Legend","value":"Value","optionalUnit":"Optional unit","unit":"Unit","principalMetric":"Principal metric","textRegion":"Text region","colorBackground":"Color background","colorText":"Color text","colorTextOptional":"Optional color text","textStyle":"Text style","style":"Style","textBubble":"Text tooltip","generateTextObject":"Generate text object","auxiliaryElement":"Auxiliary element","digitalFormatting":"Decimals","mesureUnit":"Unit of measure (if metric)","objectDisplayTextTooltip":"Object display in text or tooltip","objectDisplayInPermanentlyHover":"Object display in permanently or hovering","backgroundColor":"Background color","optionalBackgroundColor":"Optional background color","save":"Save"},"defaultTextRendering":{}};

/***/ }),

/***/ "./Models/ArrayInputClass.tsx":
/*!************************************!*\
  !*** ./Models/ArrayInputClass.tsx ***!
  \************************************/
/*! exports provided: ArrayInputClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayInputClass", function() { return ArrayInputClass; });
/**
 * class ArayInput
 * @param id number
 * @param uneClassInput InputClass[]
 */
var ArrayInputClass = function () {
  function ArrayInputClass(id, uneClassInput) {
    this.id = id;
    this.uneClassInput = uneClassInput;
  }
  /**
   * get id
   */


  ArrayInputClass.prototype.getId = function () {
    return this.id;
  };
  /**
   * set id
   * @param id new id
   */


  ArrayInputClass.prototype.setId = function (id) {
    this.id = id;
  };
  /**
   * get value of InputClass[]
   */


  ArrayInputClass.prototype.getUneClassInput = function () {
    return this.uneClassInput;
  };
  /**
   * set a new InputClass[]
   * @param uneClassInput new object InputClass[]
   */


  ArrayInputClass.prototype.setUneClassInput = function (uneClassInput) {
    this.uneClassInput = uneClassInput;
  };

  return ArrayInputClass;
}();



/***/ }),

/***/ "./Models/ArrayInputSelectableClass.tsx":
/*!**********************************************!*\
  !*** ./Models/ArrayInputSelectableClass.tsx ***!
  \**********************************************/
/*! exports provided: ArrayInputSelectableClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ArrayInputSelectableClass", function() { return ArrayInputSelectableClass; });
/**
 * class ArayInput
 * @param id number
 * @param uneClassInput InputClass[]
 */
var ArrayInputSelectableClass = function () {
  function ArrayInputSelectableClass(id, uneClassInput) {
    this.id = id;
    this.uneClassInput = uneClassInput;
  }
  /**
   * get id
   */


  ArrayInputSelectableClass.prototype.getId = function () {
    return this.id;
  };
  /**
   * set id
   * @param id new id
   */


  ArrayInputSelectableClass.prototype.setId = function (id) {
    this.id = id;
  };
  /**
   * get value of InputClass[]
   */


  ArrayInputSelectableClass.prototype.getUneClassInput = function () {
    return this.uneClassInput;
  };
  /**
   * set a new InputClass[]
   * @param uneClassInput new object InputClass[]
   */


  ArrayInputSelectableClass.prototype.setUneClassInput = function (uneClassInput) {
    this.uneClassInput = uneClassInput;
  };

  return ArrayInputSelectableClass;
}();



/***/ }),

/***/ "./Models/CoordinateSpaceClass.tsx":
/*!*****************************************!*\
  !*** ./Models/CoordinateSpaceClass.tsx ***!
  \*****************************************/
/*! exports provided: CoordinateSpaceClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CoordinateSpaceClass", function() { return CoordinateSpaceClass; });
var CoordinateSpaceClass = function () {
  function CoordinateSpaceClass(id, linkURL, meta, lowerLimit, label, textObj, mainMetric, metrics, colorMode, traceBack, traceBorder, positionParameter) {
    this.id = id;
    this.linkURL = linkURL;
    this.meta = meta;
    this.lowerLimit = lowerLimit;
    this.label = label;
    this.textObj = textObj;
    this.mainMetric = mainMetric;
    this.metrics = metrics;
    this.colorMode = colorMode;
    this.traceBack = traceBack;
    this.traceBorder = traceBorder;
    this.positionParameter = positionParameter;
  }

  return CoordinateSpaceClass;
}();



/***/ }),

/***/ "./Models/InputClass.tsx":
/*!*******************************!*\
  !*** ./Models/InputClass.tsx ***!
  \*******************************/
/*! exports provided: InputClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputClass", function() { return InputClass; });
/**
 * class InputClass
 * @param id string
 * @param label string
 * @param name string
 * @param inputType string
 * @param required boolean
 * @param placeholder string?
 * @param value string?
 */
var InputClass = function () {
  function InputClass(id, label, name, inputType, required, placeholder, value) {
    this.id = id;
    this.label = label;
    this.name = name;
    this.inputType = inputType;
    this.required = required;
    this.placeholder = placeholder;
    this.value = value;
  }
  /**
   * get id
   */


  InputClass.prototype.getId = function () {
    return this.id;
  };
  /**
   * set id
   * @param id new id
   */


  InputClass.prototype.setId = function (id) {
    this.id = id;
  };
  /**
   * get label
   */


  InputClass.prototype.getLabel = function () {
    return this.label;
  };
  /**
   * set label
   * @param label new label
   */


  InputClass.prototype.setLabel = function (label) {
    this.label = label;
  };
  /**
   * get name
   */


  InputClass.prototype.getName = function () {
    return this.name;
  };
  /**
   * set name
   * @param name new name
   */


  InputClass.prototype.setName = function (name) {
    this.name = name;
  };
  /**
   * get type input
   */


  InputClass.prototype.getInputType = function () {
    return this.inputType;
  };
  /**
   * set type input
   * @param inputType new input type
   */


  InputClass.prototype.setInputType = function (inputType) {
    this.inputType = inputType;
  };
  /**
   * get required
   */


  InputClass.prototype.getRequired = function () {
    return this.required;
  };
  /**
   * set required
   * @param required new value required
   */


  InputClass.prototype.setRequired = function (required) {
    this.required = required;
  };
  /**
   * get placeholder
   */


  InputClass.prototype.getPlaceholder = function () {
    return this.placeholder;
  };
  /**
   * set placeholder
   * @param placeholder new value placeholder
   */


  InputClass.prototype.setPlaceholder = function (placeholder) {
    this.placeholder = placeholder;
  };
  /**
   * get value
   */


  InputClass.prototype.getValue = function () {
    return this.value;
  };
  /**
   * set value
   * @param value new value
   */


  InputClass.prototype.setValue = function (value) {
    this.value = value;
  };

  return InputClass;
}();



/***/ }),

/***/ "./Models/InputSelectableClass.tsx":
/*!*****************************************!*\
  !*** ./Models/InputSelectableClass.tsx ***!
  \*****************************************/
/*! exports provided: InputSelectableClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InputSelectableClass", function() { return InputSelectableClass; });
/**
 * class InputClass
 */
var InputSelectableClass = function () {
  function InputSelectableClass(id, label, name, input_type, optionValues, defaultValueColor, required, placeholder, value) {
    this.id = id;
    this.label = label;
    this.name = name;
    this.input_type = input_type;
    this.optionValues = optionValues;
    this.defaultValueColor = defaultValueColor;
    this.required = required;
    this.placeholder = placeholder;
    this.value = value;
  }

  InputSelectableClass.prototype.getId = function () {
    return this.id;
  };

  InputSelectableClass.prototype.setId = function (id) {
    this.id = id;
  };

  InputSelectableClass.prototype.getLabel = function () {
    return this.label;
  };

  InputSelectableClass.prototype.setLabel = function (label) {
    this.label = label;
  };

  InputSelectableClass.prototype.getName = function () {
    return this.name;
  };

  InputSelectableClass.prototype.setName = function (name) {
    this.name = name;
  };

  InputSelectableClass.prototype.getInputType = function () {
    return this.input_type;
  };

  InputSelectableClass.prototype.setInputType = function (input_type) {
    this.input_type = input_type;
  };

  InputSelectableClass.prototype.getRequired = function () {
    return this.required;
  };

  InputSelectableClass.prototype.setRequired = function (required) {
    this.required = required;
  };

  InputSelectableClass.prototype.getPlaceholder = function () {
    return this.placeholder;
  };

  InputSelectableClass.prototype.setPlaceholder = function (placeholder) {
    this.placeholder = placeholder;
  };

  InputSelectableClass.prototype.getValue = function () {
    return this.value;
  };

  InputSelectableClass.prototype.setValue = function (value) {
    this.value = value;
  };

  InputSelectableClass.prototype.getOptionValues = function () {
    return this.optionValues;
  };

  InputSelectableClass.prototype.setOptionValues = function (optionValues) {
    this.optionValues = optionValues;
  };

  InputSelectableClass.prototype.getDefaultValueColor = function () {
    return this.defaultValueColor;
  };

  InputSelectableClass.prototype.setDefaultValueColor = function (defaultValueColor) {
    this.defaultValueColor = defaultValueColor;
  };

  return InputSelectableClass;
}();



/***/ }),

/***/ "./Models/LinkURLClass.tsx":
/*!*********************************!*\
  !*** ./Models/LinkURLClass.tsx ***!
  \*********************************/
/*! exports provided: LinkURLClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LinkURLClass", function() { return LinkURLClass; });
/**
 * class for parametrage metric
 */
var LinkURLClass = function () {
  function LinkURLClass(followLink, hoveringTooltipLink, hoveringTooltipText) {
    this.followLink = followLink;
    this.hoveringTooltipLink = hoveringTooltipLink;
    this.hoveringTooltipText = hoveringTooltipText;
  }

  Object.defineProperty(LinkURLClass.prototype, "getFollowLink", {
    /**
     * get followingLink
     */
    get: function get() {
      return this.followLink;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LinkURLClass.prototype, "setFollowLink", {
    /**
     * set followingLink
     * @param {string} value new value
     */
    set: function set(value) {
      this.followLink = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LinkURLClass.prototype, "getHoveringTooltipLink", {
    /**
     * get hoveringTooltipLink
     */
    get: function get() {
      return this.hoveringTooltipLink;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LinkURLClass.prototype, "setHoveringTooltipLink", {
    /**
     * setHoveringTooltipLink
     * @param {string} value new value
     */
    set: function set(value) {
      this.hoveringTooltipLink = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LinkURLClass.prototype, "getHoveringTooltipText", {
    /**
     * get hoveringTooltipText
     */
    get: function get() {
      return this.hoveringTooltipText;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LinkURLClass.prototype, "setHoveringTooltipText", {
    /**
     * set hoveringTooltipText
     * @param {string} value new Value
     */
    set: function set(value) {
      this.hoveringTooltipText = value;
    },
    enumerable: true,
    configurable: true
  });
  return LinkURLClass;
}();



/***/ }),

/***/ "./Models/LowerLimitClass.tsx":
/*!************************************!*\
  !*** ./Models/LowerLimitClass.tsx ***!
  \************************************/
/*! exports provided: LowerLimitClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LowerLimitClass", function() { return LowerLimitClass; });
var LowerLimitClass = function () {
  function LowerLimitClass(id, lowerLimitMin, lowerLimitMax, backColor, borderColor, sizeBorder) {
    this.id = id;
    this.lowerLimitMin = lowerLimitMin;
    this.lowerLimitMax = lowerLimitMax;
    this.backColor = backColor;
    this.borderColor = borderColor;
    this.sizeBorder = sizeBorder;
  }

  Object.defineProperty(LowerLimitClass.prototype, "getId", {
    get: function get() {
      return this.id;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "setId", {
    set: function set(id) {
      this.id = id;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "getlowerLimitMin", {
    get: function get() {
      return this.lowerLimitMin;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "setlowerLimitMin", {
    set: function set(lowerLimitMin) {
      this.lowerLimitMin = lowerLimitMin;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "getlowerLimitMax", {
    get: function get() {
      return this.lowerLimitMax;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "setlowerLimitMax", {
    set: function set(lowerLimitMax) {
      this.lowerLimitMax = lowerLimitMax;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "getSeuilbackColor", {
    get: function get() {
      return this.backColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "setSeuilbackColor", {
    set: function set(couleur) {
      this.backColor = couleur;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "getSeuilborderColor", {
    get: function get() {
      return this.borderColor;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "setSeuilborderColor", {
    set: function set(couleur) {
      this.borderColor = couleur;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "getsizeBorder", {
    get: function get() {
      return this.sizeBorder;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(LowerLimitClass.prototype, "setsizeBorder", {
    set: function set(size) {
      this.sizeBorder = size;
    },
    enumerable: true,
    configurable: true
  });
  return LowerLimitClass;
}();



/***/ }),

/***/ "./Models/OrientedLinkClass.tsx":
/*!**************************************!*\
  !*** ./Models/OrientedLinkClass.tsx ***!
  \**************************************/
/*! exports provided: OrientedLinkClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "OrientedLinkClass", function() { return OrientedLinkClass; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _CoordinateSpaceClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CoordinateSpaceClass */ "./Models/CoordinateSpaceClass.tsx");



var OrientedLinkClass = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(OrientedLinkClass, _super);

  function OrientedLinkClass(id, linkURL, meta, lowerLimitClass, label, textObj, mainMetric, metrics, colorMode, traceBack, traceBorder, positionParameter, name, orientationLink, size, pointAPositionX, pointAPositionY, colorCoordinateA, pointBPositionX, pointBPositionY, colorCoordinateB, valueMainMetricA, valueMainMetricB, pointIn, pointOut, regionIn, regionOut, zIndex, pointCPositionX, pointCPositionY, isIncurved, mainMetricB, metricsB, widthInitialSpaceDefault, heightInitialSpaceDefault, pointAPositionXDefault, pointAPositionYDefault, pointBPositionXDefault, pointBPositionYDefault, pointCPositionXDefault, pointCPositionYDefault) {
    var _this = _super.call(this, id, linkURL, meta, lowerLimitClass, label, textObj, mainMetric, metrics, colorMode, traceBack, traceBorder, positionParameter) || this;

    _this.name = name;
    _this.orientationLink = orientationLink;
    _this.size = size;
    _this.pointAPositionX = pointAPositionX;
    _this.pointAPositionY = pointAPositionY;
    _this.colorCoordinateA = colorCoordinateA;
    _this.pointBPositionX = pointBPositionX;
    _this.pointBPositionY = pointBPositionY;
    _this.colorCoordinateB = colorCoordinateB;
    _this.valueMainMetricA = valueMainMetricA;
    _this.valueMainMetricB = valueMainMetricB;
    _this.pointIn = pointIn;
    _this.pointOut = pointOut;
    _this.regionIn = regionIn;
    _this.regionOut = regionOut;
    _this.zIndex = zIndex;
    _this.pointCPositionX = pointCPositionX;
    _this.pointCPositionY = pointCPositionY;
    _this.isIncurved = isIncurved;
    _this.mainMetricB = mainMetricB;
    _this.metricsB = metricsB;
    _this.widthInitialSpaceDefault = widthInitialSpaceDefault;
    _this.heightInitialSpaceDefault = heightInitialSpaceDefault;
    _this.pointAPositionXDefault = pointAPositionXDefault;
    _this.pointAPositionYDefault = pointAPositionYDefault;
    _this.pointBPositionXDefault = pointBPositionXDefault;
    _this.pointBPositionYDefault = pointBPositionYDefault;
    _this.pointCPositionXDefault = pointCPositionXDefault;
    _this.pointCPositionYDefault = pointCPositionYDefault;
    return _this;
  }

  return OrientedLinkClass;
}(_CoordinateSpaceClass__WEBPACK_IMPORTED_MODULE_1__["CoordinateSpaceClass"]);



/***/ }),

/***/ "./Models/PointClass.tsx":
/*!*******************************!*\
  !*** ./Models/PointClass.tsx ***!
  \*******************************/
/*! exports provided: PointClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PointClass", function() { return PointClass; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _CoordinateSpaceClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CoordinateSpaceClass */ "./Models/CoordinateSpaceClass.tsx");


/**
 * to do
 */

var PointClass = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PointClass, _super);

  function PointClass(id, linkURL, meta, lowerLimitClass, label, textObj, mainMetric, metrics, colorMode, traceBack, traceBorder, positionParameter, name, valueMetric, drawGraphicMarker, shape, //sizeWidth: SelectableValue<string>,
  sizeWidth, sizeHeight, rotateArrow, positionShapeX, positionShapeY, color, associateOrientedLinksIn, associateOrientedLinksOut, widthInitialSpaceDefault, heightInitialSpaceDefault, positionXDefault, positionYDefault) {
    var _this = _super.call(this, id, linkURL, meta, lowerLimitClass, label, textObj, mainMetric, metrics, colorMode, traceBack, traceBorder, positionParameter) || this;

    _this.name = name;
    _this.valueMetric = valueMetric;
    _this.drawGraphicMarker = drawGraphicMarker;
    _this.shape = shape;
    _this.sizeWidth = sizeWidth;
    _this.sizeHeight = sizeHeight;
    _this.rotateArrow = rotateArrow;
    _this.positionShapeX = positionShapeX;
    _this.positionShapeY = positionShapeY;
    _this.color = color;
    _this.associateOrientedLinksIn = associateOrientedLinksIn;
    _this.associateOrientedLinksOut = associateOrientedLinksOut;
    _this.widthInitialSpaceDefault = widthInitialSpaceDefault;
    _this.heightInitialSpaceDefault = heightInitialSpaceDefault;
    _this.positionXDefault = positionXDefault;
    _this.positionYDefault = positionYDefault;
    return _this;
  }

  return PointClass;
}(_CoordinateSpaceClass__WEBPACK_IMPORTED_MODULE_1__["CoordinateSpaceClass"]);



/***/ }),

/***/ "./Models/PositionParameterClass.tsx":
/*!*******************************************!*\
  !*** ./Models/PositionParameterClass.tsx ***!
  \*******************************************/
/*! exports provided: PositionParameterClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PositionParameterClass", function() { return PositionParameterClass; });
var PositionParameterClass = function () {
  function PositionParameterClass(labelAPositionX, labelAPositionY, labelBPositionX, labelBPositionY, tooltipPositionA, tooltipPositionB) {
    this.labelAPositionX = labelAPositionX;
    this.labelAPositionY = labelAPositionY;
    this.labelBPositionX = labelBPositionX;
    this.labelBPositionY = labelBPositionY;
    this.tooltipPositionA = tooltipPositionA;
    this.tooltipPositionB = tooltipPositionB;
  }

  return PositionParameterClass;
}();



/***/ }),

/***/ "./Models/RegionClass.tsx":
/*!********************************!*\
  !*** ./Models/RegionClass.tsx ***!
  \********************************/
/*! exports provided: RegionClass */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RegionClass", function() { return RegionClass; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _CoordinateSpaceClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CoordinateSpaceClass */ "./Models/CoordinateSpaceClass.tsx");



var RegionClass = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(RegionClass, _super);

  function RegionClass(id, linkURL, meta, lowerLimitClass, label, textObj, mainMetric, metrics, colorMode, traceBack, traceBorder, positionParameter, idSVG, orientedLink, coords, coordsDefault, mode, img, widthInitialSpaceDefault, heightInitialSpaceDefault) {
    var _this = _super.call(this, id, linkURL, meta, lowerLimitClass, label, textObj, mainMetric, metrics, colorMode, traceBack, traceBorder, positionParameter) || this;

    _this.idSVG = idSVG;
    _this.mode = mode;
    _this.orientedLink = orientedLink;
    _this.coords = coords;
    _this.coordsDefault = coordsDefault;
    _this.img = img;
    _this.widthInitialSpaceDefault = widthInitialSpaceDefault;
    _this.heightInitialSpaceDefault = heightInitialSpaceDefault;
    return _this;
  }

  return RegionClass;
}(_CoordinateSpaceClass__WEBPACK_IMPORTED_MODULE_1__["CoordinateSpaceClass"]);



/***/ }),

/***/ "./Models/TextObjectClass.tsx":
/*!************************************!*\
  !*** ./Models/TextObjectClass.tsx ***!
  \************************************/
/*! exports provided: TextObject */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TextObject", function() { return TextObject; });
/** value of textObjects component */
var TextObject = function () {
  // generate metadata with text object
  // generateMetadataElement: GenerateTextObject;
  function TextObject( // legend: boolean,
  value, isTextTooltip, colorBack, colorText, style, // styleText: string,
  generateObjectText, valueGenerateObjectText, generateAuxiliaryElement // meta
  // generateMetadataElement: GenerateTextObject
  ) {
    // this.legend = legend;
    this.value = value;
    this.isTextTooltip = isTextTooltip;
    this.colorBack = colorBack;
    this.colorText = colorText;
    this.style = style; // this.styleText = styleText;

    this.generateObjectText = generateObjectText;
    this.valueGenerateObjectText = valueGenerateObjectText;
    this.generateAuxiliaryElement = generateAuxiliaryElement; // add Meta
    // this.generateMetadataElement = generateMetadataElement;
  }

  return TextObject;
}();



/***/ }),

/***/ "./Models/dropZone.tsx":
/*!*****************************!*\
  !*** ./Models/dropZone.tsx ***!
  \*****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var components_importInput__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! components/importInput */ "./components/importInput.tsx");





var DropZone = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DropZone, _super);

  function DropZone(props) {
    var _this = _super.call(this, props) || this;

    _this.fileReader = null;

    _this.onChangeHandler = function (event) {
      _this.setState({
        selectedFile: event.target.files[0],
        readerFile: new FileReader()
      });
    };

    _this.upload = function () {
      _this.state.selectedFile.onload = function (event) {
        var _a;

        if (((_a = event.target) === null || _a === void 0 ? void 0 : _a.result) != null) {
          this.props.options.saveImportFile.push(this.state.readerFile.result);
          this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, this.props.options), {
            saveImportFile: this.props.options.saveImportFile
          }));
        }
      };

      var extensionFile = _this.state.selectedFile.name.split('.')[1];

      if (extensionFile === 'jpg' || extensionFile === 'png' || extensionFile === 'gif') {
        _this.state.readerFile.readAsDataURL(_this.state.selectedFile);
      } else {
        _this.state.readerFile.readAsText(_this.state.selectedFile);
      }
    };

    _this.save = function () {
      if (_this.state.readerFile.result != null) {
        _this.props.options.saveImportFile.push({
          name: _this.state.selectedFile.name,
          content: _this.state.readerFile.result
        });

        var loader_1 = new components_importInput__WEBPACK_IMPORTED_MODULE_3__["default"](_this.props);

        _this.props.options.saveImportFile.forEach(function (file) {
          if (file.name) {
            var arrayFileName = file.name.split('.');
            var newBaseMap = _this.props.options.baseMap;

            if (arrayFileName[1] === 'svg') {
              newBaseMap.image = file.content;
              newBaseMap.modeSVG = true;
              newBaseMap.isUploaded = true;
            } else if (arrayFileName[1] === 'jpg' || arrayFileName[1] === 'png' || arrayFileName[1] === 'gif') {
              newBaseMap.image = file.content;
              newBaseMap.modeSVG = false;
              newBaseMap.isUploaded = true;
            }

            _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
              baseMap: newBaseMap
            }));
          }

          if (JSON.parse(file.content).hasOwnProperty('regions')) {
            loader_1.loadMultiRegions(JSON.parse(file.content));
            console.log('Load Region');
          }

          if (JSON.parse(file.content).hasOwnProperty('points')) {
            loader_1.loadMultiPoints(JSON.parse(file.content));
            console.log('Load Point');
          }

          if (JSON.parse(file.content).hasOwnProperty('links')) {
            loader_1.loadMultiLinks(JSON.parse(file.content));
            console.log('Load Links');
          }
        });
      }

      console.log(_this.props.options.saveImportFile);
    }; // load = () => {
    //   let loader : ImportInput = new ImportInput(this.props);
    // 	this.props.options.saveImportFile.forEach(file => {
    // 		if (JSON.parse(file.content).hasOwnProperty("regions")){
    //       loader.loadMultiRegions(JSON.parse(file.content));
    //       console.log("Load Region");
    //     }
    //     if (JSON.parse(file.content).hasOwnProperty("points")){
    //       loader.loadMultiPoints(JSON.parse(file.content));
    //       console.log("Load Point");
    //     }
    //     if (JSON.parse(file.content).hasOwnProperty("links")){
    //       loader.loadMultiLinks(JSON.parse(file.content));
    //       console.log("Load Links");
    // 		}
    // 	});
    //   this.props.options.saveImportFile.forEach(element => {
    //     console.log(JSON.parse(element.content));
    //   });
    // }


    _this.test = function () {
      console.log(JSON.stringify(_this.props));
    };

    _this.onMultiListFileChanged = function (event) {
      var newData = _this.props.options.saveImportFile.slice();

      newData[parseInt(event.currentTarget.id, 10)].name = event.currentTarget.value;
      _this.props.options.saveImportFile = newData;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveImportFile: _this.props.options.saveImportFile
      }));
    };

    _this.multiDeletFile = function (onClick) {
      var isUrl = function isUrl(url) {
        return url === _this.props.options.saveImportFile[parseInt(onClick.currentTarget.id, 10)];
      };

      _this.props.options.saveImportFile.splice(_this.props.options.saveImportFile.findIndex(isUrl), 1);

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveImportFile: _this.props.options.saveImportFile
      }));
    };

    _this.multiUploadDisplay = function (props) {
      if (props.file.lenght !== 0) {
        var list = props.file.map(function (file, index) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'MultiFileDiv' + index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
            id: index.toString(),
            key: 'MultiFile' + index.toString(),
            label: 'File',
            labelWidth: 5,
            inputWidth: 20,
            onChange: _this.onMultiListFileChanged.bind(_this),
            type: "string",
            value: file.name || ''
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
            variant: "danger",
            id: index.toString(),
            key: 'ButtunDel' + index.toString(),
            onClick: _this.multiDeletFile.bind(_this)
          }, "Del"));
        });
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, list);
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, "No targets avalaible");
    };

    _this.state = {
      selectedFile: null,
      readerFile: new FileReader()
    };
    return _this;
  }

  DropZone.prototype.render = function () {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      type: "file",
      name: "file",
      onChange: this.onChangeHandler
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      onClick: this.upload
    }, "Add"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      onClick: this.save
    }, "Finish")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(this.multiUploadDisplay, {
      file: this.props.options.saveImportFile
    })));
  };

  return DropZone;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (DropZone);

/***/ }),

/***/ "./SimpleEditor.tsx":
/*!**************************!*\
  !*** ./SimpleEditor.tsx ***!
  \**************************/
/*! exports provided: SimpleEditor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimpleEditor", function() { return SimpleEditor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var components_coordinateSpaceInitial__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! components/coordinateSpaceInitial */ "./components/coordinateSpaceInitial.tsx");
/* harmony import */ var components_importInput__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! components/importInput */ "./components/importInput.tsx");
/* harmony import */ var components_CoordinateSpace_manageCoordinateSpace__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! components/CoordinateSpace/manageCoordinateSpace */ "./components/CoordinateSpace/manageCoordinateSpace.tsx");
/* harmony import */ var components_display__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! components/display */ "./components/display.tsx");
/* harmony import */ var components_gabarit__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! components/gabarit */ "./components/gabarit.tsx");
/* harmony import */ var style_SimpleEditor_css__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! style/SimpleEditor.css */ "./style/SimpleEditor.css");
/* harmony import */ var style_SimpleEditor_css__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(style_SimpleEditor_css__WEBPACK_IMPORTED_MODULE_8__);







 // import MetadataComponent from 'components/metadataComponent';


/**
 * class SimpleEditor
 */

var SimpleEditor = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SimpleEditor, _super);

  function SimpleEditor(props) {
    var _this = _super.call(this, props) || this;
    /********************* Display Button in relation to View or Edit */
    // /**
    //  * edit default text
    //  */
    // myCallBackDefaultText = (datafromChild: {
    // 	/**
    // 	 * new police
    // 	 */
    // 	police: string,
    // 	/**
    // 	 * new size
    // 	 */
    // 	size: string,
    // 	/**
    // 	 * new style (italic, bold, ...)
    // 	 */
    // 	style: string,
    // }) => {
    // 	this.props.onOptionsChange({
    // 		...this.props.options,
    // 		police: datafromChild.police,
    // 		size: datafromChild.size,
    // 		style: datafromChild.style,
    // 	});
    // }
    /// Adrien
    // onInfoChanged = ({ target }: any) => {
    // 	this.props.onOptionsChange({ ...this.props.options, info: target.value });
    // }


    _this.onRefreshChanged = function (_a) {
      var target = _a.target;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        refresh: target.value
      }));
    };

    _this.onTimeZoneChanged = function (_a) {
      var target = _a.target;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        timezone: target.value
      }));
    };

    _this.onPanelChanged = function (_a, index) {
      var target = _a.target;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        Id: target.value
      }));
    }; // onToggleDashboardData = (isOpen: boolean): void => {
    //   this.setState({
    //     collapseDashboardData: isOpen,
    //   });
    // };
    // onToggleTimeSelector = (isOpen: boolean): void => {
    //   this.setState({
    //     collapseTimeSelector: isOpen,
    //   });
    // };
    // onTogglePanelData = (isOpen: boolean): void => {
    //   this.setState({
    //     collapsePanelData: isOpen,
    //   });
    // };
    // onTogglePrincipalTargets = (isOpen: boolean): void => {
    //   this.setState({
    //     collapsePrincipalTarget: isOpen,
    //   });
    // };

    /**
     * switch tab
     * @param {number} id id to to new tab
     */


    _this.goToTab = function (id) {
      var oldValue = _this.state.tabsVariable.slice();

      var size = oldValue.length;

      for (var i = 0; i < size; i++) {
        oldValue[i] = i === id ? true : false;
      }

      _this.setState({
        tabsVariable: oldValue
      });
    };
    /**
     * swtith tab Coordinate space
     */


    _this.goToTabCoordinateSpace = function (id) {
      var oldValue = _this.state.tabsCoordinateSpace.slice();

      var size = oldValue.length;

      for (var i = 0; i < size; i++) {
        oldValue[i] = i === id ? true : false;
      }

      _this.setState({
        tabsCoordinateSpace: oldValue
      });
    };

    _this.componentDidMount = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var url, arrayUrl, arrayUrl_1, arrayUrl_1_1, element;

        var e_1, _a;

        var _this = this;

        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
          switch (_b.label) {
            case 0:
              url = window.location.pathname;
              arrayUrl = url.split('/');

              try {
                for (arrayUrl_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayUrl), arrayUrl_1_1 = arrayUrl_1.next(); !arrayUrl_1_1.done; arrayUrl_1_1 = arrayUrl_1.next()) {
                  element = arrayUrl_1_1.value;

                  if (element === 'new' && !this.props.options.currentDashboard) {
                    this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, this.props.options), {
                      arrayPoints: [],
                      arrayOrientedLinks: [],
                      regionCoordinateSpace: [],
                      saveImportUrl: {
                        total: [],
                        mono: [],
                        multi: []
                      },
                      saveImportFile: [],
                      totalUrlInput: '',
                      multiUrlInput: '',
                      monoUrlInput: '',
                      baseMap: {
                        image: '',
                        layerImage: '',
                        modeSVG: true,
                        idSVG: '',
                        width: '',
                        height: '',
                        isUploaded: false
                      }
                    }));
                  }
                }
              } catch (e_1_1) {
                e_1 = {
                  error: e_1_1
                };
              } finally {
                try {
                  if (arrayUrl_1_1 && !arrayUrl_1_1.done && (_a = arrayUrl_1["return"])) _a.call(arrayUrl_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              } // display Button of Panel if is mode Edit


              return [4
              /*yield*/
              , Promise.resolve('Success').then(function () {
                _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                  displayButton: true,
                  currentDashboard: false
                }));
              })];

            case 1:
              // display Button of Panel if is mode Edit
              _b.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.componentWillUnmount = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var _this = this;

        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              // not display Button of Panel if is mode View
              return [4
              /*yield*/
              , Promise.resolve('Success').then(function () {
                _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                  displayButton: false,
                  currentDashboard: true
                }));
              })];

            case 1:
              // not display Button of Panel if is mode View
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.state = {
      // collapseDashboardData: false,
      // collapsePanelData: false,
      // collapseTimeSelector: false,
      // collapsePrincipalTarget: false,
      tabsVariable: [true, false, false, false, false],
      tabsCoordinateSpace: [true, false, false, false]
    };
    return _this;
  }
  /**
   * HTML code
   */


  SimpleEditor.prototype.render = function () {
    // const tt = new TextObject(
    //   '',
    //   false,
    //   'white',
    //   'black',
    //   { bold: false, italic: false, underline: false },
    //   true,
    //   {
    //     legendElement: '',
    //     numericFormatElement: '5',
    //     unit: '',
    //     displayObjectInTooltip: false,
    //     addColorTextElement: false,
    //     colorTextElement: 'white',
    //     addColorBackElement: false,
    //     colorBackElement: 'black',
    //   },
    //   {
    //     legendElement: '',
    //     numericFormatElement: '5',
    //     unit: '',
    //     displayObjectInTooltip: true,
    //     addColorTextElement: true,
    //     colorTextElement: 'white',
    //     addColorBackElement: true,
    //     colorBackElement: 'black',
    //   }
    // );
    var _this = this; // const testtt: Metadata = { meta: '', obj: tt };


    var l10n = __webpack_require__(/*! Localization/en.json */ "./Localization/en.json");

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "divSimpleEditor"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["TabsBar"], {
      className: "page-header tabs",
      hideBorder: false
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
      key: "tabDisplay",
      label: l10n.simpleEditor.display,
      active: this.state.tabsVariable[0],
      onChangeTab: function onChangeTab() {
        return _this.goToTab(0);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
      key: "tabSpaceInitialVisualisation",
      label: l10n.simpleEditor.spaceInitialVisualisation,
      active: this.state.tabsVariable[1],
      onChangeTab: function onChangeTab() {
        return _this.goToTab(1);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
      key: "tabCoordinateSpace",
      label: l10n.simpleEditor.CoordinateSpace,
      active: this.state.tabsVariable[2],
      onChangeTab: function onChangeTab() {
        return _this.goToTab(2);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
      key: "tabGabarit",
      label: "Gabarit",
      active: this.state.tabsVariable[3],
      onChangeTab: function onChangeTab() {
        return _this.goToTab(3);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
      key: "tabImportInput",
      label: "Import Files",
      active: this.state.tabsVariable[4],
      onChangeTab: function onChangeTab() {
        return _this.goToTab(4);
      }
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["TabContent"], null, this.state.tabsVariable[0] && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_display__WEBPACK_IMPORTED_MODULE_6__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data
    }), this.state.tabsVariable[1] && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_coordinateSpaceInitial__WEBPACK_IMPORTED_MODULE_3__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data
    }), this.state.tabsVariable[2] && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["TabsBar"], {
      className: "page-header tabs",
      hideBorder: false
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
      key: "tabDisplayManageCoordinateSpace",
      label: "Region",
      active: this.state.tabsCoordinateSpace[0],
      onChangeTab: function onChangeTab() {
        return _this.goToTabCoordinateSpace(0);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
      key: "tabDisplayPoint",
      label: "Point",
      active: this.state.tabsCoordinateSpace[1],
      onChangeTab: function onChangeTab() {
        return _this.goToTabCoordinateSpace(1);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
      key: "tabDisplayOrientedLink",
      label: "OrientedLink",
      active: this.state.tabsCoordinateSpace[3],
      onChangeTab: function onChangeTab() {
        return _this.goToTabCoordinateSpace(3);
      }
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["TabContent"], null, this.state.tabsCoordinateSpace[0] && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_CoordinateSpace_manageCoordinateSpace__WEBPACK_IMPORTED_MODULE_5__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      isRegion: true,
      isPoint: false,
      isLink: false
    }), this.state.tabsCoordinateSpace[1] && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_CoordinateSpace_manageCoordinateSpace__WEBPACK_IMPORTED_MODULE_5__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      isRegion: false,
      isPoint: true,
      isLink: false
    }), this.state.tabsCoordinateSpace[3] && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_CoordinateSpace_manageCoordinateSpace__WEBPACK_IMPORTED_MODULE_5__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      isRegion: false,
      isPoint: false,
      isLink: true
    }))), this.state.tabsVariable[3] && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_gabarit__WEBPACK_IMPORTED_MODULE_7__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data
    })), this.state.tabsVariable[4] && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_importInput__WEBPACK_IMPORTED_MODULE_4__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data
    }))));
  };

  return SimpleEditor;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.PureComponent);



/***/ }),

/***/ "./SimplePanel.tsx":
/*!*************************!*\
  !*** ./SimplePanel.tsx ***!
  \*************************/
/*! exports provided: SimplePanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SimplePanel", function() { return SimplePanel; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var Models_PointClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Models/PointClass */ "./Models/PointClass.tsx");
/* harmony import */ var Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Models/PositionParameterClass */ "./Models/PositionParameterClass.tsx");
/* harmony import */ var Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Models/OrientedLinkClass */ "./Models/OrientedLinkClass.tsx");
/* harmony import */ var Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! Models/TextObjectClass */ "./Models/TextObjectClass.tsx");
/* harmony import */ var Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! Models/LinkURLClass */ "./Models/LinkURLClass.tsx");
/* harmony import */ var Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! Functions/fetchMetrics */ "./Functions/fetchMetrics.tsx");
/* harmony import */ var Functions_getResultQuery__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! Functions/getResultQuery */ "./Functions/getResultQuery.tsx");
/* harmony import */ var components_CoordinateSpace_addCoordinate__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! components/CoordinateSpace/addCoordinate */ "./components/CoordinateSpace/addCoordinate.tsx");
/* harmony import */ var _components_Draw_drawRectangle__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./components/Draw/drawRectangle */ "./components/Draw/drawRectangle.tsx");
/* harmony import */ var _components_Draw_drawPoint__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./components/Draw/drawPoint */ "./components/Draw/drawPoint.tsx");
/* harmony import */ var _components_Draw_drawOrientedLink__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./components/Draw/drawOrientedLink */ "./components/Draw/drawOrientedLink.tsx");
/* harmony import */ var _components_legend__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./components/legend */ "./components/legend.tsx");
/* harmony import */ var components_Draw_drawRectangleExtend__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! components/Draw/drawRectangleExtend */ "./components/Draw/drawRectangleExtend.tsx");
/* harmony import */ var Functions_initRegionCoordinateSpace__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! Functions/initRegionCoordinateSpace */ "./Functions/initRegionCoordinateSpace.tsx");

















/**
 * Affichage
 */

var SimplePanel = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(SimplePanel, _super);

  function SimplePanel(props) {
    var _this = _super.call(this, props) || this;
    /**
     * Display limit (coordinateSpaceInitial)
     * @returns JSX.Element
     */


    _this.defineLimit = function () {
      var coordinateSpaceInitial = _this.props.options.coordinateSpaceInitial;
      var jsxItems = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);

      if (_this.props.options.baseMap.image === '' && !_this.props.options.baseMap.modeSVG) {
        jsxItems = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_components_Draw_drawRectangle__WEBPACK_IMPORTED_MODULE_11__["default"], {
          key: "limitCoor",
          color: "orange",
          coordinateInitial: coordinateSpaceInitial,
          id: "initialSpace",
          onOptionsChange: _this.props.onOptionsChange,
          options: _this.props.options,
          data: _this.props.data,
          buttonAddLinkIsActive: _this.state.buttonAddLinkIsActive,
          buttonAddIncurvedLinkIsActive: _this.state.buttonAddIncurvedLinkIsActive
        });
      }

      return jsxItems;
    };
    /**
     * to do
     */


    _this.getCoordinatesToDrawPointWithClick = function (event) {
      var initialSpace = _this.props.options.coordinateSpaceInitial.coordinate;
      var xMin = parseInt(initialSpace.xMin, 10);
      var xMax = parseInt(initialSpace.xMax, 10);
      var yMin = parseInt(initialSpace.yMin, 10);
      var yMax = parseInt(initialSpace.yMax, 10);
      var positionX = 0;
      var positionY = 0;
      var paddingMarginLeftSimplePanel = 24;
      var clickX = event.nativeEvent.clientX - paddingMarginLeftSimplePanel;
      var widthInitialSpace = xMax - xMin;
      var heightInitialSpace = yMax - yMin;
      var heightBackground = parseInt(_this.props.options.baseMap.height, 10);
      positionX = Math.round(clickX);
      positionY = Math.round(heightBackground - event.nativeEvent.layerY);

      if (event.nativeEvent.target.id === 'initialSpace' || event.nativeEvent.target.id === 'mainPanel' || event.nativeEvent.target.id === 'Intent' || event.nativeEvent.target.id === 'oct' + _this.props.options.baseMap.idSVG || event.nativeEvent.target.id === _this.props.options.baseMap.idSVG) {
        _this.createPointToClick(positionX, positionY, widthInitialSpace, heightInitialSpace);
      }
    };

    _this.defineIdPoint = function () {
      var id = 1;

      if (_this.props.options.arrayPoints.length === 0) {
        return id;
      } else {
        id = _this.props.options.arrayPoints[_this.props.options.arrayPoints.length - 1].id + 1;
        return id;
      }
    };
    /**
     * to do
     */


    _this.createPointToClick = function (x, y, widthInitialSpace, heightInitialSpace) {
      var id = _this.defineIdPoint();

      var initTextObject = new Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_6__["TextObject"]('', false, 'white', 'black', {
        bold: false,
        italic: false,
        underline: false
      }, true, {
        legendElement: '',
        numericFormatElement: '5',
        unit: '',
        displayObjectInTooltip: false,
        addColorTextElement: false,
        colorTextElement: 'white',
        addColorBackElement: false,
        colorBackElement: 'black'
      }, {
        legendElement: '',
        numericFormatElement: '5',
        unit: '',
        displayObjectInTooltip: true,
        addColorTextElement: true,
        colorTextElement: 'white',
        addColorBackElement: true,
        colorBackElement: 'black'
      });
      var linkUrl = new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_7__["LinkURLClass"]('', '', '');
      var positionParameter = new Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_4__["PositionParameterClass"]('0', '0', '0', '0', {
        label: 'Right',
        value: 'Right'
      }, {});
      var newPoint = new Models_PointClass__WEBPACK_IMPORTED_MODULE_3__["PointClass"](id, linkUrl, [], [], '', initTextObject, {
        key: '',
        unit: '',
        format: '',
        keyValue: '',
        refId: '',
        manageValue: 'avg'
      }, [], false, false, false, positionParameter, 'point' + id.toString(), '', {
        label: 'Yes',
        value: 'true'
      }, {
        label: 'Circle',
        value: 'circle'
      }, '12', {
        label: 'Medium',
        value: 'medium'
      }, '0', x.toString(), y.toString(), 'black', [], [], widthInitialSpace.toString(), heightInitialSpace.toString(), x.toString(), y.toString());
      var newArrayPoint = _this.props.options.arrayPoints;
      newArrayPoint.push(newPoint);

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        indexPoint: id,
        arrayPoints: newArrayPoint
      }));

      _this.props.options.newPoint = true;
    };

    _this.updatePositionOrientedLink = function (point) {
      var e_1, _a, e_2, _b, e_3, _c;

      var arrayOrientedLink = _this.props.options.arrayOrientedLinks;

      try {
        for (var arrayOrientedLink_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayOrientedLink), arrayOrientedLink_1_1 = arrayOrientedLink_1.next(); !arrayOrientedLink_1_1.done; arrayOrientedLink_1_1 = arrayOrientedLink_1.next()) {
          var orientedLink = arrayOrientedLink_1_1.value;

          try {
            for (var _d = (e_2 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(point.associateOrientedLinksIn)), _e = _d.next(); !_e.done; _e = _d.next()) {
              var associateOrientedLinkIn = _e.value;

              if (associateOrientedLinkIn.name === orientedLink.name) {
                orientedLink.pointAPositionX = point.positionShapeX;
                orientedLink.pointAPositionY = point.positionShapeY;
              }
            }
          } catch (e_2_1) {
            e_2 = {
              error: e_2_1
            };
          } finally {
            try {
              if (_e && !_e.done && (_b = _d["return"])) _b.call(_d);
            } finally {
              if (e_2) throw e_2.error;
            }
          }

          try {
            for (var _f = (e_3 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(point.associateOrientedLinksOut)), _g = _f.next(); !_g.done; _g = _f.next()) {
              var associateOrientedLinkOut = _g.value;

              if (associateOrientedLinkOut.name === orientedLink.name) {
                orientedLink.pointBPositionX = point.positionShapeX;
                orientedLink.pointBPositionY = point.positionShapeY;
              }
            }
          } catch (e_3_1) {
            e_3 = {
              error: e_3_1
            };
          } finally {
            try {
              if (_g && !_g.done && (_c = _f["return"])) _c.call(_f);
            } finally {
              if (e_3) throw e_3.error;
            }
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (arrayOrientedLink_1_1 && !arrayOrientedLink_1_1.done && (_a = arrayOrientedLink_1["return"])) _a.call(arrayOrientedLink_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }
    };
    /**
     * to do
     */


    _this.addAssociateOrientedLinkToPoint = function (namePointIn, namePointOut, indexOrientedLinkAssociate) {
      var index = 0;

      _this.props.options.arrayPoints.forEach(function (point) {
        var name = point.label || point.name;

        if (namePointIn === name) {
          _this.props.options.arrayOrientedLinks.forEach(function (orientedLink) {
            if (orientedLink.id === indexOrientedLinkAssociate) {
              _this.props.options.arrayPoints[index].associateOrientedLinksIn.push({
                label: orientedLink.label,
                name: orientedLink.name
              });
            }
          });
        } else if (namePointOut === name) {
          _this.props.options.arrayOrientedLinks.forEach(function (orientedLink) {
            if (orientedLink.id === indexOrientedLinkAssociate) {
              _this.props.options.arrayPoints[index].associateOrientedLinksOut.push({
                label: orientedLink.label,
                name: orientedLink.name
              });
            }
          });
        }

        index++;
      });
    };
    /** update AssociateOrientedLinkIn of point for tooltip  */


    _this.updateAssociateOrientedLinkInToPoint = function () {
      var indexPoint = 0;

      _this.props.options.arrayPoints.forEach(function (point) {
        var newAssociateLinkIn = [];
        var namePoint = point.label || point.name;

        _this.props.options.arrayOrientedLinks.forEach(function (link) {
          if (link.pointIn === namePoint) {
            newAssociateLinkIn.push({
              label: link.label,
              name: link.name
            });
          }
        });

        _this.props.options.arrayPoints[indexPoint].associateOrientedLinksIn = newAssociateLinkIn;
        indexPoint++;
      });
    };
    /** update AssociateOrientedLinkOut of point for tooltip  */


    _this.updateAssociateOrientedLinkOutToPoint = function () {
      var indexPoint = 0;

      _this.props.options.arrayPoints.forEach(function (point) {
        var newAssociateLinkIn = [];
        var namePoint = point.label || point.name;

        _this.props.options.arrayOrientedLinks.forEach(function (link) {
          if (link.pointOut === namePoint) {
            newAssociateLinkIn.push({
              label: link.label,
              name: link.name
            });
          }
        });

        _this.props.options.arrayPoints[indexPoint].associateOrientedLinksOut = newAssociateLinkIn;
        indexPoint++;
      });
    };
    /**
     * to do
     */


    _this.resetCoordinatesToDrawLinkWithClick = function () {
      _this.props.options.coordinatesToDrawLinkWithClick[1].labelPoint = '';
      _this.props.options.coordinatesToDrawLinkWithClick[1].point = {};
      _this.props.options.coordinatesToDrawLinkWithClick[1].labelRegion = '';
      _this.props.options.coordinatesToDrawLinkWithClick[1].region = {};
      _this.props.options.coordinatesToDrawLinkWithClick[2].labelPoint = '';
      _this.props.options.coordinatesToDrawLinkWithClick[2].point = {};
      _this.props.options.coordinatesToDrawLinkWithClick[2].labelRegion = '';
      _this.props.options.coordinatesToDrawLinkWithClick[2].region = {};
    };
    /** get coordinate when use click in panel */


    _this.getCoordinatesToDrawOrientedLinkWithClick = function (event) {
      var coordinates = _this.props.options.coordinatesToDrawLinkWithClick;
      var objectIn = coordinates[1];
      var objectOut = coordinates[2];
      var pointC = coordinates[3];
      var heightBackground = parseInt(_this.props.options.baseMap.height, 10);
      var initialSpace = _this.props.options.coordinateSpaceInitial.coordinate;
      var xMin = parseInt(initialSpace.xMin, 10);
      var xMax = parseInt(initialSpace.xMax, 10);
      var yMin = parseInt(initialSpace.yMin, 10);
      var yMax = parseInt(initialSpace.yMax, 10);
      var widthInitialSpace = xMax - xMin;
      var heightInitialSpace = yMax - yMin;
      var paddingMarginLeftSimplePanel = 24;
      var clickX = event.nativeEvent.clientX - paddingMarginLeftSimplePanel;
      var positionX = 0;
      var positionY = 0;
      positionX = Math.round(clickX);
      positionY = Math.round(heightBackground - event.nativeEvent.layerY);

      if (event.nativeEvent.target.id === 'initialSpace' || event.nativeEvent.target.id === 'Intent' || event.nativeEvent.target.id === 'mainPanel' || event.nativeEvent.target.id === 'oct' + _this.props.options.baseMap.idSVG || event.nativeEvent.target.id === _this.props.options.baseMap.idSVG) {
        if (coordinates[0].id === 0) {
          objectIn.x = positionX;
          objectIn.xDefault = positionX;
          objectIn.y = positionY;
          objectIn.yDefault = positionY;
          coordinates[0].id++;
        } else if (coordinates[0].id === 1) {
          objectOut.x = positionX;
          objectOut.xDefault = positionX;
          objectOut.y = positionY;
          objectOut.yDefault = positionY;
          pointC.x = ((parseInt(objectIn.x, 10) + parseInt(objectOut.x, 10)) / 2).toString();
          pointC.y = ((parseInt(objectIn.y, 10) + parseInt(objectOut.y, 10)) / 2).toString();
          coordinates[0].id = 0;

          _this.createOrientedLinkToClick({
            label: 'No',
            value: false
          }, widthInitialSpace.toString(), heightInitialSpace.toString());

          _this.resetCoordinatesToDrawLinkWithClick();
        }
      } else if (event.nativeEvent.target.id.startsWith('point')) {
        var id_1 = parseInt(event.nativeEvent.target.id.charAt(5) + event.nativeEvent.target.id.charAt(6), 10);
        var arrayPoint = _this.props.options.arrayPoints;
        arrayPoint.forEach(function (point) {
          if (point.id === id_1) {
            var coordinates_1 = _this.props.options.coordinatesToDrawLinkWithClick;
            var name_1 = point.label || point.name;

            if (coordinates_1[0].id === 0) {
              objectIn.x = point.positionShapeX;
              objectIn.xDefault = point.positionXDefault;
              objectIn.y = point.positionShapeY;
              objectIn.yDefault = point.positionYDefault;
              objectIn.labelPoint = name_1;
              objectIn.point = point;
              coordinates_1[0].id++;
            } else if (coordinates_1[0].id === 1) {
              objectOut.x = point.positionShapeX;
              objectOut.xDefault = point.positionXDefault;
              objectOut.y = point.positionShapeY;
              objectOut.yDefault = point.positionYDefault;
              objectOut.labelPoint = name_1;
              objectOut.point = point;
              pointC.x = ((parseInt(objectIn.x, 10) + parseInt(objectOut.x, 10)) / 2).toString();
              pointC.y = ((parseInt(objectIn.y, 10) + parseInt(objectOut.y, 10)) / 2).toString();
              coordinates_1[0].id = 0;

              _this.createOrientedLinkToClick({
                label: 'No',
                value: false
              }, widthInitialSpace.toString(), heightInitialSpace.toString());

              _this.resetCoordinatesToDrawLinkWithClick();
            }
          }
        });
      } else {
        var arrayRegion = _this.props.options.regionCoordinateSpace;
        arrayRegion.forEach(function (region) {
          var xMin = parseInt(region.coords.xMin, 10);
          var xMax = parseInt(region.coords.xMax, 10);
          var yMin = parseInt(region.coords.yMin, 10);
          var yMax = parseInt(region.coords.yMax, 10);
          var xMinDefault = parseInt(region.coordsDefault.xMin, 10);
          var xMaxDefault = parseInt(region.coordsDefault.xMax, 10);
          var yMinDefault = parseInt(region.coordsDefault.yMin, 10);
          var yMaxDefault = parseInt(region.coordsDefault.yMax, 10);

          if (event.nativeEvent.target.id.startsWith('region')) {
            var id = parseInt(event.nativeEvent.target.id.charAt(6) + event.nativeEvent.target.id.charAt(7), 10);

            if (id === region.id) {
              var coordinates_2 = _this.props.options.coordinatesToDrawLinkWithClick;
              positionX = (xMin + xMax) / 2;
              positionY = (yMax + yMin) / 2;
              var positionXdefault = (xMinDefault + xMaxDefault) / 2;
              var positionYdefault = (yMaxDefault + yMinDefault) / 2;

              if (coordinates_2[0].id === 0) {
                objectIn.x = positionX;
                objectIn.xDefault = positionXdefault;
                objectIn.y = positionY;
                objectIn.yDefault = positionYdefault;
                objectIn.labelRegion = region.label;
                objectIn.region = region;
                coordinates_2[0].id++;
              } else if (coordinates_2[0].id === 1) {
                objectOut.x = positionX;
                objectOut.xDefault = positionXdefault;
                objectOut.y = positionY;
                objectOut.yDefault = positionYdefault;
                objectOut.labelRegion = region.label;
                objectOut.region = region;
                pointC.x = ((parseInt(objectIn.x, 10) + parseInt(objectOut.x, 10)) / 2).toString();
                pointC.y = ((parseInt(objectIn.y, 10) + parseInt(objectOut.y, 10)) / 2).toString();
                coordinates_2[0].id = 0;

                _this.createOrientedLinkToClick({
                  label: 'No',
                  value: false
                }, widthInitialSpace.toString(), heightInitialSpace.toString());

                _this.resetCoordinatesToDrawLinkWithClick();
              }
            }
          } else if (event.nativeEvent.target.id !== 'oct' + _this.props.options.baseMap.idSVG && event.nativeEvent.target.id.startsWith('oct') || event.nativeEvent.target.id !== _this.props.options.baseMap.idSVG && (event.nativeEvent.target.id.startsWith('path') || event.nativeEvent.target.id.startsWith('rect') || event.nativeEvent.target.id.startsWith('ellipse'))) {
            var id = '';

            if (_this.props.options.baseMap.isUploaded) {
              id = event.nativeEvent.target.id;
            } else {
              id = event.nativeEvent.target.id.substr(3);
            }

            if (id === region.idSVG) {
              var coordinates_3 = _this.props.options.coordinatesToDrawLinkWithClick;
              positionX = 0;
              positionY = 0;

              if (coordinates_3[0].id === 0) {
                objectIn.x = positionX;
                objectIn.xDefault = positionX;
                objectIn.y = positionY;
                objectIn.yDefault = positionY;
                objectIn.labelRegion = region.label;
                objectIn.region = region;
                coordinates_3[0].id++;
              } else if (coordinates_3[0].id === 1) {
                objectOut.x = positionX;
                objectOut.xDefault = positionX;
                objectOut.y = positionY;
                objectOut.yDefault = positionY;
                objectOut.labelRegion = region.label;
                objectOut.region = region;
                pointC.x = ((parseInt(objectIn.x, 10) + parseInt(objectOut.x, 10)) / 2).toString();
                pointC.y = ((parseInt(objectIn.y, 10) + parseInt(objectOut.y, 10)) / 2).toString();
                coordinates_3[0].id = 0;

                _this.createOrientedLinkToClick({
                  label: 'No',
                  value: false
                }, widthInitialSpace.toString(), heightInitialSpace.toString());

                _this.resetCoordinatesToDrawLinkWithClick();
              }
            }
          } else {
            var id = parseInt(event.nativeEvent.target.offsetParent.id.charAt(6) + event.nativeEvent.target.offsetParent.id.charAt(7), 10);

            if (id === region.id) {
              var coordinates_4 = _this.props.options.coordinatesToDrawLinkWithClick;
              positionX = (xMin + xMax) / 2;
              positionY = (yMax + yMin) / 2;

              if (coordinates_4[0].id === 0) {
                objectIn.x = positionX;
                objectIn.y = positionY;
                objectIn.labelRegion = region.label;
                objectIn.region = region;
                coordinates_4[0].id++;
              } else if (coordinates_4[0].id === 1) {
                objectOut.x = positionX;
                objectOut.y = positionY;
                objectOut.labelRegion = region.label;
                objectOut.region = region;
                pointC.x = ((parseInt(objectIn.x, 10) + parseInt(objectOut.x, 10)) / 2).toString();
                pointC.y = ((parseInt(objectIn.y, 10) + parseInt(objectOut.y, 10)) / 2).toString();
                coordinates_4[0].id = 0;

                _this.createOrientedLinkToClick({
                  label: 'No',
                  value: false
                }, widthInitialSpace.toString(), heightInitialSpace.toString());

                _this.resetCoordinatesToDrawLinkWithClick();
              }
            }
          }
        });
      }
    };

    _this.getCoordinatesToDrawIncurvedOrientedLinkWithClick = function (event) {
      var coordinates = _this.props.options.coordinatesToDrawLinkWithClick;
      var objectIn = coordinates[1];
      var objectOut = coordinates[2];
      var pointC = coordinates[3];
      var heightBackground = parseInt(_this.props.options.baseMap.height, 10);
      var initialSpace = _this.props.options.coordinateSpaceInitial.coordinate;
      var xMin = parseInt(initialSpace.xMin, 10);
      var xMax = parseInt(initialSpace.xMax, 10);
      var yMin = parseInt(initialSpace.yMin, 10);
      var yMax = parseInt(initialSpace.yMax, 10);
      var widthInitialSpace = xMax - xMin;
      var heightInitialSpace = yMax - yMin;
      var paddingMarginLeftSimplePanel = 24;
      var clickX = event.nativeEvent.clientX - paddingMarginLeftSimplePanel;
      var positionX = 0;
      var positionY = 0;
      positionX = Math.round(clickX);
      positionY = Math.round(heightBackground - event.nativeEvent.layerY);

      if (event.nativeEvent.target.id === 'mainPanel' || event.nativeEvent.target.id === 'initialSpace' || event.nativeEvent.target.id === 'Intent' || event.nativeEvent.target.id === 'oct' + _this.props.options.baseMap.idSVG || event.nativeEvent.target.id === _this.props.options.baseMap.idSVG) {
        if (coordinates[0].id === 0) {
          objectIn.x = positionX;
          objectIn.y = positionY;
          coordinates[0].id++;
        } else if (coordinates[0].id === 1) {
          objectOut.x = positionX;
          objectOut.y = positionY;
          coordinates[0].id++;
        } else if (coordinates[0].id === 2) {
          pointC.x = positionX;
          pointC.y = positionY;
          coordinates[0].id = 0;

          _this.createOrientedLinkToClick({
            label: 'Yes',
            value: true
          }, widthInitialSpace.toString(), heightInitialSpace.toString());

          _this.resetCoordinatesToDrawLinkWithClick();
        }
      } else if (event.nativeEvent.target.id.startsWith('point')) {
        var id_2 = parseInt(event.nativeEvent.target.id.charAt(5) + event.nativeEvent.target.id.charAt(6), 10);
        var arrayPoint = _this.props.options.arrayPoints;
        arrayPoint.forEach(function (point) {
          if (point.id === id_2) {
            var coordinates_5 = _this.props.options.coordinatesToDrawLinkWithClick;
            var name_2 = point.label || point.name;

            if (coordinates_5[0].id === 0) {
              objectIn.x = point.positionShapeX;
              objectIn.y = point.positionShapeY;
              objectIn.labelPoint = name_2;
              objectIn.point = point;
              coordinates_5[0].id++;
            } else if (coordinates_5[0].id === 1) {
              objectOut.x = point.positionShapeX;
              objectOut.y = point.positionShapeY;
              objectOut.labelPoint = name_2;
              objectOut.point = point;
              coordinates_5[0].id++;
            } else if (coordinates_5[0].id === 2) {
              pointC.x = point.positionShapeX;
              pointC.y = point.positionShapeY;
              coordinates_5[0].id = 0;

              _this.createOrientedLinkToClick({
                label: 'Yes',
                value: true
              }, widthInitialSpace.toString(), heightInitialSpace.toString());

              _this.resetCoordinatesToDrawLinkWithClick();
            }
          }
        });
      } else {
        var arrayRegion = _this.props.options.regionCoordinateSpace;
        arrayRegion.forEach(function (region) {
          var xMin = parseInt(region.coords.xMin, 10);
          var xMax = parseInt(region.coords.xMax, 10);
          var yMin = parseInt(region.coords.yMin, 10);
          var yMax = parseInt(region.coords.yMax, 10);

          if (event.nativeEvent.target.id.startsWith('region')) {
            var id = parseInt(event.nativeEvent.target.id.charAt(6) + event.nativeEvent.target.id.charAt(7), 10);

            if (id === region.id) {
              var coordinates_6 = _this.props.options.coordinatesToDrawLinkWithClick;
              positionX = (xMin + xMax) / 2;
              positionY = (yMax + yMin) / 2;

              if (coordinates_6[0].id === 0) {
                objectIn.x = positionX;
                objectIn.y = positionY;
                objectIn.labelRegion = region.label;
                objectIn.region = region;
                coordinates_6[0].id++;
              } else if (coordinates_6[0].id === 1) {
                objectOut.x = positionX;
                objectOut.y = positionY;
                objectOut.labelRegion = region.label;
                objectOut.region = region;
                coordinates_6[0].id++;
              } else if (coordinates_6[0].id === 2) {
                pointC.x = positionX;
                pointC.y = positionY;
                coordinates_6[0].id = 0;

                _this.createOrientedLinkToClick({
                  label: 'Yes',
                  value: true
                }, widthInitialSpace.toString(), heightInitialSpace.toString());

                _this.resetCoordinatesToDrawLinkWithClick();
              }
            }
          } else if (event.nativeEvent.target.id !== 'oct' + _this.props.options.baseMap.idSVG && event.nativeEvent.target.id.startsWith('oct') || event.nativeEvent.target.id !== _this.props.options.baseMap.idSVG && (event.nativeEvent.target.id.startsWith('path') || event.nativeEvent.target.id.startsWith('rect') || event.nativeEvent.target.id.startsWith('ellipse'))) {
            var id = '';

            if (_this.props.options.baseMap.isUploaded) {
              id = event.nativeEvent.target.id;
            } else {
              id = event.nativeEvent.target.id.substr(3);
            }

            if (id === region.idSVG) {
              var coordinates_7 = _this.props.options.coordinatesToDrawLinkWithClick;
              positionX = 0;
              positionY = 0;

              if (coordinates_7[0].id === 0) {
                objectIn.x = positionX;
                objectIn.y = positionY;
                objectIn.labelRegion = region.label;
                objectIn.region = region;
                coordinates_7[0].id++;
              } else if (coordinates_7[0].id === 1) {
                objectOut.x = positionX;
                objectOut.y = positionY;
                objectOut.labelRegion = region.label;
                objectOut.region = region;
                coordinates_7[0].id++;
              } else if (coordinates_7[0].id === 2) {
                pointC.x = positionX;
                pointC.y = positionY;
                coordinates_7[0].id = 0;

                _this.createOrientedLinkToClick({
                  label: 'Yes',
                  value: true
                }, widthInitialSpace.toString(), heightInitialSpace.toString());

                _this.resetCoordinatesToDrawLinkWithClick();
              }
            }
          } else {
            var id = parseInt(event.nativeEvent.target.offsetParent.id.charAt(6) + event.nativeEvent.target.offsetParent.id.charAt(7), 10);

            if (id === region.id) {
              var coordinates_8 = _this.props.options.coordinatesToDrawLinkWithClick;
              positionX = (xMin + xMax) / 2;
              positionY = (yMax + yMin) / 2;

              if (coordinates_8[0].id === 0) {
                objectIn.x = positionX;
                objectIn.y = positionY;
                objectIn.labelRegion = region.label;
                objectIn.region = region;
                coordinates_8[0].id++;
              } else if (coordinates_8[0].id === 1) {
                objectOut.x = positionX;
                objectOut.y = positionY;
                objectOut.labelRegion = region.label;
                objectOut.region = region;
                coordinates_8[0].id++;
              } else if (coordinates_8[0].id === 2) {
                pointC.x = positionX;
                pointC.y = positionY;
                coordinates_8[0].id = 0;

                _this.createOrientedLinkToClick({
                  label: 'Yes',
                  value: true
                }, widthInitialSpace.toString(), heightInitialSpace.toString());

                _this.resetCoordinatesToDrawLinkWithClick();
              }
            }
          }
        });
      }
    };
    /**
     * to do
     */


    _this.defineIdOrientedLink = function () {
      var id = 1;

      if (_this.props.options.arrayOrientedLinks.length === 0) {
        return id;
      } else {
        id = _this.props.options.arrayOrientedLinks[_this.props.options.arrayOrientedLinks.length - 1].id + 1;
        return id;
      }
    };
    /**
     * to do
     */


    _this.createOrientedLinkToClick = function (isIncurved, widthInitialSpace, heightInitialSpace) {
      var coordinates = _this.props.options.coordinatesToDrawLinkWithClick;

      var id = _this.defineIdOrientedLink();

      var name = 'orientedLink' + id.toString();
      var zIndex = _this.props.options.zIndexOrientedLink + 1;
      var pointA = coordinates[1];
      var pointB = coordinates[2];
      var pointC = coordinates[3];
      var initTextObject = new Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_6__["TextObject"]('', false, 'white', 'black', {
        bold: false,
        italic: false,
        underline: false
      }, true, {
        legendElement: '',
        numericFormatElement: '5',
        unit: '',
        displayObjectInTooltip: false,
        addColorTextElement: false,
        colorTextElement: 'white',
        addColorBackElement: false,
        colorBackElement: 'black'
      }, {
        legendElement: '',
        numericFormatElement: '5',
        unit: '',
        displayObjectInTooltip: true,
        addColorTextElement: true,
        colorTextElement: 'white',
        addColorBackElement: true,
        colorBackElement: 'black'
      });
      var linkUrl = new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_7__["LinkURLClass"]('', '', '');
      var positionParameter = new Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_4__["PositionParameterClass"]('0', '0', '0', '0', {
        label: 'Right',
        value: 'Right'
      }, {
        label: 'Right',
        value: 'Right'
      });
      var newOrientedLink = new Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_5__["OrientedLinkClass"](id, linkUrl, [], [], '', initTextObject, {
        key: '',
        unit: '',
        format: '',
        keyValue: '',
        refId: '',
        manageValue: 'avg'
      }, [], false, false, false, positionParameter, name, {
        label: 'Monodirectional',
        value: 'AB'
      }, '9', pointA.x.toString(), pointA.y.toString(), '#5794F2', pointB.x.toString(), pointB.y.toString(), '#E54658', '', '', pointA.labelPoint, pointB.labelPoint, pointA.labelRegion, pointB.labelRegion, zIndex, pointC.x, pointC.y, isIncurved, {
        key: '',
        unit: '',
        format: '',
        keyValue: '',
        refId: '',
        manageValue: 'avg'
      }, [], widthInitialSpace, heightInitialSpace, pointA.xDefault.toString(), pointA.yDefault.toString(), pointB.xDefault.toString(), pointB.yDefault.toString(), pointC.x, pointC.y);
      var newArrayOrientedLink = _this.props.options.arrayOrientedLinks;
      newArrayOrientedLink.push(newOrientedLink);

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        arrayOrientedLinks: newArrayOrientedLink,
        indexOrientedLink: id,
        zIndexOrientedLink: zIndex,
        newOrientedLink: true
      }));

      _this.props.options.arrayOrientedLinks = newArrayOrientedLink;
      _this.props.options.indexOrientedLink = id;
      _this.props.options.zIndexOrientedLink = zIndex;
      _this.props.options.newOrientedLink = true;

      _this.addAssociateOrientedLinkToPoint(pointA.labelPoint || '', pointB.labelPoint || '', newOrientedLink.id);
    };

    _this.defineValueX = function (orientedLink, defaultPosition, isIn) {
      var result = '';

      if (isIn) {
        if (orientedLink.pointIn !== '') {
          var arrayPoint = _this.props.options.arrayPoints;
          arrayPoint.forEach(function (point) {
            if (point.name === orientedLink.pointIn || point.label === orientedLink.pointIn) {
              if (defaultPosition) {
                result = point.positionXDefault;
              } else {
                result = point.positionShapeX;
              }
            }
          });
        } else if (orientedLink.regionIn !== '') {
          var arrayRegion = _this.props.options.regionCoordinateSpace;
          arrayRegion.forEach(function (region) {
            if (region.label === orientedLink.regionIn) {
              if (defaultPosition) {
                result = (parseInt(region.coords.xMax, 10) - parseInt(region.coords.xMin, 10)).toString();
              } else {
                result = (parseInt(region.coordsDefault.xMax, 10) - parseInt(region.coordsDefault.xMin, 10)).toString();
              }
            }
          });
        } else {
          if (defaultPosition) {
            result = orientedLink.pointAPositionXDefault;
          } else {
            result = orientedLink.pointAPositionX;
          }
        }
      } else {
        if (orientedLink.pointOut !== '') {
          var arrayPoint = _this.props.options.arrayPoints;
          arrayPoint.forEach(function (point) {
            if (point.name === orientedLink.pointOut || point.label === orientedLink.pointOut) {
              if (defaultPosition) {
                result = point.positionXDefault;
              } else {
                result = point.positionShapeX;
              }
            }
          });
        } else if (orientedLink.regionOut !== '') {
          var arrayRegion = _this.props.options.regionCoordinateSpace;
          arrayRegion.forEach(function (region) {
            if (region.label === orientedLink.regionOut) {
              if (defaultPosition) {
                result = (parseInt(region.coords.xMax, 10) - parseInt(region.coords.xMin, 10)).toString();
              } else {
                result = (parseInt(region.coordsDefault.xMax, 10) - parseInt(region.coordsDefault.xMin, 10)).toString();
              }
            }
          });
        } else {
          if (defaultPosition) {
            result = orientedLink.pointBPositionXDefault;
          } else {
            result = orientedLink.pointBPositionX;
          }
        }
      }

      return result;
    };

    _this.defineValueY = function (orientedLink, defaultPosition, isIn) {
      var result = '';

      if (isIn) {
        if (orientedLink.pointIn !== '') {
          var arrayPoint = _this.props.options.arrayPoints;
          arrayPoint.forEach(function (point) {
            if (point.name === orientedLink.pointIn) {
              if (defaultPosition) {
                result = point.positionYDefault;
              } else {
                result = point.positionShapeY;
              }
            }
          });
        } else if (orientedLink.regionIn !== '') {
          var arrayRegion = _this.props.options.regionCoordinateSpace;
          arrayRegion.forEach(function (region) {
            if (region.label === orientedLink.regionIn) {
              if (defaultPosition) {
                result = (parseInt(region.coords.yMax, 10) - parseInt(region.coords.yMin, 10)).toString();
              } else {
                result = (parseInt(region.coordsDefault.yMax, 10) - parseInt(region.coordsDefault.yMin, 10)).toString();
              }
            }
          });
        } else {
          if (defaultPosition) {
            result = orientedLink.pointAPositionYDefault;
          } else {
            result = orientedLink.pointAPositionY;
          }
        }
      } else {
        if (orientedLink.pointOut !== '') {
          var arrayPoint = _this.props.options.arrayPoints;
          arrayPoint.forEach(function (point) {
            if (point.name === orientedLink.pointIn) {
              if (defaultPosition) {
                result = point.positionYDefault;
              } else {
                result = point.positionShapeY;
              }
            }
          });
        } else if (orientedLink.regionOut !== '') {
          var arrayRegion = _this.props.options.regionCoordinateSpace;
          arrayRegion.forEach(function (region) {
            if (region.label === orientedLink.regionIn) {
              if (defaultPosition) {
                result = (parseInt(region.coords.yMax, 10) - parseInt(region.coords.yMin, 10)).toString();
              } else {
                result = (parseInt(region.coordsDefault.yMax, 10) - parseInt(region.coordsDefault.yMin, 10)).toString();
              }
            }
          });
        } else {
          if (defaultPosition) {
            result = orientedLink.pointBPositionYDefault;
          } else {
            result = orientedLink.pointBPositionY;
          }
        }
      }

      return result;
    };

    _this.getValuesAuxiliaryMetricsPoint = function (point) {
      Object(Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_8__["reqMetricAuxPoint"])(point, _this.props);
      return _this.getValuesAuxiliaryMetrics(point.metrics, point.mainMetric);
    };

    _this.getValuesAuxiliaryMetricsOrientedLink = function (orientedLink) {
      Object(Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_8__["reqMetricAuxOrientedLink"])(orientedLink, _this.props);
      return _this.getValuesAuxiliaryMetrics(orientedLink.metrics, orientedLink.mainMetric);
    };

    _this.getValuesAuxiliaryMetricsOrientedLinkB = function (orientedLink) {
      Object(Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_8__["reqMetricAuxOrientedLink"])(orientedLink, _this.props);
      return _this.getValuesAuxiliaryMetrics(orientedLink.metricsB, orientedLink.mainMetricB);
    };

    _this.getValuesAuxiliaryMetrics = function (auxiliaryMetrics, mainMetric) {
      var valueAuxiliaryMetric = []; //const countMetrics: number = auxiliaryMetrics.length;

      if (auxiliaryMetrics.length < 1) {
        auxiliaryMetrics.forEach(function (metric) {
          var _a;

          var countTotalValues = 0;
          var resultTotalValues = 0;
          var result = '';

          if (metric.returnQuery && metric.returnQuery.length > 0) {
            var numberLoop = ((_a = metric.returnQuery) === null || _a === void 0 ? void 0 : _a.length) || 0;

            if (metric.key !== '' && metric.keyValue !== '') {
              for (var i = 0; i < numberLoop; i++) {
                var line = metric.returnQuery[i];

                if (line.fields[0].labels) {
                  if (mainMetric.refId !== '') {
                    if (line.fields[0].labels[mainMetric.key] === mainMetric.keyValue || mainMetric.key === '' && mainMetric.keyValue === '') {
                      if (line.fields[0].labels[metric.key] === metric.keyValue) {
                        var countValues = line.fields[0].values.length;

                        for (var i_1 = 0; i_1 < countValues; i_1++) {
                          if (line.fields[0].values.get(i_1)) {
                            resultTotalValues += line.fields[0].values.get(i_1);
                            countTotalValues++;
                          }
                        }
                      }
                    }
                  }
                }
              }
            } else {
              if (mainMetric.refId !== '') {
                for (var i = 0; i < numberLoop; i++) {
                  var line = metric.returnQuery[i];

                  if (line.fields[0].labels) {
                    if (line.fields[0].labels[mainMetric.key] === mainMetric.keyValue || mainMetric.key === '' && mainMetric.keyValue === '') {
                      var countValues = line.fields[0].values.length;

                      for (var i_2 = 0; i_2 < countValues; i_2++) {
                        if (line.fields[0].values.get(i_2)) {
                          resultTotalValues += line.fields[0].values.get(i_2);
                          countTotalValues++;
                        }
                      }
                    }
                  }
                }
              }
            }

            if (metric.manageValue === 'avg') {
              result = (resultTotalValues / countTotalValues).toString();
            } else if (metric.manageValue === 'sum') {
              result = resultTotalValues.toString();
            } else if (metric.manageValue === 'err') {
              if (countTotalValues > 1) {
                result = 'error';
              } else {
                result = resultTotalValues.toString();
              }
            }
          }

          if (result !== '') {
            valueAuxiliaryMetric.push(result);
          }
        });
      }

      return valueAuxiliaryMetric;
    };

    _this.changeValueButtonToLink = function () {
      _this.setState({
        valueButton: 'link'
      });
    };

    _this.changeValueButtonToIncurvedLink = function () {
      _this.setState({
        valueButton: 'incurvedLink'
      });
    };

    _this.changeValueButtonToPoint = function () {
      _this.setState({
        valueButton: 'point'
      });
    };

    _this.getCoordinates = function (event) {
      var valueButton = _this.state.valueButton;

      if (_this.state.numberClickDiv === 0) {
        return;
      }

      if (valueButton === 'link') {
        _this.getCoordinatesToDrawOrientedLinkWithClick(event);
      } else if (valueButton === 'incurvedLink') {
        _this.getCoordinatesToDrawIncurvedOrientedLinkWithClick(event);
      } else if (valueButton === 'point') {
        _this.getCoordinatesToDrawPointWithClick(event);
      }
    };
    /**
     * add button click to manage region, point, oriented link, position legend
     */


    _this.updateButtonCss = function () {
      var _final = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        id: "allButton",
        style: {
          marginTop: '1%',
          marginBottom: '50px'
        }
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
        style: {
          marginLeft: '1%',
          zIndex: 18,
          position: 'absolute'
        },
        variant: _this.state.buttonManage[0] ? 'danger' : 'primary',
        className: "button",
        onClick: _this.addNode
      }, "Add Region"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
        style: {
          marginLeft: '15%',
          zIndex: 18,
          position: 'absolute'
        },
        variant: _this.state.buttonManage[3] ? 'danger' : 'primary',
        className: "button",
        onClick: _this.addPoint
      }, "Add Point"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
        style: {
          marginLeft: '27%',
          zIndex: 18,
          position: 'absolute'
        },
        variant: _this.state.buttonManage[1] ? 'danger' : 'primary',
        className: "button",
        onClick: _this.addLink
      }, "Add Oriented Link"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
        style: {
          marginLeft: '46%',
          zIndex: 18,
          position: 'absolute'
        },
        variant: _this.state.buttonManage[4] ? 'danger' : 'primary',
        className: "button",
        onClick: _this.addIncurvedLink
      }, "Add Incurved Oriented Link"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
        id: "legnd",
        style: {
          marginLeft: '67%',
          zIndex: 18,
          position: 'absolute'
        },
        variant: _this.state.buttonManage[2] ? 'danger' : 'primary',
        className: "button",
        onClick: _this.closeLegend
      }, "Position Legend"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
        id: "zoomButton",
        style: {
          marginLeft: '80%',
          zIndex: 18,
          position: 'absolute'
        },
        variant: _this.state.buttonManage[5] ? 'danger' : 'primary',
        onClick: _this.ZoomSVG
      }, "Zoom [P/M]"));

      _this.setState({
        allActionButton: _final
      });
    };

    _this.callMethod = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(this.state.numberClickDiv === 0)) return [3
              /*break*/
              , 1];
              this.setState({
                numberClickDiv: 1
              });
              return [3
              /*break*/
              , 3];

            case 1:
              return [4
              /*yield*/
              , this.setAsyncButtonManage({
                buttonManage: [false, false, false, false, false, false]
              })];

            case 2:
              _a.sent();

              this.setState({
                numberClickDiv: 0
              });
              this.updateButtonCss();
              _a.label = 3;

            case 3:
              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.setAsyncButtonManage = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };

    _this.resetButtonManage = function (index) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var tmp, oldValue;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              tmp = this.state.buttonManage;
              oldValue = tmp[index];
              tmp = [false, false, false, false, false, this.state.buttonManage[5]];

              if (oldValue) {
                tmp[index] = false;
                this.setState({
                  numberClickDiv: 0
                });
              } else {
                if (index === 2) {
                  this.setState({
                    hiddenLegend: false,
                    valueButton: ''
                  });
                }

                tmp[index] = true;
                this.setState({
                  numberClickDiv: 1
                });
              }

              return [4
              /*yield*/
              , this.setAsyncButtonManage({
                buttonManage: tmp
              })];

            case 1:
              _a.sent();

              this.updateButtonCss();
              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.addNode = function () {
      if (_this.state.buttonAddIncurvedLinkIsActive) {
        _this.setState(function (prevState) {
          return {
            buttonAddIncurvedLinkIsActive: !prevState.buttonAddIncurvedLinkIsActive
          };
        });
      }

      if (_this.state.buttonAddLinkIsActive) {
        _this.setState(function (prevState) {
          return {
            buttonAddLinkIsActive: !prevState.buttonAddLinkIsActive
          };
        });
      }

      _this.setState(function (prevState) {
        return {
          nbClickButton: prevState.buttonManage[0] ? false : true
        };
      });

      _this.resetButtonManage(0);

      _this.changeValueButtonToPoint();
    };

    _this.addPoint = function () {
      if (_this.state.buttonAddIncurvedLinkIsActive) {
        _this.setState(function (prevState) {
          return {
            buttonAddIncurvedLinkIsActive: !prevState.buttonAddIncurvedLinkIsActive
          };
        });
      }

      if (_this.state.buttonAddLinkIsActive) {
        _this.setState(function (prevState) {
          return {
            buttonAddLinkIsActive: !prevState.buttonAddLinkIsActive
          };
        });
      }

      _this.setState(function (prevState) {
        return {
          nbClickButton: prevState.buttonManage[3] ? false : true,
          valueButton: 'point'
        };
      });

      _this.resetButtonManage(3);

      _this.changeValueButtonToPoint();
    };

    _this.addLink = function () {
      if (_this.state.buttonAddIncurvedLinkIsActive) {
        _this.setState(function (prevState) {
          return {
            buttonAddIncurvedLinkIsActive: !prevState.buttonAddIncurvedLinkIsActive
          };
        });
      }

      _this.setState(function (prevState) {
        return {
          nbClickButton: prevState.buttonManage[1] ? false : true,
          buttonAddLinkIsActive: !prevState.buttonAddLinkIsActive
        };
      });

      _this.resetButtonManage(1);

      _this.changeValueButtonToLink();
    };

    _this.addIncurvedLink = function () {
      if (_this.state.buttonAddLinkIsActive) {
        _this.setState(function (prevState) {
          return {
            buttonAddLinkIsActive: !prevState.buttonAddLinkIsActive
          };
        });
      }

      _this.setState(function (prevState) {
        return {
          nbClickButton: prevState.buttonManage[4] ? false : true,
          buttonAddIncurvedLinkIsActive: !prevState.buttonAddIncurvedLinkIsActive
        };
      });

      _this.resetButtonManage(4);

      _this.changeValueButtonToIncurvedLink();
    }; // Close Legend


    _this.closeLegend = function () {
      if (_this.state.buttonAddIncurvedLinkIsActive) {
        _this.setState(function (prevState) {
          return {
            buttonAddIncurvedLinkIsActive: !prevState.buttonAddIncurvedLinkIsActive
          };
        });
      }

      if (_this.state.buttonAddLinkIsActive) {
        _this.setState(function (prevState) {
          return {
            buttonAddLinkIsActive: !prevState.buttonAddLinkIsActive
          };
        });
      }

      _this.resetButtonManage(2);
    };

    _this.positionLegend = function (e) {
      if (!_this.state.buttonManage[2]) {
        return;
      }

      var newLegend = _this.state.legend;
      var sizeTitlePanel = 28;
      newLegend.x = e.nativeEvent.offsetX;
      newLegend.y = _this.props.options.baseMap.height > e.nativeEvent.offsetY ? parseInt(e.nativeEvent.offsetY, 10) : parseInt(e.nativeEvent.offsetY, 10) - sizeTitlePanel;
      newLegend.hiddenLegend = false;

      _this.setState({
        legend: newLegend
      });

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        legend: newLegend
      }));
    };

    _this.ZoomSVG = function () {
      var newButtonManage = _this.state.buttonManage;

      if (!newButtonManage[5]) {
        newButtonManage[5] = true;
        document.body.addEventListener('keyup', _this.applyZoom);
      } else if (newButtonManage[5]) {
        newButtonManage[5] = false;

        _this.ZoomInactive();
      }

      _this.setState({
        buttonManage: newButtonManage
      });

      _this.updateButtonCss();
    }; // Close legend click on close


    _this.handleClick = function (event) {
      var newLegend = _this.state.legend;
      newLegend.hiddenLegend = !_this.state.legend.hiddenLegend;

      _this.setState(function (prevState) {
        return {
          legend: newLegend
        };
      });
    }; // SVG check url


    _this.tt = function () {
      var test = document.getElementById('path836');

      if (test) {
        test.style.fill = 'red';
      }
    };

    _this.chargeRegion = function () {// this.setState({
      //   displayRegion: (
      //     <DrawRectangle
      //       key="limitCoor"
      //       color="orange"
      //       coordinateInitial={this.props.options.coordinateSpaceInitial}
      //       id="initialSpace"
      //       onOptionsChange={this.props.onOptionsChange}
      //       options={this.props.options}
      //       data={this.props.data}
      //       // isEnabled={!this.state.buttonManage[1]}
      //       buttonAddLinkIsActive={this.state.buttonAddLinkIsActive}
      //       buttonAddIncurvedLinkIsActive={this.state.buttonAddIncurvedLinkIsActive}
      //     />
      //   ),
      // });
    };

    _this.editIdString = function (str) {
      var cpyString = str.slice();
      var strSplit = cpyString.split('id="');
      var newStr = '';

      for (var i = 0; strSplit.length > i; i++) {
        if (strSplit[i]) {
          if (i > 0) {
            var tt = strSplit[i];
            strSplit[i] = 'id="oct' + tt;
          }

          newStr = newStr + strSplit[i];
        }
      }

      return newStr;
    };
    /**
     * update button css when mount component
     */
    // not display Button of Panel if it is in the mode View


    _this.checkIfDisplayButton = function () {
      var e_4, _a;

      var url = window.location.href;
      var arrayUrl = url.split('&');
      var canDisplayButton = false;

      try {
        for (var arrayUrl_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayUrl), arrayUrl_1_1 = arrayUrl_1.next(); !arrayUrl_1_1.done; arrayUrl_1_1 = arrayUrl_1.next()) {
          var element = arrayUrl_1_1.value;

          if (element === 'edit') {
            canDisplayButton = true;
          }
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (arrayUrl_1_1 && !arrayUrl_1_1.done && (_a = arrayUrl_1["return"])) _a.call(arrayUrl_1);
        } finally {
          if (e_4) throw e_4.error;
        }
      }

      if (!canDisplayButton) {
        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          displayButton: false
        }));
      }
    };
    /**
     * update button css when mount component
     */


    _this.componentDidMount = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var width, height, text, result, resultWidth, resultHeight, id, newBaseMap, coordinateSpace;

        var _this = this;

        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          // not display Button of Panel if it is in the mode View
          this.checkIfDisplayButton(); // save background in state
          // this.setState({
          //   currentImage: this.props.options.baseMap.image,
          // });

          if (this.props.options.baseMap.image !== '') {
            this.setState({
              currentImage: this.props.options.baseMap.image
            });
          } // load backgroundSVG


          if (this.props.options.baseMap.modeSVG && this.props.options.baseMap.image !== '') {
            if (this.props.options.baseMap.isUploaded) {
              width = '';
              height = '';
              text = this.props.options.baseMap.image;
              this.setState({
                svg: text
              });
              result = /id=["']\w*["']/i.exec(text);
              resultWidth = /width=["']\w*["']/i.exec(text);

              if (resultWidth && resultWidth.length > 0) {
                width = resultWidth[0].split('"')[1];
              }

              resultHeight = /height=["']\w*["']/i.exec(text);

              if (resultHeight && resultHeight.length > 0) {
                height = resultHeight[0].split('"')[1];
              }

              if (result && result.length > 0) {
                id = result[0].split('"');

                if (id.length > 1) {
                  newBaseMap = this.props.options.baseMap;
                  newBaseMap.idSVG = id[1];
                  newBaseMap.layerImage = this.props.options.baseMap.image;
                  newBaseMap.width = parseInt(width || '0', 10).toString() || '';
                  newBaseMap.height = parseInt(height || '0', 10).toString() || '';
                  this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, this.props.options), {
                    baseMap: newBaseMap
                  }));
                }
              }

              this.chargeRegion();
            } else {
              fetch(this.props.options.baseMap.image).then(function (res) {
                return res.text();
              }).then(function (text) {
                var data;

                if (_this.props.options.baseMap.image.split(',')[0] === 'base64') {
                  data = atob(_this.props.options.baseMap.image.split(',')[1]);
                } else {
                  data = text;
                }

                _this.setState({
                  svg: data
                });

                var result = /id=["']\w*["']/i.exec(data);

                if (result && result.length > 0) {
                  var id = result[0].split('"');

                  if (id.length > 1) {
                    var documentId = document.getElementById(id[1]);

                    if (documentId) {
                      var newBaseMap = _this.props.options.baseMap;
                      newBaseMap.idSVG = id[1]; // newBaseMap.width = documentId.getAttribute('width') || '';
                      // newBaseMap.height = documentId.getAttribute('height') || '';

                      newBaseMap.width = parseInt(documentId.getAttribute('width') || '0', 10).toString() || '';
                      newBaseMap.height = parseInt(documentId.getAttribute('height') || '0', 10).toString() || '';

                      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                        baseMap: newBaseMap
                      }));
                    }
                  }
                }
              }).then(function () {
                return _this.chargeRegion();
              }).then(function () {
                var newStr = _this.editIdString(_this.state.svg);

                var background = _this.props.options.baseMap;
                background.layerImage = newStr;

                _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                  baseMap: background
                }));
              });
            }
          } else {
            this.chargeRegion();
          }

          coordinateSpace = this.props.options.coordinateSpaceInitial;
          coordinateSpace.coordinate.xMax = this.props.options.baseMap.width || '0';
          coordinateSpace.coordinate.yMax = this.props.options.baseMap.height || '0'; // if (coordinateSpace.coordinate.xMax === '') {
          //   coordinateSpace.coordinate.xMax = '0';
          // }
          // if (!coordinateSpace.coordinate.yMax) {
          //   coordinateSpace.coordinate.yMax = '0';
          // }
          // this.props.onOptionsChange({
          //   ...this.props.options,
          //   coordinateSpaceInitial: coordinateSpace,
          // });

          this.updateButtonCss();
          return [2
          /*return*/
          ];
        });
      });
    }; // Zoom in Panel

    /********************************  Zoom Panel*********************************** */
    // Zoom Plus


    _this.ZoomInactive = function () {
      document.body.removeEventListener('keyup', _this.applyZoom);
      var elmnt = document.getElementById('coordinateSpaces');
      var button = document.getElementById('zoomButton');

      if (elmnt && button && !_this.state.buttonManage[5]) {
        elmnt.style.cursor = 'default';
      } // if (elmnt) {
      //   const stop = document.getElementById('zoomstop');
      //   if (stop) {
      //     // document.body.removeEventListener('keyup', this.ZoomSVG, true);
      //   }
      // }

    };

    _this.applyZoom = function (evt) {
      var elmnt = document.getElementById('coordinateSpaces');
      var button = document.getElementById('zoomButton');

      if (elmnt && evt.keyCode === 80) {
        // m
        if (button) {
          // lol.style.background = 'linear-gradient(to bottom,#e02f44,#c4162a)';
          elmnt.style.cursor = 'zoom-in';
          elmnt.style.transform += 'scale(1.01,1.01)' + 'translate(0.5%)' + 'translateY(0.5%)';
        }
      } else if (elmnt && evt.keyCode === 77) {
        // p
        if (button) {
          // lol.style.background = 'linear-gradient(to bottom,#e02f44,#c4162a);';
          elmnt.style.cursor = 'zoom-out';
          elmnt.style.transform += 'scale(0.98,0.98)' + 'translate(-1%)' + 'translateY(-1%)';
        }
      }
    };

    _this.displayAndGetPositionTooltipSVG = function (event) {
      var e_5, _a;

      var _b, _c, _d, _e;

      var idSVG = '';

      if (_this.props.options.baseMap.isUploaded) {
        idSVG = event.target.id;
      } else {
        idSVG = event.target.id.substring(3);
      }

      var arrayRegions = _this.props.options.regionCoordinateSpace;
      var newDataSVG = {
        idSVG: idSVG,
        x: '0',
        y: '0'
      };

      try {
        for (var arrayRegions_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayRegions), arrayRegions_1_1 = arrayRegions_1.next(); !arrayRegions_1_1.done; arrayRegions_1_1 = arrayRegions_1.next()) {
          var region = arrayRegions_1_1.value;

          if (region.idSVG === idSVG) {
            var xSVG = 0;
            var ySVG = 0;
            var widthSVG = 0;
            var heightSVG = 0;
            var positionX = '0';
            var positionY = '0';
            var widthTooltip = 0;
            var heightTooltip = 0;
            var tooltip = document.getElementById('tooltipSVG');

            if (tooltip) {
              widthTooltip = parseInt((_b = tooltip) === null || _b === void 0 ? void 0 : _b.style.width, 10);
              heightTooltip = parseInt((_c = tooltip) === null || _c === void 0 ? void 0 : _c.style.height, 10) ? parseInt((_d = tooltip) === null || _d === void 0 ? void 0 : _d.style.height, 10) : parseInt((_e = tooltip) === null || _e === void 0 ? void 0 : _e.style.minHeight, 10);
            }

            var positionParameter = '';

            if (region.positionParameter.tooltipPositionA.value) {
              positionParameter = region.positionParameter.tooltipPositionA.value.toLowerCase();
            }

            if (event.target.localName === 'rect') {
              xSVG = parseInt(event.target.attributes['x'].nodeValue, 10);
              ySVG = parseInt(event.target.attributes['y'].nodeValue, 10);
              widthSVG = parseInt(event.target.attributes['width'].nodeValue, 10);
              heightSVG = parseInt(event.target.attributes['height'].nodeValue, 10); // positionX = (xSVG + widthSVG).toString();
              // positionY = (ySVG - heightSVG / 2).toString();
            } else if (event.target.localName === 'ellipse') {
              xSVG = parseInt(event.target.attributes['cx'].nodeValue, 10);
              ySVG = parseInt(event.target.attributes['cy'].nodeValue, 10);
              widthSVG = parseInt(event.target.attributes['rx'].nodeValue, 10) * 2;
              heightSVG = parseInt(event.target.attributes['ry'].nodeValue, 10) * 2; // positionX = xSVG.toString();
              // positionY = ySVG.toString();

              if (positionParameter === 'top') {
                positionX = (xSVG - widthTooltip / 2).toString();
                positionY = (ySVG - heightTooltip - heightSVG / 2).toString();
              } else if (positionParameter === 'bottom') {
                positionX = (xSVG - widthTooltip / 2).toString();
                positionY = (ySVG + heightSVG / 2).toString();
              } else if (positionParameter === 'left') {
                positionX = (xSVG - widthTooltip).toString();
                positionY = ySVG.toString();
              } else if (positionParameter === 'right') {
                positionX = xSVG.toString();
                positionY = ySVG.toString();
              } else {
                positionX = xSVG.toString();
                positionY = ySVG.toString();
              }
            } else if (event.target.localName === 'path') {
              var allValues = event.target.attributes['d'].nodeValue;
              var arrayAllValues = allValues.split(' ');
              var iX = -2;
              var xMin = 1000000;
              var xMax = 0;
              var iY = -1;
              var yMin = 1000000;
              var yMax = 0;

              for (var i = 0; i < arrayAllValues.length; i++) {
                var valueToCheck = parseInt(arrayAllValues[i], 10);

                if (i === iX + 3) {
                  if (valueToCheck < xMin) {
                    xMin = valueToCheck;
                  }

                  if (valueToCheck > xMax) {
                    xMax = valueToCheck;
                  }

                  iX = i;
                }

                if (i === iY + 3) {
                  if (valueToCheck < yMin) {
                    yMin = valueToCheck;
                  }

                  if (valueToCheck > yMax) {
                    yMax = valueToCheck;
                  }

                  iY = i;
                }
              }

              xSVG = xMin;
              ySVG = yMin;
              widthSVG = xMax - xMin;
              heightSVG = xMax - xMin; // positionX = (xSVG + widthSVG).toString();
              // positionY = ySVG.toString();
            } // define positionTooltip for path and rect


            if (event.target.localName === 'path' || event.target.localName === 'rect') {
              if (positionParameter === 'top') {
                positionX = (xSVG + widthSVG / 4).toString();
                positionY = (ySVG - heightSVG / 2).toString();
              } else if (positionParameter === 'bottom') {
                positionX = (xSVG + widthSVG / 4).toString();
                positionY = (ySVG + heightSVG / 2).toString();
              } else if (positionParameter === 'left') {
                positionX = (xSVG - widthSVG).toString();
                positionY = ySVG.toString();
              } else if (positionParameter === 'right') {
                positionX = (xSVG + widthSVG).toString();
                positionY = ySVG.toString();
              } else {
                positionX = (xSVG + widthSVG).toString();
                positionY = ySVG.toString();
              }
            }

            newDataSVG.x = positionX;
            newDataSVG.y = positionY;

            _this.setState({
              dataTooltipSVG: newDataSVG
            });

            var tooltipSVG = document.getElementById('tooltipSVG');

            if (tooltipSVG) {
              tooltipSVG.style.display = 'initial';
            }
          }
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (arrayRegions_1_1 && !arrayRegions_1_1.done && (_a = arrayRegions_1["return"])) _a.call(arrayRegions_1);
        } finally {
          if (e_5) throw e_5.error;
        }
      }
    };

    _this.hideTooltipSVG = function (event) {
      var e_6, _a;

      var idSVG = '';

      if (_this.props.options.baseMap.isUploaded) {
        idSVG = event.target.id;
      } else {
        idSVG = event.target.id.substring(3);
      }

      var arrayRegions = _this.props.options.regionCoordinateSpace;

      try {
        for (var arrayRegions_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayRegions), arrayRegions_2_1 = arrayRegions_2.next(); !arrayRegions_2_1.done; arrayRegions_2_1 = arrayRegions_2.next()) {
          var region = arrayRegions_2_1.value;

          if (region.idSVG === idSVG) {
            var tooltipSVG = document.getElementById('tooltipSVG');
            tooltipSVG.style.display = 'none';
          }
        }
      } catch (e_6_1) {
        e_6 = {
          error: e_6_1
        };
      } finally {
        try {
          if (arrayRegions_2_1 && !arrayRegions_2_1.done && (_a = arrayRegions_2["return"])) _a.call(arrayRegions_2);
        } finally {
          if (e_6) throw e_6.error;
        }
      }
    }; // Tooltip in Svg
    //tooltip_SVG = () => {
    //   const red = document.getElementById('part1');
    //   red?.addEventListener('mouseenter', () => {
    //     red.addEventListener('mouseover', () => {
    //       const tooltip = document.createElement('span');
    //       const texttest = document.createTextNode('rectanglered');
    //       tooltip.appendChild(texttest);
    //       red.appendChild(tooltip).style.position = 'absolute';
    //       red.appendChild(tooltip).style.backgroundColor = '#000000';
    //       red.appendChild(tooltip).style.padding = '8px';
    //       red.appendChild(tooltip).style.float = 'top';
    //       red.appendChild(tooltip).style.color = '#d8d9da';
    //       red.appendChild(tooltip).style.boxShadow = '0 0 2px rgba(0, 0, 0, 0.5)';
    //       red.appendChild(tooltip).style.borderRadius = '2px';
    //       red.appendChild(tooltip).style.fontWeight = '500';
    //       red.addEventListener('mouseout', () => {
    //         red.appendChild(tooltip).style.visibility = 'hidden';
    //       });
    //     });
    //     const yellow = document.getElementById('part2');
    //     yellow?.addEventListener('mouseenter', () => {
    //       yellow.addEventListener('mouseover', () => {
    //         const tooltip = document.createElement('span');
    //         const texttest = document.createTextNode('rectangleyellow');
    //         tooltip.appendChild(texttest);
    //         yellow.appendChild(tooltip).style.position = 'absolute';
    //         yellow.appendChild(tooltip).style.backgroundColor = '#000000';
    //         yellow.appendChild(tooltip).style.padding = '8px';
    //         yellow.appendChild(tooltip).style.float = 'top';
    //         yellow.appendChild(tooltip).style.color = '#d8d9da';
    //         yellow.appendChild(tooltip).style.boxShadow = '0 0 2px rgba(0, 0, 0, 0.5)';
    //         yellow.appendChild(tooltip).style.borderRadius = '2px';
    //         yellow.appendChild(tooltip).style.fontWeight = '500';
    //         yellow.addEventListener('mouseout', () => {
    //           yellow.appendChild(tooltip).style.visibility = 'hidden';
    //         });
    //       });
    //       const rect = document.getElementById('carre');
    //       rect?.addEventListener('mouseenter', () => {
    //         rect.addEventListener('mouseover', () => {
    //           const tooltip = document.createElement('span');
    //           const texttest = document.createTextNode('rectanglegreen');
    //           tooltip.appendChild(texttest);
    //           rect.appendChild(tooltip).style.position = 'absolute';
    //           rect.appendChild(tooltip).style.backgroundColor = '#000000';
    //           rect.appendChild(tooltip).style.padding = '8px';
    //           rect.appendChild(tooltip).style.marginTop = '20%';
    //           rect.appendChild(tooltip).style.color = '#d8d9da';
    //           rect.appendChild(tooltip).style.boxShadow = '0 0 2px rgba(0, 0, 0, 0.5)';
    //           rect.appendChild(tooltip).style.borderRadius = '2px';
    //           rect.appendChild(tooltip).style.fontWeight = '500';
    //           rect.addEventListener('mouseout', () => {
    //             rect.appendChild(tooltip).style.visibility = 'hidden';
    //           });
    //         });
    //       });
    //     });
    //   });
    // };

    /*************************************test create tooltip **********************************************************/


    _this.SVG_PathImage = function (event) {
      var e_7, _a;

      _this.displayAndGetPositionTooltipSVG(event);

      var elementSVG = event.target;
      var parentElementSVG = elementSVG.parentNode;
      var idSVG = '';

      if (_this.props.options.baseMap.isUploaded) {
        idSVG = event.target.id;
      } else {
        idSVG = event.target.id.substring(3);
      }

      var arrayRegion = _this.props.options.regionCoordinateSpace;

      try {
        for (var arrayRegion_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayRegion), arrayRegion_1_1 = arrayRegion_1.next(); !arrayRegion_1_1.done; arrayRegion_1_1 = arrayRegion_1.next()) {
          var region = arrayRegion_1_1.value;

          if (region.idSVG === idSVG) {
            var linkUrl = region.linkURL.followLink;

            if (linkUrl && !document.getElementById('a' + idSVG) && !_this.state.buttonAddIncurvedLinkIsActive && !_this.state.buttonAddLinkIsActive) {
              var aElement = document.createElementNS('http://www.w3.org/2000/svg', 'a');
              aElement.setAttribute('id', 'a' + idSVG);
              aElement.setAttribute('href', linkUrl);
              aElement.appendChild(elementSVG);
              parentElementSVG.appendChild(aElement);
            }
          }
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (arrayRegion_1_1 && !arrayRegion_1_1.done && (_a = arrayRegion_1["return"])) _a.call(arrayRegion_1);
        } finally {
          if (e_7) throw e_7.error;
        }
      } // for (const line of this.props.options.regionCoordinateSpace) {
      //   if (line.mode) {
      //     const id: HTMLElement | null = document.getElementById('oct' + line.idSVG);
      //     if (id) {
      //       // const valueQuery = getResultQuery(line.mainMetric);
      //       const test = document.getElementById('jeSuisLa' + line.id);
      //       if (test) {
      //         test.style.fill = 'red';
      //       } else {
      //         const textObj: TextObject = line.textObj;
      //         if (
      //           !textObj.isTextTooltip ||
      //           (textObj.generateObjectText && textObj.valueGenerateObjectText && !textObj.valueGenerateObjectText.displayObjectInTooltip)
      //         ) {
      //           const title = document.createElementNS('http://www.w3.org/2000/svg', 'title');
      //           title.setAttribute('fill', 'yellow');
      //           title.setAttributeNS('http://www.w3.org/1999/xlink', 'fill', 'yellow');
      //           title.setAttribute('fill', 'red');
      //           title.setAttributeNS('title', 'fill', 'red');
      //           const text = getInfoDisplayRegion(line, this.props);
      //           title.innerHTML = text.tooltip.modeText || '';
      //           // title.textContent = valueQuery ? valueQuery.toString() : '';
      //           title.id = 'jeSuisLa' + line.id;
      //           title.style.fill = 'red';
      //           id.appendChild(title);
      //         }
      //       }
      //     }
      //   }
      // }

    };

    _this.fillCoordinate = function () {
      var options = _this.props.options;
      var styleRegion = {
        position: 'absolute',
        width: options.baseMap.width + 'px',
        height: options.baseMap.height + 'px',
        top: '15%',
        left: 0
      }; // const xMinInitialSpace = parseInt(options.coordinateSpaceInitial.coordinate.xMin, 10);
      // const xMaxInitialSpace = parseInt(options.coordinateSpaceInitial.coordinate.xMax, 10);
      // const yMinInitialSpace = parseInt(options.coordinateSpaceInitial.coordinate.yMin, 10);
      // const yMaxInitialSpace = parseInt(options.coordinateSpaceInitial.coordinate.yMax, 10);

      var mapItems;
      mapItems = options.regionCoordinateSpace.map(function (line, index) {
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_Draw_drawRectangleExtend__WEBPACK_IMPORTED_MODULE_15__["default"], {
          key: 'drawRectangleExtend' + index.toString(),
          uneCoor: line,
          useLimit: false,
          limit: options.coordinateSpaceInitial.coordinate,
          onOptionsChange: _this.props.onOptionsChange,
          options: _this.props.options,
          data: _this.props.data,
          id: 'region' + line.id.toString(),
          //isEnabled={true}
          buttonAddLinkIsActive: _this.state.buttonAddLinkIsActive,
          buttonAddIncurvedLinkIsActive: _this.state.buttonAddIncurvedLinkIsActive,
          widthInitialSpaceDefault: line.widthInitialSpaceDefault,
          heightInitialSpaceDefault: line.heightInitialSpaceDefault
        });
      });
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", {
        style: styleRegion
      }, mapItems);
    };

    _this.getValuesAuxiliaryMetricsRegionSVG = function (region) {
      Object(Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_8__["reqMetricAuxRegion"])(region, _this.props);
      return _this.getValuesAuxiliaryMetrics(region.metrics, region.mainMetric);
    };

    _this.getConvertValueAuxMetrics = function (valueBrut, region) {
      var result = '';
      var decimal = region.textObj.generateAuxiliaryElement.numericFormatElement;
      var roundValue = parseInt(decimal, 10) || 1;
      var unit = region.textObj.generateAuxiliaryElement.unit;

      if (decimal !== '') {
        result = parseFloat(valueBrut).toPrecision(roundValue);
      } else {
        result = valueBrut;
      }

      return result + ' ' + unit;
    };

    _this.displayMetaDataRegionSVG = function (region) {
      var resultHtml = [];
      var arrayMeta = region.meta;

      if (arrayMeta.length !== 0) {
        resultHtml.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: 'titleMetadataRegionSVG' + region.id + region.idSVG,
          style: {
            fontFamily: _this.props.options.display.police,
            fontSize: '10px',
            marginTop: '5px',
            marginBottom: '0px',
            color: 'white'
          }
        }, "Metadata"));
        var indexMeta_1 = 0;
        arrayMeta.forEach(function (meta) {
          var styleContentMetaData = {
            color: meta.obj.colorText,
            backgroundColor: meta.obj.colorBack,
            fontWeight: meta.obj.style.bold ? 'bold' : 'normal',
            fontStyle: meta.obj.style.italic ? 'italic' : 'normal',
            textDecoration: meta.obj.style.underline ? 'underline' : 'none',
            fontFamily: _this.props.options.display.police,
            fontSize: '9px',
            marginLeft: '10px',
            marginBottom: '0px'
          };
          resultHtml.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: indexMeta_1 + 'textMetadataRegionSVG' + region.id,
            style: styleContentMetaData
          }, meta.meta));
          indexMeta_1++;
        });
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        key: 'metadataTooltipRegionSVG' + region.id + region.idSVG,
        id: "metadataTooltipSVG"
      }, resultHtml);
    };

    _this.displayAuxiliaryMetricsRegionSVG = function (region) {
      var e_8, _a;

      var html = [];

      var valuesAuxMetrics = _this.getValuesAuxiliaryMetrics(region.metrics, region.mainMetric);

      var auxMetrics = region.metrics;
      var addColorText = region.textObj.generateAuxiliaryElement.addColorTextElement;
      var addColorBack = region.textObj.generateAuxiliaryElement.addColorBackElement;
      var legend = region.textObj.generateAuxiliaryElement.legendElement;
      var colorText = '';
      var colorBack = '';

      if (addColorText) {
        colorText = region.textObj.generateAuxiliaryElement.colorTextElement;
      } else {
        colorText = 'white';
      }

      if (addColorBack) {
        colorBack = region.textObj.generateAuxiliaryElement.colorBackElement;
      } else {
        colorBack = 'black';
      }

      var styleTitle = {
        fontFamily: _this.props.options.display.police,
        fontSize: '10px',
        marginTop: '5px',
        marginBottom: '0px',
        color: colorText
      };
      var styleTitle2 = {
        fontFamily: _this.props.options.display.police,
        fontSize: '10px',
        marginTop: '5px',
        marginLeft: '5px',
        marginBottom: '0px',
        color: colorText
      };
      var styleContent = {
        fontFamily: _this.props.options.display.police,
        fontSize: '9px',
        marginLeft: '10px',
        marginBottom: '0px',
        color: colorText,
        whiteSpace: 'nowrap'
      };

      if (auxMetrics.length > 0) {
        html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: region.id + 'contentToolTip1',
          style: styleTitle
        }, "Auxiliary Metric"));
        html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: region.idSVG + 'contentToolTip2',
          style: styleTitle
        }, legend));
        var index = 1;

        try {
          for (var auxMetrics_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(auxMetrics), auxMetrics_1_1 = auxMetrics_1.next(); !auxMetrics_1_1.done; auxMetrics_1_1 = auxMetrics_1.next()) {
            var metric = auxMetrics_1_1.value;

            var valueAuxMetric = _this.getConvertValueAuxMetrics(valuesAuxMetrics[index - 1], region);

            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.idSVG + 'contentToolTip3',
              style: styleTitle2
            }, "+ Metric ", index));
            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.idSVG + 'contentToolTip4',
              style: styleContent
            }, "- Value : ", valueAuxMetric));
            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.idSVG + 'contentToolTip5',
              style: styleContent
            }, "- Key : ", metric.key));
            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.idSVG + 'contentToolTip6',
              style: styleContent
            }, "- KeyValue : ", metric.keyValue));
            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.idSVG + 'contentToolTip7',
              style: styleContent
            }, "- Type : ", metric.manageValue));
            index++;
          }
        } catch (e_8_1) {
          e_8 = {
            error: e_8_1
          };
        } finally {
          try {
            if (auxMetrics_1_1 && !auxMetrics_1_1.done && (_a = auxMetrics_1["return"])) _a.call(auxMetrics_1);
          } finally {
            if (e_8) throw e_8.error;
          }
        }
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        id: "auxMetTooltipSVG",
        style: {
          backgroundColor: colorBack
        }
      }, html);
    };

    _this.defineMainMetric = function (region) {
      var result = '';
      var legend = region.textObj.valueGenerateObjectText.legendElement;
      var unit = region.textObj.valueGenerateObjectText.unit;
      var decimal = region.textObj.valueGenerateObjectText.numericFormatElement; //const roundMetrics: number = parseInt(decimal, 10) || 1;

      var roundValue = parseInt(decimal, 10) || 1;
      var mainMetric = Object(Functions_getResultQuery__WEBPACK_IMPORTED_MODULE_9__["getResultQuery"])(region.mainMetric) || 0;

      if (decimal !== '') {
        result = mainMetric.toPrecision(roundValue) + ' ' + unit;
      } else {
        result = mainMetric + ' ' + unit;
      }

      if (legend) {
        result = legend + ': ' + result;
      }

      return result;
    };

    _this.defineTextDecoration = function (region) {
      var mainStyle = region.textObj.style;
      var result = '';

      if (mainStyle.underline) {
        result = 'underline';
      } else {
        if (_this.props.options.display.style.underline) {
          result = 'underline';
        } else {
          result = 'none';
        }
      }

      return result;
    };

    _this.defineFontStyle = function (region) {
      var mainStyle = region.textObj.style;
      var result = '';

      if (mainStyle.italic) {
        result = 'italic';
      } else {
        if (_this.props.options.display.style.italic) {
          result = 'italic';
        } else {
          result = 'normal';
        }
      }

      return result;
    };

    _this.defineFontWeight = function (region) {
      var mainStyle = region.textObj.style;
      var result = '';

      if (mainStyle.bold) {
        result = 'bold';
      } else {
        if (_this.props.options.display.style.bold) {
          result = 'bold';
        } else {
          result = 'normal';
        }
      }

      return result;
    }; // Close Legend


    _this.stopDisplayLegend = function () {
      _this.closeLegend();

      _this.setState({
        hiddenLegend: true
      });
    };

    _this.htmlTooltipRegionSVG = function () {
      var e_9, _a;

      var regionSVG = Object(Functions_initRegionCoordinateSpace__WEBPACK_IMPORTED_MODULE_16__["initRegionCoordinateSpace"])(1000);

      try {
        for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(_this.props.options.regionCoordinateSpace), _c = _b.next(); !_c.done; _c = _b.next()) {
          var region = _c.value;

          if (region.idSVG === _this.state.dataTooltipSVG.idSVG) {
            regionSVG = region;
          }
        }
      } catch (e_9_1) {
        e_9 = {
          error: e_9_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
        } finally {
          if (e_9) throw e_9.error;
        }
      }

      var styleMainTooltipSVG = {
        display: 'none',
        position: 'absolute',
        top: parseInt(_this.state.dataTooltipSVG.y, 10),
        left: parseInt(_this.state.dataTooltipSVG.x, 10),
        width: '150px',
        minHeight: '100px',
        zIndex: 9999,
        //width: 'auto',
        border: '1px solid black',
        borderRadius: '5px',
        backgroundColor: 'black',
        padding: 5
      };
      var styleLabelTooltipSVG = {
        textDecoration: _this.defineTextDecoration(regionSVG),
        fontStyle: _this.defineFontStyle(regionSVG),
        fontWeight: _this.defineFontWeight(regionSVG),
        fontSize: _this.props.options.display.size,
        fontFamily: _this.props.options.display.police,
        color: regionSVG.textObj.colorText,
        backgroundColor: regionSVG.textObj.colorBack
      };
      var styleMainMetricTooltipSVG = {
        textDecoration: _this.defineTextDecoration(regionSVG),
        fontStyle: _this.defineFontStyle(regionSVG),
        fontWeight: _this.defineFontWeight(regionSVG),
        color: regionSVG.textObj.valueGenerateObjectText.addColorTextElement ? regionSVG.textObj.valueGenerateObjectText.colorTextElement : 'white',
        backgroundColor: regionSVG.textObj.valueGenerateObjectText.addColorBackElement ? regionSVG.textObj.valueGenerateObjectText.colorBackElement : 'black',
        fontSize: _this.props.options.display.size,
        fontFamily: _this.props.options.display.police,
        overflow: 'visible'
      };
      var styleElementTooltipSVG = {
        color: 'white',
        fontSize: _this.props.options.display.size,
        fontFamily: _this.props.options.display.police
      };
      var html = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);

      if (regionSVG.idSVG) {
        html = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "tooltipSVG",
          style: styleMainTooltipSVG,
          onMouseOver: function onMouseOver(event) {
            var tooltipSVG = document.getElementById('tooltipSVG');

            if (event.target.id === 'tooltipSVG' || event.target.parentElement.id === 'tooltipSVG' || event.target.id === 'auxMetTooltipSVG' || event.target.parentElement.id === 'auxMetTooltipSVG' || event.target.id === 'metadataTooltipSVG' || event.target.parentElement.id === 'metadataTooltipSVG') {
              tooltipSVG.style.display = 'initial';
            }
          },
          onMouseOut: function onMouseOut(event) {
            var tooltipSVG = document.getElementById('tooltipSVG');

            if (event.target.id !== 'tooltipSVG' || event.target.parentElement.id !== 'tooltipSVG' || event.target.id !== 'auxMetTooltipSVG' || event.target.parentElement.id !== 'metadataTooltipSVG' || event.target.id !== 'metadataTooltipSVG' || event.target.parentElement.id !== 'auxMetTooltipSVG') {
              tooltipSVG.style.display = 'none';
            }
          }
        }, regionSVG.textObj.isTextTooltip && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          style: styleLabelTooltipSVG
        }, regionSVG.label), regionSVG.textObj.generateObjectText && regionSVG.textObj.valueGenerateObjectText.displayObjectInTooltip && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          style: styleMainMetricTooltipSVG
        }, _this.defineMainMetric(regionSVG)), regionSVG.textObj.generateAuxiliaryElement.displayObjectInTooltip && _this.displayAuxiliaryMetricsRegionSVG(regionSVG), _this.displayMetaDataRegionSVG(regionSVG), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
          style: styleElementTooltipSVG,
          href: regionSVG.linkURL.hoveringTooltipLink
        }, regionSVG.linkURL.hoveringTooltipText));
      } // if no data in tooltipRegionSVG => not display


      if (!regionSVG.textObj.isTextTooltip && (!regionSVG.textObj.valueGenerateObjectText.displayObjectInTooltip || regionSVG.textObj.valueGenerateObjectText.displayObjectInTooltip && regionSVG.mainMetric.returnQuery && regionSVG.mainMetric.returnQuery.length === 0) && regionSVG.metrics.length === 0 && regionSVG.meta.length === 0 && regionSVG.linkURL.hoveringTooltipText === '') {
        var tooltipSVG = document.getElementById('tooltipSVG');

        if (tooltipSVG) {
          tooltipSVG.style.display = 'none';
        }
      }

      return html;
    };

    _this.state = {
      valueButton: '',
      buttonManage: [false, false, false, false, false, false],
      numberClickDiv: 0,
      allActionButton: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null),
      nbClickButton: false,
      legend: {
        hiddenLegend: true,
        x: 0,
        y: 0
      },
      svg: '',
      //displayRegion: <div></div>,
      buttonAddLinkIsActive: false,
      buttonAddIncurvedLinkIsActive: false,
      dataTooltipSVG: {
        idSVG: '',
        x: '0',
        y: '0'
      },
      hiddenLegend: false,
      currentImage: ''
    };
    return _this;
  }
  /**
   * to do
   */


  SimplePanel.prototype.displayPoint = function () {
    var _this = this;

    var mapItems = [];
    var newArrayPoint = this.props.options.arrayPoints;
    newArrayPoint.forEach(function (line) {
      var valueMainMetric = _this.getValuesMainMetricPoint(line).toString();

      _this.updatePositionOrientedLink(line);

      var valuesAuxiliaryMetrics = _this.getValuesAuxiliaryMetricsPoint(line);

      var item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_components_Draw_drawPoint__WEBPACK_IMPORTED_MODULE_12__["default"], {
        key: 'point' + line.id.toString(),
        drawGraphicMarker: line.drawGraphicMarker,
        shape: line.shape,
        size: line.sizeWidth,
        positionShapeX: line.positionShapeX,
        positionShapeY: line.positionShapeY,
        label: line.label,
        widthImage: parseInt(_this.props.options.baseMap.width, 10),
        heightImage: parseInt(_this.props.options.baseMap.height, 10),
        police: _this.props.options.display.police,
        sizePolice: _this.props.options.display.size,
        color: line.color,
        idPoint: 'point' + line.id.toString(),
        name: line.name,
        options: _this.props.options,
        onOptionsChange: _this.props.onOptionsChange,
        data: _this.props.data,
        textObject: line.textObj,
        seuil: line.lowerLimit,
        valueMainMetric: valueMainMetric,
        refMainMetric: line.mainMetric.refId || '',
        associateOrientedLinkIn: line.associateOrientedLinksIn,
        associateOrientedLinkOut: line.associateOrientedLinksOut,
        labelPositionX: line.positionParameter.labelAPositionX,
        labelPositionY: line.positionParameter.labelAPositionY,
        tooltipPosition: line.positionParameter.tooltipPositionA,
        auxiliaryMetrics: line.metrics,
        valuesAuxiliaryMetrics: valuesAuxiliaryMetrics,
        linkUrl: line.linkURL,
        buttonAddLinkIsActive: _this.state.buttonAddLinkIsActive,
        buttonAddIncurvedLinkIsActive: _this.state.buttonAddIncurvedLinkIsActive,
        widthInitialSpaceDefault: line.widthInitialSpaceDefault,
        heightInitialSpaceDefault: line.heightInitialSpaceDefault,
        positionXDefault: line.positionXDefault,
        positionYDefault: line.positionYDefault,
        metaData: line.meta,
        colorMode: line.colorMode,
        traceBack: line.traceBack,
        traceBorder: line.traceBorder
      });
      mapItems.push(item);
    });
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, mapItems);
  };
  /**
   * to do
   */


  SimplePanel.prototype.displayOrientedLink = function () {
    var _this = this;

    var arrayOrientedLink = this.props.options.arrayOrientedLinks;
    var mapItems = [];
    var item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
    arrayOrientedLink.forEach(function (orientedLink) {
      console.log(orientedLink);

      var valueMainMetricA = _this.getValuesMainMetricOrientedLink(orientedLink).toString();

      var valueMainMetricB = _this.getValuesMainMetricOrientedLinkB(orientedLink).toString();

      _this.getValuesMainMetricOrientedLinkB(orientedLink);

      var valuesAuxiliaryMetrics = _this.getValuesAuxiliaryMetricsOrientedLink(orientedLink);

      var valuesAuxiliaryMetricsB = _this.getValuesAuxiliaryMetricsOrientedLinkB(orientedLink);

      var pointAX = _this.defineValueX(orientedLink, false, true);

      var pointDefaultAX = _this.defineValueX(orientedLink, true, true);

      var pointBX = _this.defineValueX(orientedLink, false, false);

      var pointDefaultBX = _this.defineValueX(orientedLink, true, false);

      var pointAY = _this.defineValueY(orientedLink, false, true);

      var pointDefaultAY = _this.defineValueY(orientedLink, true, true);

      var pointBY = _this.defineValueY(orientedLink, false, false);

      var pointDefaultBY = _this.defineValueY(orientedLink, true, false);

      item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_components_Draw_drawOrientedLink__WEBPACK_IMPORTED_MODULE_13__["default"], {
        key: 'orientedLink' + orientedLink.id.toString(),
        id: orientedLink.id.toString(),
        orientationLink: orientedLink.orientationLink.value || '',
        pointAPositionX: pointAX,
        pointAPositionY: pointAY,
        pointBPositionX: pointBX,
        pointBPositionY: pointBY,
        colorA: orientedLink.colorCoordinateA,
        colorB: orientedLink.colorCoordinateB,
        associatePointIn: orientedLink.pointIn,
        associatePointOut: orientedLink.pointOut,
        associateRegionIn: orientedLink.regionIn,
        associateRegionOut: orientedLink.regionOut,
        widthImage: parseInt(_this.props.options.baseMap.width, 10),
        heightImage: parseInt(_this.props.options.baseMap.height, 10),
        label: orientedLink.label,
        name: orientedLink.name,
        valueMainMetricA: valueMainMetricA,
        valueMainMetricB: valueMainMetricB,
        refMainMetricA: orientedLink.mainMetric.refId || '',
        refMainMetricB: orientedLink.mainMetricB.refId || '',
        options: _this.props.options,
        onOptionsChange: _this.props.onOptionsChange,
        data: _this.props.data,
        textObject: orientedLink.textObj,
        seuil: orientedLink.lowerLimit,
        traceBorder: orientedLink.traceBorder,
        traceBack: orientedLink.traceBack,
        labelAPositionX: orientedLink.positionParameter.labelAPositionX,
        labelAPositionY: orientedLink.positionParameter.labelAPositionY,
        labelBPositionX: orientedLink.positionParameter.labelBPositionX,
        labelBPositionY: orientedLink.positionParameter.labelBPositionY,
        tooltipPositionA: orientedLink.positionParameter.tooltipPositionA,
        tooltipPositionB: orientedLink.positionParameter.tooltipPositionB,
        zIndex: orientedLink.zIndex,
        pointCPositionX: orientedLink.pointCPositionX,
        pointCPositionY: orientedLink.pointCPositionY,
        isIncurved: orientedLink.isIncurved,
        auxiliaryMetrics: orientedLink.metrics,
        auxiliaryMetricsB: orientedLink.metricsB,
        valuesAuxiliaryMetrics: valuesAuxiliaryMetrics,
        valuesAuxiliaryMetricsB: valuesAuxiliaryMetricsB,
        police: _this.props.options.display.police,
        sizePolice: _this.props.options.display.size,
        linkUrl: orientedLink.linkURL,
        size: orientedLink.size,
        widthInitialSpaceDefault: orientedLink.widthInitialSpaceDefault,
        heightInitialSpaceDefault: orientedLink.heightInitialSpaceDefault,
        positionXADefault: pointDefaultAX,
        positionYADefault: pointDefaultAY,
        positionXBDefault: pointDefaultBX,
        positionYBDefault: pointDefaultBY,
        positionXCDefault: orientedLink.pointCPositionXDefault,
        positionYCDefault: orientedLink.pointCPositionYDefault,
        metaData: orientedLink.meta,
        colorMode: orientedLink.colorMode
      });
      mapItems.push(item);
    });
    this.updateAssociateOrientedLinkInToPoint();
    this.updateAssociateOrientedLinkOutToPoint();
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, mapItems);
  };
  /**
   * to do
   */


  SimplePanel.prototype.getValuesMainMetricPoint = function (point) {
    Object(Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_8__["reqMetricPoint"])(point, this.props);
    var result = 0;
    result = Object(Functions_getResultQuery__WEBPACK_IMPORTED_MODULE_9__["getResultQuery"])(point.mainMetric) || NaN;
    return result;
  };

  SimplePanel.prototype.getValuesMainMetricOrientedLink = function (orientedLink) {
    Object(Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_8__["reqMetricOrientedLink"])(orientedLink, this.props);
    var result = 0;
    result = Object(Functions_getResultQuery__WEBPACK_IMPORTED_MODULE_9__["getResultQuery"])(orientedLink.mainMetric) || NaN;
    return result;
  };

  SimplePanel.prototype.getValuesMainMetricOrientedLinkB = function (orientedLink) {
    Object(Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_8__["reqMetricOrientedLink"])(orientedLink, this.props);
    var result = 0;
    result = Object(Functions_getResultQuery__WEBPACK_IMPORTED_MODULE_9__["getResultQuery"])(orientedLink.mainMetricB) || NaN;
    return result;
  };

  SimplePanel.prototype.componentDidUpdate = function (prevProps) {
    if (this.state.currentImage !== this.props.options.baseMap.image) {
      this.componentDidMount();
    } //Set width initialSpace if new width in display


    if (this.props.options.baseMap.width !== this.props.options.coordinateSpaceInitial.coordinate.xMax && !this.props.options.updateOnlyInitialSpace) {
      this.props.options.coordinateSpaceInitial.coordinate.xMax = this.props.options.baseMap.width || '0';
    } //Set height initialSpace if new height in display


    if (this.props.options.baseMap.height !== this.props.options.coordinateSpaceInitial.coordinate.yMax && !this.props.options.updateOnlyInitialSpace) {
      this.props.options.coordinateSpaceInitial.coordinate.yMax = this.props.options.baseMap.height || '0';
    } // if (this.props.options.baseMap.image !== prevProps.options.baseMap.image) {
    //   this.componentDidMount();
    // }


    if (this.props !== prevProps) {
      this.chargeRegion();
    }
  };
  /*************************************** create link regionbyid**************************************** */

  /*************************************test create tooltip **********************************************************/
  //https://raw.githubusercontent.com/atosorigin/grafana-weathermap-panel/master/docs/resource/demo01-background.svg

  /** render */


  SimplePanel.prototype.render = function () {
    var _this = this;

    var styleBackground;

    if (this.props.options.baseMap.modeSVG) {
      styleBackground = {
        height: this.props.options.baseMap.height + 'px',
        width: this.props.options.baseMap.width + 'px'
      };
    } else {
      if (this.props.options.baseMap.image.split(',')[0] === 'base64') {
        styleBackground = {
          position: 'absolute',
          textAlign: 'center',
          backgroundRepeat: 'no-repeat',
          backgroundImage: 'url(data:image/jpeg;' + this.props.options.baseMap.image + ')',
          backgroundSize: this.props.options.baseMap.width + 'px' + ' ' + this.props.options.baseMap.height + 'px',
          height: this.props.options.baseMap.height + 'px',
          width: this.props.options.baseMap.width + 'px',
          opacity: 0.8,
          zIndex: 4
        };
      } else {
        styleBackground = {
          position: 'absolute',
          textAlign: 'center',
          backgroundRepeat: 'no-repeat',
          backgroundImage: 'url(' + this.props.options.baseMap.image + ')',
          backgroundSize: this.props.options.baseMap.width + 'px' + ' ' + this.props.options.baseMap.height + 'px',
          height: this.props.options.baseMap.height + 'px',
          width: this.props.options.baseMap.width + 'px',
          opacity: 0.8,
          zIndex: 4
        };
      }
    }

    var styleSVG = {
      position: 'absolute',
      zIndex: 2
    };
    var styleSVG_2 = {
      position: 'absolute',
      textAlign: 'center',
      backgroundRepeat: 'no-repeat',
      height: this.props.options.baseMap.height + 'px',
      width: this.props.options.baseMap.width + 'px',
      opacity: 0,
      zIndex: 2
    };
    var defaultStyle = {
      height: '100vh',
      width: '100vw',
      fontFamily: this.props.options.display.police,
      fontSize: this.props.options.display.size,
      fontStyle: this.props.options.display.style.italic ? 'italic' : 'normal',
      fontWeight: this.props.options.display.style.bold ? 'bold' : 'normal',
      textDecoration: this.props.options.display.style.underline ? 'underline' : 'none'
    };
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["CustomScrollbar"], {
      autoHide: false,
      hideHorizontalTrack: false,
      autoHeightMax: "100%"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      id: "zoom",
      style: {
        display: 'inline-flex',
        marginTop: '-7px',
        marginLeft: '86%'
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        textAlign: 'left',
        position: 'relative',
        display: 'inline-grid'
      }
    }, this.props.options.displayButton && this.state.allActionButton), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("section", {
      style: defaultStyle,
      onClick: this.positionLegend
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.buttonManage[0] && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        width: '200px',
        position: 'absolute',
        overflowY: 'scroll',
        marginLeft: '20%',
        marginRight: '20%',
        marginTop: '20%',
        marginBottom: '20%',
        border: '5px solid aliceblue',
        height: '40%'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", null, "hello"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Modal"], {
      title: "Add Region",
      onDismiss: this.addNode,
      onClickBackdrop: this.addNode,
      isOpen: this.state.nbClickButton
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_CoordinateSpace_addCoordinate__WEBPACK_IMPORTED_MODULE_10__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      isRegion: true,
      isPoint: false,
      isLink: false
    }))), !this.state.hiddenLegend && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_components_legend__WEBPACK_IMPORTED_MODULE_14__["default"], Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data
    }, this.props.options.legend, {
      callBack: this.handleClick,
      callBackClose: this.stopDisplayLegend
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      onClick: this.callMethod
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      onClick: this.getCoordinates,
      id: "coordinateSpaces",
      style: styleBackground
    }, this.defineLimit(), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "tooltip"
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      id: "mainPanel",
      style: {
        position: 'absolute',
        zIndex: 1
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: styleSVG,
      // onMouseOver={this.SVG_PathImage}
      dangerouslySetInnerHTML: {
        __html: this.state.svg
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      id: "Intent",
      style: styleSVG_2,
      onMouseOver: this.SVG_PathImage,
      // && this.CreateLinkArea
      // && this.displayTooltipSVG
      // onMouseOver={event => {
      //   this.displayTooltipSVG(event);
      // }}
      onMouseOut: function onMouseOut(event) {
        _this.hideTooltipSVG(event);
      },
      dangerouslySetInnerHTML: {
        __html: this.props.options.baseMap.layerImage
      }
    }), this.htmlTooltipRegionSVG(), this.displayOrientedLink(), this.fillCoordinate(), this.displayPoint()))))));
  };

  return SimplePanel;
}(react__WEBPACK_IMPORTED_MODULE_1__["PureComponent"]);



/***/ }),

/***/ "./components/CoordinateSpace/addCoordinate.tsx":
/*!******************************************************!*\
  !*** ./components/CoordinateSpace/addCoordinate.tsx ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var Functions_initRegionCoordinateSpace__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! Functions/initRegionCoordinateSpace */ "./Functions/initRegionCoordinateSpace.tsx");
/* harmony import */ var Functions_initPoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Functions/initPoint */ "./Functions/initPoint.tsx");
/* harmony import */ var Functions_initOrientedLink__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Functions/initOrientedLink */ "./Functions/initOrientedLink.tsx");
/* harmony import */ var components_CoordinateSpace_coordinateSpace__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! components/CoordinateSpace/coordinateSpace */ "./components/CoordinateSpace/coordinateSpace.tsx");
/* harmony import */ var _point_point__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./point/point */ "./components/CoordinateSpace/point/point.tsx");
/* harmony import */ var _orientedLink_orientedLink__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./orientedLink/orientedLink */ "./components/CoordinateSpace/orientedLink/orientedLink.tsx");








/** Add new coordinate space */

var AddCoordinate = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(AddCoordinate, _super);

  function AddCoordinate(props) {
    var _this = _super.call(this, props) || this;
    /** search new id for espacecoordinneesclass */


    _this.searchNewId = function (allCoordinateSpace) {
      var e_1, _a;

      var id = -1;

      try {
        for (var allCoordinateSpace_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(allCoordinateSpace), allCoordinateSpace_1_1 = allCoordinateSpace_1.next(); !allCoordinateSpace_1_1.done; allCoordinateSpace_1_1 = allCoordinateSpace_1.next()) {
          var line = allCoordinateSpace_1_1.value;

          if (line.id > id) {
            id = line.id;
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (allCoordinateSpace_1_1 && !allCoordinateSpace_1_1.done && (_a = allCoordinateSpace_1["return"])) _a.call(allCoordinateSpace_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      id += 1;
      return id;
    };

    _this.defineIdPoint = function () {
      var id = 1;

      if (_this.props.options.arrayPoints.length === 0) {
        return id;
      } else {
        id = _this.props.options.arrayPoints[_this.props.options.arrayPoints.length - 1].id + 1;
        return id;
      }
    };

    _this.defineIdOrientedLink = function () {
      var id = 1;

      if (_this.props.options.arrayOrientedLinks.length === 0) {
        return id;
      } else {
        id = _this.props.options.arrayOrientedLinks[_this.props.options.arrayOrientedLinks.length - 1].id + 1;
        return id;
      }
    };

    _this.lastId = function () {
      var e_2, _a;

      var allRegion = _this.props.options.regionCoordinateSpace;
      var id = 0;

      try {
        for (var allRegion_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(allRegion), allRegion_1_1 = allRegion_1.next(); !allRegion_1_1.done; allRegion_1_1 = allRegion_1.next()) {
          var line = allRegion_1_1.value;

          if (line.id > id) {
            id = line.id;
          }
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (allRegion_1_1 && !allRegion_1_1.done && (_a = allRegion_1["return"])) _a.call(allRegion_1);
        } finally {
          if (e_2) throw e_2.error;
        }
      }

      return id;
    };
    /** call init class for coordinate state */


    _this.componentDidMount = function () {
      if (_this.props.isRegion) {
        _this.setState({
          coordinate: Object(Functions_initRegionCoordinateSpace__WEBPACK_IMPORTED_MODULE_2__["initRegionCoordinateSpace"])(_this.lastId())
        });
      } else if (_this.props.isPoint) {
        var id = _this.defineIdPoint();

        _this.setState({
          point: Object(Functions_initPoint__WEBPACK_IMPORTED_MODULE_3__["initPoint"])(id)
        });
      } else if (_this.props.isLink) {
        var id = _this.defineIdOrientedLink();

        var newZIndex = _this.props.options.zIndexOrientedLink + 1;

        _this.setState({
          orientedLink: Object(Functions_initOrientedLink__WEBPACK_IMPORTED_MODULE_4__["initOrientedLink"])(id, newZIndex)
        });

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          zIndexOrientedLink: newZIndex
        }));
      }
    };
    /** update onOptionsChange */


    _this.setAsyncOption = function (newIdx) {
      return Promise.resolve('Success').then(function () {
        if (_this.props.isRegion) {
          _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
            indexRegion: newIdx
          }));
        } else if (_this.props.isPoint) {
          _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
            indexPoint: newIdx
          }));
        } else if (_this.props.isLink) {
          _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
            indexOrientedLink: newIdx
          }));
        }
      });
    };
    /** send data of region for parent */


    _this.callBack = function (id, newCoordinate) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var allCoordinateSpace;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!newCoordinate) return [3
              /*break*/
              , 2];
              allCoordinateSpace = this.props.options.regionCoordinateSpace.slice();
              return [4
              /*yield*/
              , this.setAsyncOption(newCoordinate.id)];

            case 1:
              _a.sent();

              this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, this.props.options), {
                regionCoordinateSpace: allCoordinateSpace.concat(newCoordinate)
              }));

              if (this.props.returnEditMode) {
                this.props.returnEditMode();
              }

              _a.label = 2;

            case 2:
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** send data of point for parent */


    _this.callBackPoint = function (id, newCoordinate) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var allCoordinateSpace;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!newCoordinate) return [3
              /*break*/
              , 2];
              allCoordinateSpace = this.props.options.arrayPoints.slice();
              return [4
              /*yield*/
              , this.setAsyncOption(newCoordinate.id)];

            case 1:
              _a.sent();

              this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, this.props.options), {
                arrayPoints: allCoordinateSpace.concat(newCoordinate)
              }));

              if (this.props.returnEditMode) {
                this.props.returnEditMode();
              }

              _a.label = 2;

            case 2:
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** send data of orientedLink for parent */


    _this.callBackOrientedLink = function (id, newCoordinate) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var allCoordinateSpace;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!newCoordinate) return [3
              /*break*/
              , 2];
              allCoordinateSpace = this.props.options.arrayOrientedLinks.slice();
              return [4
              /*yield*/
              , this.setAsyncOption(newCoordinate.id)];

            case 1:
              _a.sent();

              this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, this.props.options), {
                arrayOrientedLinks: allCoordinateSpace.concat(newCoordinate)
              }));

              if (this.props.returnEditMode) {
                this.props.returnEditMode();
              }

              _a.label = 2;

            case 2:
              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.state = {
      coordinate: undefined,
      point: undefined,
      orientedLink: undefined
    };
    return _this;
  }
  /** result */


  AddCoordinate.prototype.render = function () {
    if (this.props.isRegion) {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.coordinate && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_CoordinateSpace_coordinateSpace__WEBPACK_IMPORTED_MODULE_5__["default"], {
        options: this.props.options,
        onOptionsChange: this.props.onOptionsChange,
        data: this.props.data,
        coordinate: this.state.coordinate,
        callBackToParent: this.callBack,
        isAddCoordinate: true
      }));
    } else if (this.props.isPoint) {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.point && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_point_point__WEBPACK_IMPORTED_MODULE_6__["default"], {
        options: this.props.options,
        onOptionsChange: this.props.onOptionsChange,
        data: this.props.data,
        point: this.state.point,
        callBackToParent: this.callBackPoint,
        isAddPoint: true
      }));
    } else if (this.props.isLink) {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.orientedLink && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_orientedLink_orientedLink__WEBPACK_IMPORTED_MODULE_7__["default"], {
        options: this.props.options,
        onOptionsChange: this.props.onOptionsChange,
        data: this.props.data,
        orientedLink: this.state.orientedLink,
        callBackToParent: this.callBackOrientedLink,
        isAddLink: true
      }));
    } else {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
    }
  };

  return AddCoordinate;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (AddCoordinate);

/***/ }),

/***/ "./components/CoordinateSpace/coordinateSpace.tsx":
/*!********************************************************!*\
  !*** ./components/CoordinateSpace/coordinateSpace.tsx ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var Models_ArrayInputClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Models/ArrayInputClass */ "./Models/ArrayInputClass.tsx");
/* harmony import */ var Functions_Input_inputButton__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Functions/Input/inputButton */ "./Functions/Input/inputButton.tsx");
/* harmony import */ var Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Functions/Input/inputText */ "./Functions/Input/inputText.tsx");
/* harmony import */ var Functions_CreateInput_createInputCoor__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! Functions/CreateInput/createInputCoor */ "./Functions/CreateInput/createInputCoor.tsx");
/* harmony import */ var Functions_EditParameter_editGoodParameter__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! Functions/EditParameter/editGoodParameter */ "./Functions/EditParameter/editGoodParameter.tsx");
/* harmony import */ var Functions_searchIDLimit__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! Functions/searchIDLimit */ "./Functions/searchIDLimit.tsx");
/* harmony import */ var Functions_initRegionCoordinateSpace__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! Functions/initRegionCoordinateSpace */ "./Functions/initRegionCoordinateSpace.tsx");
/* harmony import */ var components_Parametrage_manageLowerLimit__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! components/Parametrage/manageLowerLimit */ "./components/Parametrage/manageLowerLimit.tsx");
/* harmony import */ var _manageQuery__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./manageQuery */ "./components/CoordinateSpace/manageQuery.tsx");
/* harmony import */ var components_Parametrage_parametresGeneriques__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! components/Parametrage/parametresGeneriques */ "./components/Parametrage/parametresGeneriques.tsx");
/* harmony import */ var style_CoordinateSpace_css__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! style/CoordinateSpace.css */ "./style/CoordinateSpace.css");
/* harmony import */ var style_CoordinateSpace_css__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(style_CoordinateSpace_css__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var _manageAuxiliaryQuery__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./manageAuxiliaryQuery */ "./components/CoordinateSpace/manageAuxiliaryQuery.tsx");
/* harmony import */ var _components_CoordinateSpace_manageMetada__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../../components/CoordinateSpace/manageMetada */ "./components/CoordinateSpace/manageMetada.tsx");
/* harmony import */ var components_Parametrage_positionParameters__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! components/Parametrage/positionParameters */ "./components/Parametrage/positionParameters.tsx");

















/**
 * component edit space coordinate
 */

var CoordinateSpace = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CoordinateSpace, _super);

  function CoordinateSpace(props) {
    var _this = _super.call(this, props) || this;
    /** update state with promise */


    _this.setStateAsyncArrayCoor = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /** update state with promise */


    _this.setStateAsyncArrayInput = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /** add inputs for a new coordiante */


    _this.addInput = function (id) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncArrayInput({
                arrayInput: this.state.arrayInput.concat([new Models_ArrayInputClass__WEBPACK_IMPORTED_MODULE_3__["ArrayInputClass"](id, Object(Functions_CreateInput_createInputCoor__WEBPACK_IMPORTED_MODULE_6__["createInputCoor"])(id, false))])
              })];

            case 1:
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * Delete array input and value
     * @param {event} event event click delete button
     */


    _this.deleteOwnInput = function () {
      var del = confirm('Delete "' + _this.state.arrayCoor.label + '" ?'); // alert(del);

      if (del) {
        _this.props.callBackToParent(_this.state.arrayCoor.id, undefined);
      } // update by default SVG style after delete regionSVG


      if (_this.state.arrayCoor.idSVG) {
        var htmlRegionSVG = document.getElementById(_this.state.arrayCoor.idSVG);

        if (htmlRegionSVG) {
          htmlRegionSVG.style.fill = 'white';
          htmlRegionSVG.style.fillOpacity = '';
          htmlRegionSVG.style.stroke = 'white';
          htmlRegionSVG.style.strokeOpacity = '';
          htmlRegionSVG.style.strokeWidth = '';
        }
      }
    };
    /** edit value for selectedDefaultValue and edit idSVG arrayCoor */


    _this.onChangeSelectSVG = function (value) {
      // const newId: SelectableValue<string> = value;
      var coordinate = _this.state.arrayCoor;
      coordinate.idSVG = value.value || '';

      _this.setState({
        selectedDefaultSVG: value,
        arrayCoor: coordinate
      });

      if (_this.props.isAddCoordinate === false) {
        _this.callBack();
      }
    };
    /** call function to return arrayCoor a SimpleEditor */


    _this.callBack = function () {
      // Define defaultCoor + defaultWidth + default height to creation of region
      var newArrayCoor = _this.state.arrayCoor; // newArrayCoor.coordsDefault = {
      //   xMin: this.state.arrayCoor.coords.xMin,
      //   xMax: this.state.arrayCoor.coords.xMax,
      //   yMin: this.state.arrayCoor.coords.yMin,
      //   yMax: this.state.arrayCoor.coords.yMax,
      // };

      newArrayCoor.widthInitialSpaceDefault = (parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMax, 10) - parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMin, 10)).toString();
      newArrayCoor.heightInitialSpaceDefault = (parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMax, 10) - parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMin, 10)).toString();

      _this.setState({
        arrayCoor: newArrayCoor
      });

      var waitAlert = 3000;

      if (_this.state.arrayCoor.label === '') {
        _this.setState({
          severityAlert: 'error',
          titleAlert: 'Error: label is empty',
          hiddenAlert: false
        });

        setTimeout(function () {
          _this.setState({
            hiddenAlert: true
          });
        }, waitAlert);
      } else {
        _this.props.callBackToParent(_this.state.arrayCoor.id, _this.state.arrayCoor);

        _this.setState({
          severityAlert: 'success',
          titleAlert: 'Save',
          hiddenAlert: false
        });

        if (!_this.props.isAddCoordinate) {
          setTimeout(function () {
            _this.setState({
              hiddenAlert: true
            });
          }, waitAlert);
        }
      }
    };
    /** save data in parent */


    _this.callBackToOther = function (linkUrl, textObj) {
      var oldCoor = _this.state.arrayCoor; // if (followLink || followLink === '') {
      //   oldCoor.linkURL.followLink = followLink;
      // }
      // if (hoveringTooltipLink || hoveringTooltipLink === '') {
      //   oldCoor.linkURL.hoveringTooltipLink = hoveringTooltipLink;
      // }
      // if (hoveringTooltipText || hoveringTooltipText === '') {
      //   oldCoor.linkURL.hoveringTooltipText = hoveringTooltipText;
      // }

      if (linkUrl) {
        oldCoor.linkURL.followLink = linkUrl.followLink;
        oldCoor.linkURL.hoveringTooltipLink = linkUrl.hoveringTooltipLink;
        oldCoor.linkURL.hoveringTooltipText = linkUrl.hoveringTooltipText;
      }

      if (textObj) {
        oldCoor.textObj = textObj;
      }

      _this.setState({
        arrayCoor: oldCoor
      });

      if (_this.props.isAddCoordinate === false) {
        _this.callBack();
      }
    };
    /** update lower limit */


    _this.callBackManageLowerLimit = function (coordiante) {
      var newValue = _this.state.arrayCoor;
      newValue.colorMode = coordiante.colorMode;
      newValue.traceBorder = coordiante.traceBorder;
      newValue.traceBack = coordiante.traceBack;

      _this.setState({
        arrayCoor: newValue
      });

      if (_this.props.isAddCoordinate === false) {
        _this.callBack();
      }
    };
    /** save lower limit data */


    _this.callBackLowerLimit = function (lowerLimit) {
      var newValue = _this.state.arrayCoor;
      newValue.lowerLimit = lowerLimit;

      _this.setState({
        arrayCoor: newValue
      });

      if (_this.props.isAddCoordinate === false) {
        _this.callBack();
      }
    };
    /** save mainMetric data */


    _this.callBackMainMetric = function (mainMetric) {
      var newValue = _this.state.arrayCoor;
      newValue.mainMetric = mainMetric;

      _this.setState({
        arrayCoor: newValue
      });

      if (_this.props.isAddCoordinate === false) {
        _this.callBack();
      }
    };
    /** change value radio button checker to pass svg or coordinate mode */


    _this.onChangeRadioMode = function (event) {
      var coordinate = _this.state.arrayCoor;
      coordinate.mode = event.currentTarget.value === 'svgMode' ? true : false;

      _this.setState({
        selectedRadio: event.currentTarget.value,
        arrayCoor: coordinate
      });

      if (_this.props.isAddCoordinate === false) {
        _this.callBack();
      }
    };
    /** add all id SVG in select */


    _this.fillSelectSVG = function () {
      var e_1, _a;

      var selectedIDSvg = [];

      if (_this.state.allIDSelected.length > 0) {
        var allIDSelected = _this.state.allIDSelected;
        var defaultSVG = allIDSelected[0];

        try {
          for (var allIDSelected_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(allIDSelected), allIDSelected_1_1 = allIDSelected_1.next(); !allIDSelected_1_1.done; allIDSelected_1_1 = allIDSelected_1.next()) {
            var line = allIDSelected_1_1.value;

            if (line.value === _this.state.arrayCoor.idSVG) {
              defaultSVG = line;
            }
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (allIDSelected_1_1 && !allIDSelected_1_1.done && (_a = allIDSelected_1["return"])) _a.call(allIDSelected_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }

        _this.setState({
          selectedDefaultSVG: defaultSVG
        });

        return;
      }

      var timeRefresh = 1000;

      if (_this.props.options.baseMap.modeSVG) {
        var refresh_1 = setInterval(function () {
          var e_2, _a, e_3, _b;

          var data = Object(Functions_searchIDLimit__WEBPACK_IMPORTED_MODULE_8__["returnAllId"])(_this.props.options.coordinateSpaceInitial.coordinate, _this.props.options.baseMap);

          if (data.length > 0) {
            try {
              for (var data_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                var line = data_1_1.value;
                selectedIDSvg.push({
                  value: line,
                  label: line
                });
              }
            } catch (e_2_1) {
              e_2 = {
                error: e_2_1
              };
            } finally {
              try {
                if (data_1_1 && !data_1_1.done && (_a = data_1["return"])) _a.call(data_1);
              } finally {
                if (e_2) throw e_2.error;
              }
            }

            var defaultSVG = selectedIDSvg[0];

            try {
              for (var selectedIDSvg_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(selectedIDSvg), selectedIDSvg_1_1 = selectedIDSvg_1.next(); !selectedIDSvg_1_1.done; selectedIDSvg_1_1 = selectedIDSvg_1.next()) {
                var line = selectedIDSvg_1_1.value;

                if (line.value === _this.state.arrayCoor.idSVG) {
                  defaultSVG = line;
                }
              }
            } catch (e_3_1) {
              e_3 = {
                error: e_3_1
              };
            } finally {
              try {
                if (selectedIDSvg_1_1 && !selectedIDSvg_1_1.done && (_b = selectedIDSvg_1["return"])) _b.call(selectedIDSvg_1);
              } finally {
                if (e_3) throw e_3.error;
              }
            }

            _this.setState({
              allIDSelected: selectedIDSvg,
              selectedDefaultSVG: defaultSVG
            });

            clearInterval(refresh_1);
          } // else {
          // 	console.error('error search id');
          // }

        }, timeRefresh);
      }
    };
    /**
     * fill input with data
     * this function is called by mount and update event
     */


    _this.getDataInInput = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.addInput(this.props.coordinate.id)];

            case 1:
              _a.sent();

              this.fillInputEspaceCoor();
              this.fillSelectSVG();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** call function in load component */


    _this.componentDidMount = function () {
      _this.getDataInInput();
    }; // meta


    _this.saveMetaData = function (meta) {
      var old = _this.state.arrayCoor;
      old.meta = meta;

      _this.setState({
        arrayCoor: old
      });
    };
    /** function is call when props is update. Update state */


    _this.componentDidUpdate = function (prevProps, prevState) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(prevProps.coordinate.id !== this.props.coordinate.id)) return [3
              /*break*/
              , 3];
              return [4
              /*yield*/
              , this.setStateAsyncArrayCoor({
                arrayCoor: Object(Functions_initRegionCoordinateSpace__WEBPACK_IMPORTED_MODULE_9__["cloneRegionCoordinateSpace"])(this.props.coordinate, parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMin, 10), parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMax, 10), parseInt(this.props.options.baseMap.width, 10), parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMin, 10), parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMax, 10), parseInt(this.props.options.baseMap.height, 10))
              })];

            case 1:
              _a.sent();

              return [4
              /*yield*/
              , this.setStateAsyncArrayInput({
                arrayInput: []
              })];

            case 2:
              _a.sent();

              this.getDataInInput();
              _a.label = 3;

            case 3:
              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.state = {
      arrayCoor: Object(Functions_initRegionCoordinateSpace__WEBPACK_IMPORTED_MODULE_9__["cloneRegionCoordinateSpace"])(_this.props.coordinate, parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMin, 10), parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMax, 10), parseInt(_this.props.options.baseMap.width, 10), parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMin, 10), parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMax, 10), parseInt(_this.props.options.baseMap.height, 10)),
      arrayInput: [],
      htmlInput: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null),
      hiddenAlert: true,
      titleAlert: 'Error: label is empty',
      severityAlert: 'error',
      selectedRadio: 'svgMode',
      allIDSelected: [],
      selectedDefaultSVG: []
    };
    return _this;
  }
  /**
   * Use function if value input change
   * @param {string} currentTarget new value of input
   * @param {string} name name of input
   * @param {number} index id of input
   */


  CoordinateSpace.prototype._handleChange = function (currentTarget, name, index) {
    var tmp = this.state.arrayCoor; // UPDATE xMinDefault and xMaxDefault

    var widthBackground = parseInt(this.props.options.baseMap.width, 10);
    var xMinInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMin, 10);
    var xMaxInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMax, 10);
    var widthInitialSpace = xMaxInitialSpace - xMinInitialSpace;
    var newCoordDefault = tmp.coordsDefault;

    if (name.startsWith('positionXMin')) {
      newCoordDefault.xMin = ((parseInt(currentTarget, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
    }

    if (name.startsWith('positionXMax')) {
      newCoordDefault.xMax = ((parseInt(currentTarget, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
    } // UPDATE yMinDefault and yMaxDefault


    var heightBackground = parseInt(this.props.options.baseMap.height, 10);
    var yMinInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMin, 10);
    var yMaxInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMax, 10);
    var heightInitialSpace = yMaxInitialSpace - yMinInitialSpace;

    if (name.startsWith('positionYMin')) {
      newCoordDefault.yMin = ((parseInt(currentTarget, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
    }

    if (name.startsWith('positionYMax')) {
      newCoordDefault.yMax = ((parseInt(currentTarget, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
    }

    tmp.coordsDefault = newCoordDefault;
    tmp = Object(Functions_EditParameter_editGoodParameter__WEBPACK_IMPORTED_MODULE_7__["editGoodParameterExtend"])(name, tmp, currentTarget);
    this.setState({
      arrayCoor: tmp
    });
    this.fillInputEspaceCoor();

    if (this.props.isAddCoordinate === false) {
      this.callBack();
    }
  };
  /**
   * Get value of input with state.arrayCoor
   * @param {number} id id of element
   * @param {string} param name of input
   * @returns {string} value of the array element
   */


  CoordinateSpace.prototype.getGoodValue = function (id, param) {
    var value;
    value = '';

    if (param.startsWith('positionXMin')) {
      value = this.state.arrayCoor.coords.xMin;
    } else if (param.startsWith('positionXMax')) {
      value = this.state.arrayCoor.coords.xMax;
    } else if (param.startsWith('positionYMin')) {
      value = this.state.arrayCoor.coords.yMin;
    } else if (param.startsWith('positionYMax')) {
      value = this.state.arrayCoor.coords.yMax;
    } else if (param.startsWith('label')) {
      value = this.state.arrayCoor.label;
    } else if (param.startsWith('image')) {
      value = this.state.arrayCoor.img;
    } else if (param.startsWith('key')) {
      value = this.state.arrayCoor.mainMetric.key;
    } else if (param.startsWith('valueKey')) {
      value = this.state.arrayCoor.mainMetric.keyValue;
    }

    return value;
  };
  /** create dynamic input */


  CoordinateSpace.prototype.fillInputEspaceCoor = function () {
    var e_4, _a;

    var _this = this;

    var arrayInput = this.state.arrayInput;
    var finalItem = [];

    var _loop_1 = function _loop_1(line) {
      var mapItems = line.getUneClassInput().map(function (obj) {
        return obj.getInputType() === 'text' ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_5__["default"], {
          key: obj.getId(),
          label: obj.getLabel(),
          name: obj.getName(),
          placeholder: obj.getPlaceholder() || '',
          required: obj.getRequired(),
          value: _this.getGoodValue(line.getId(), obj.getName()),
          _handleChange: function _handleChange(event) {
            return _this._handleChange(event.currentTarget.value, obj.getName(), line.getId());
          }
        }) : !_this.props.isAddCoordinate ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputButton__WEBPACK_IMPORTED_MODULE_4__["default"], {
          key: obj.getId(),
          label: obj.getLabel(),
          value: obj.getValue() || '',
          name: obj.getName(),
          required: obj.getRequired(),
          _handleChange: _this.deleteOwnInput,
          id: obj.getId()
        }) : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
      });
      var divKey = 'inputCoor' + line.getId().toString();
      var newInput = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        key: 'addCoordinate' + divKey,
        className: "inputCoor"
      }, mapItems);
      finalItem = finalItem.concat(newInput);
    };

    try {
      for (var arrayInput_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayInput), arrayInput_1_1 = arrayInput_1.next(); !arrayInput_1_1.done; arrayInput_1_1 = arrayInput_1.next()) {
        var line = arrayInput_1_1.value;

        _loop_1(line);
      }
    } catch (e_4_1) {
      e_4 = {
        error: e_4_1
      };
    } finally {
      try {
        if (arrayInput_1_1 && !arrayInput_1_1.done && (_a = arrayInput_1["return"])) _a.call(arrayInput_1);
      } finally {
        if (e_4) throw e_4.error;
      }
    }

    this.setState(function (prevState) {
      return {
        htmlInput: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, finalItem),
        selectedRadio: prevState.arrayCoor.mode ? 'svgMode' : 'coordinateMode'
      };
    });
  };
  /** return html */


  CoordinateSpace.prototype.render = function () {
    var _this = this;

    var styleAlert = {
      position: 'fixed',
      bottom: '5%',
      right: '5%',
      zIndex: 9999
    };
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: styleAlert,
      hidden: this.state.hiddenAlert
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Alert"], {
      title: this.state.titleAlert,
      severity: this.state.severityAlert
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.htmlInput), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_manageQuery__WEBPACK_IMPORTED_MODULE_11__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      idCoordinate: this.state.arrayCoor.id,
      mainMetric: this.state.arrayCoor.mainMetric,
      callBackToParent: this.callBackMainMetric,
      isLink: false
    })), !this.props.isAddCoordinate && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_manageAuxiliaryQuery__WEBPACK_IMPORTED_MODULE_14__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      idCoordinate: this.state.arrayCoor.id,
      metrics: this.state.arrayCoor.metrics,
      //callBackToParent={this.callBackAuxiliaryMetric}
      isRegion: true
    })), !this.props.isAddCoordinate && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_components_CoordinateSpace_manageMetada__WEBPACK_IMPORTED_MODULE_15__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      idCoordinate: this.state.arrayCoor.id,
      type: "region",
      saveToParent: this.saveMetaData
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_Parametrage_parametresGeneriques__WEBPACK_IMPORTED_MODULE_12__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      coordinateSpace: this.state.arrayCoor,
      callBackToParent: this.callBackToOther
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_Parametrage_manageLowerLimit__WEBPACK_IMPORTED_MODULE_10__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      coordinate: this.state.arrayCoor,
      callBack: this.callBackManageLowerLimit,
      lowerLimitCallBack: this.callBackLowerLimit,
      isLink: false
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_Parametrage_positionParameters__WEBPACK_IMPORTED_MODULE_16__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      callBackToParentZIndex: function callBackToParentZIndex() {},
      isPoint: false,
      isLink: false,
      isRegion: true,
      id: this.state.arrayCoor.id
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "radio"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("label", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      type: "radio",
      value: "svgMode",
      checked: this.state.selectedRadio === 'svgMode',
      onChange: this.onChangeRadioMode
    }), "SVG mode")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "radio"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("label", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      type: "radio",
      value: "coordinateMode",
      checked: this.state.selectedRadio === 'coordinateMode',
      onChange: this.onChangeRadioMode
    }), "Coordinate mode")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), this.state.selectedRadio === 'svgMode' ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "svgMode"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Zone SVG"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
      onChange: function onChange(value) {
        return _this.onChangeSelectSVG(value);
      },
      allowCustomValue: false,
      options: this.state.allIDSelected,
      width: 10,
      value: this.state.selectedDefaultSVG
    }))) : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "classRegion"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Image",
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      value: this.state.arrayCoor.img,
      name: "image",
      onChange: function onChange(event) {
        return _this._handleChange(event.currentTarget.value, 'image', _this.state.arrayCoor.id);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "X min",
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      value: this.state.arrayCoor.coords.xMin,
      name: "positionXMin",
      onChange: function onChange(event) {
        return _this._handleChange(event.currentTarget.value, 'positionXMin', _this.state.arrayCoor.id);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "X max",
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      value: this.state.arrayCoor.coords.xMax,
      name: "positionXMax",
      onChange: function onChange(event) {
        return _this._handleChange(event.currentTarget.value, 'positionXMax', _this.state.arrayCoor.id);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Y min",
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      value: this.state.arrayCoor.coords.yMin,
      name: "positionYMin",
      onChange: function onChange(event) {
        return _this._handleChange(event.currentTarget.value, 'positionYMin', _this.state.arrayCoor.id);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Y max",
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      value: this.state.arrayCoor.coords.yMax,
      name: "positionYMax",
      onChange: function onChange(event) {
        return _this._handleChange(event.currentTarget.value, 'positionYMax', _this.state.arrayCoor.id);
      }
    }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        textAlign: 'center'
      },
      className: "buttonSave"
    }, this.props.isAddCoordinate && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      style: {
        marginRight: '1%'
      },
      onClick: function onClick() {
        return _this.callBack();
      }
    }, "Save"), !this.props.isAddCoordinate && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      onClick: this.deleteOwnInput,
      variant: "danger"
    }, "Delete")));
  };

  return CoordinateSpace;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (CoordinateSpace);

/***/ }),

/***/ "./components/CoordinateSpace/editCoordinateSpace.tsx":
/*!************************************************************!*\
  !*** ./components/CoordinateSpace/editCoordinateSpace.tsx ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _coordinateSpace__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./coordinateSpace */ "./components/CoordinateSpace/coordinateSpace.tsx");




/**
 * manage coordinate space for simpleEditor
 */

var EditCoordinateSpace = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(EditCoordinateSpace, _super);

  function EditCoordinateSpace(props) {
    var _this = _super.call(this, props) || this;
    /**
     * save data in parent
     */


    _this.callBack = function (id, newCoordinate) {
      var e_1, _a, e_2, _b;

      if (newCoordinate) {
        // update region
        var oldData = _this.props.options.regionCoordinateSpace.slice();

        var i = 0;

        try {
          for (var oldData_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(oldData), oldData_1_1 = oldData_1.next(); !oldData_1_1.done; oldData_1_1 = oldData_1.next()) {
            var line = oldData_1_1.value;

            if (line.id === id) {
              oldData[i] = newCoordinate;
              break;
            }

            ++i;
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (oldData_1_1 && !oldData_1_1.done && (_a = oldData_1["return"])) _a.call(oldData_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          regionCoordinateSpace: oldData
        }));
      } else {
        // delete region
        var find = false;

        var oldData = _this.props.options.regionCoordinateSpace.slice();

        var i = 0;

        try {
          for (var oldData_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(oldData), oldData_2_1 = oldData_2.next(); !oldData_2_1.done; oldData_2_1 = oldData_2.next()) {
            var line = oldData_2_1.value;

            if (line.id === id) {
              find = true;
              break;
            }

            ++i;
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (oldData_2_1 && !oldData_2_1.done && (_b = oldData_2["return"])) _b.call(oldData_2);
          } finally {
            if (e_2) throw e_2.error;
          }
        }

        if (find) {
          oldData.splice(i, 1);

          _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
            regionCoordinateSpace: oldData
          }));

          _this.fillSelectRegionSpace();
        }
      }
    };
    /** change select value to edit */


    _this.onChangeSelectCoordinate = function (value) {
      _this.setState({
        selectCoordinateSpaceDefault: value
      });
    };
    /** fill select with array region object */


    _this.fillSelectRegionSpace = function () {
      var e_3, _a, e_4, _b;

      var _c;

      var valueExist = false;
      var valueSelect = [];

      var stockTmpCoordinatesSpace = _this.props.options.regionCoordinateSpace.slice();

      try {
        for (var stockTmpCoordinatesSpace_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(stockTmpCoordinatesSpace), stockTmpCoordinatesSpace_1_1 = stockTmpCoordinatesSpace_1.next(); !stockTmpCoordinatesSpace_1_1.done; stockTmpCoordinatesSpace_1_1 = stockTmpCoordinatesSpace_1.next()) {
          var line = stockTmpCoordinatesSpace_1_1.value;
          valueSelect.push({
            value: line,
            label: line.label
          });
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (stockTmpCoordinatesSpace_1_1 && !stockTmpCoordinatesSpace_1_1.done && (_a = stockTmpCoordinatesSpace_1["return"])) _a.call(stockTmpCoordinatesSpace_1);
        } finally {
          if (e_3) throw e_3.error;
        }
      }

      if (_this.state.selectCoordinateSpaceDefault) {
        try {
          for (var stockTmpCoordinatesSpace_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(stockTmpCoordinatesSpace), stockTmpCoordinatesSpace_2_1 = stockTmpCoordinatesSpace_2.next(); !stockTmpCoordinatesSpace_2_1.done; stockTmpCoordinatesSpace_2_1 = stockTmpCoordinatesSpace_2.next()) {
            var line = stockTmpCoordinatesSpace_2_1.value;

            if (line.id === ((_c = _this.state.selectCoordinateSpaceDefault.value) === null || _c === void 0 ? void 0 : _c.id)) {
              valueExist = true;
              break;
            }
          }
        } catch (e_4_1) {
          e_4 = {
            error: e_4_1
          };
        } finally {
          try {
            if (stockTmpCoordinatesSpace_2_1 && !stockTmpCoordinatesSpace_2_1.done && (_b = stockTmpCoordinatesSpace_2["return"])) _b.call(stockTmpCoordinatesSpace_2);
          } finally {
            if (e_4) throw e_4.error;
          }
        }
      } // dev
      // this.setState(prevState => ({
      //   selectCoordinateSpace: valueSelect,
      //   selectCoordinateSpaceDefault: valueExist
      //     ? prevState.selectCoordinateSpaceDefault
      //     : valueSelect.length > 0
      //     ? valueSelect[0]
      //     : prevState.selectCoordinateSpaceDefault,
      // }));


      _this.setState(function (prevState) {
        return {
          selectCoordinateSpace: valueSelect,
          selectCoordinateSpaceDefault: valueExist ? prevState.selectCoordinateSpaceDefault : valueSelect.length > 0 ? valueSelect[0] : []
        };
      });
    };
    /** fill data for select */


    _this.componentDidMount = function () {
      _this.fillSelectRegionSpace();
    };
    /** update state if value props change */


    _this.componentDidUpdate = function (prevProps) {
      if (prevProps.options.regionCoordinateSpace !== _this.props.options.regionCoordinateSpace) {
        _this.fillSelectRegionSpace();
      }
    };

    _this.state = {
      selectCoordinateSpace: [],
      selectCoordinateSpaceDefault: []
    };
    return _this;
  }
  /** return html */


  EditCoordinateSpace.prototype.render = function () {
    var _this = this;

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Select Region"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
      onChange: function onChange(value) {
        return _this.onChangeSelectCoordinate(value);
      },
      allowCustomValue: false,
      options: this.state.selectCoordinateSpace,
      width: 10,
      value: this.state.selectCoordinateSpaceDefault
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.selectCoordinateSpaceDefault.value ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_coordinateSpace__WEBPACK_IMPORTED_MODULE_3__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      coordinate: this.state.selectCoordinateSpaceDefault.value,
      callBackToParent: this.callBack,
      isAddCoordinate: false
    }) : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      style: {
        textAlign: 'center',
        fontSize: '20px',
        marginTop: '50px'
      }
    }, "Data not set")));
  };

  return EditCoordinateSpace;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (EditCoordinateSpace);

/***/ }),

/***/ "./components/CoordinateSpace/manageAuxiliaryQuery.tsx":
/*!*************************************************************!*\
  !*** ./components/CoordinateSpace/manageAuxiliaryQuery.tsx ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);



/**
 * def
 */

var ManageAuxiliaryQuery = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ManageAuxiliaryQuery, _super);

  function ManageAuxiliaryQuery(props) {
    var _this = _super.call(this, props) || this;

    _this.saveAuxMetrics = function (newAuxMetrics, isLinkB) {
      var e_1, _a, e_2, _b, e_3, _c;

      var idCurrentCoordinateSpace = _this.props.idCoordinate;

      if (_this.props.isPoint) {
        var newArrayPoints = _this.props.options.arrayPoints;

        try {
          for (var newArrayPoints_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(newArrayPoints), newArrayPoints_1_1 = newArrayPoints_1.next(); !newArrayPoints_1_1.done; newArrayPoints_1_1 = newArrayPoints_1.next()) {
            var point = newArrayPoints_1_1.value;

            if (point.id === idCurrentCoordinateSpace) {
              point.metrics = newAuxMetrics;
            }
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (newArrayPoints_1_1 && !newArrayPoints_1_1.done && (_a = newArrayPoints_1["return"])) _a.call(newArrayPoints_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayPoints: newArrayPoints
        }));
      } else if (_this.props.isLink) {
        var newArrayLink = _this.props.options.arrayOrientedLinks;

        try {
          for (var newArrayLink_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(newArrayLink), newArrayLink_1_1 = newArrayLink_1.next(); !newArrayLink_1_1.done; newArrayLink_1_1 = newArrayLink_1.next()) {
            var orientedLink = newArrayLink_1_1.value;

            if (orientedLink.id === idCurrentCoordinateSpace) {
              if (isLinkB) {
                orientedLink.metricsB = newAuxMetrics;
              } else {
                orientedLink.metrics = newAuxMetrics;
              }
            }
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (newArrayLink_1_1 && !newArrayLink_1_1.done && (_b = newArrayLink_1["return"])) _b.call(newArrayLink_1);
          } finally {
            if (e_2) throw e_2.error;
          }
        }

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayOrientedLinks: newArrayLink
        }));
      } else if (_this.props.isRegion) {
        var newArrayRegion = _this.props.options.regionCoordinateSpace;

        try {
          for (var newArrayRegion_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(newArrayRegion), newArrayRegion_1_1 = newArrayRegion_1.next(); !newArrayRegion_1_1.done; newArrayRegion_1_1 = newArrayRegion_1.next()) {
            var region = newArrayRegion_1_1.value;

            if (region.id === idCurrentCoordinateSpace) {
              region.metrics = newAuxMetrics;
            }
          }
        } catch (e_3_1) {
          e_3 = {
            error: e_3_1
          };
        } finally {
          try {
            if (newArrayRegion_1_1 && !newArrayRegion_1_1.done && (_c = newArrayRegion_1["return"])) _c.call(newArrayRegion_1);
          } finally {
            if (e_3) throw e_3.error;
          }
        }

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          regionCoordinateSpace: newArrayRegion
        }));
      }
    };

    _this.getAuxiliaryMetrics = function (isLinkB) {
      var e_4, _a, e_5, _b, e_6, _c;

      var auxiliaryMetrics = [];
      var idCurrentCoordinateSpace = _this.props.idCoordinate;

      if (_this.props.isLink) {
        var arrayOrientedLinks = _this.props.options.arrayOrientedLinks;

        try {
          for (var arrayOrientedLinks_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayOrientedLinks), arrayOrientedLinks_1_1 = arrayOrientedLinks_1.next(); !arrayOrientedLinks_1_1.done; arrayOrientedLinks_1_1 = arrayOrientedLinks_1.next()) {
            var orientedLink = arrayOrientedLinks_1_1.value;

            if (orientedLink.id === idCurrentCoordinateSpace) {
              if (isLinkB) {
                auxiliaryMetrics = orientedLink.metricsB;
              } else {
                auxiliaryMetrics = orientedLink.metrics;
              }
            }
          }
        } catch (e_4_1) {
          e_4 = {
            error: e_4_1
          };
        } finally {
          try {
            if (arrayOrientedLinks_1_1 && !arrayOrientedLinks_1_1.done && (_a = arrayOrientedLinks_1["return"])) _a.call(arrayOrientedLinks_1);
          } finally {
            if (e_4) throw e_4.error;
          }
        }
      } else if (_this.props.isPoint) {
        var arrayPoints = _this.props.options.arrayPoints;

        try {
          for (var arrayPoints_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayPoints), arrayPoints_1_1 = arrayPoints_1.next(); !arrayPoints_1_1.done; arrayPoints_1_1 = arrayPoints_1.next()) {
            var point = arrayPoints_1_1.value;

            if (point.id === idCurrentCoordinateSpace) {
              auxiliaryMetrics = point.metrics;
            }
          }
        } catch (e_5_1) {
          e_5 = {
            error: e_5_1
          };
        } finally {
          try {
            if (arrayPoints_1_1 && !arrayPoints_1_1.done && (_b = arrayPoints_1["return"])) _b.call(arrayPoints_1);
          } finally {
            if (e_5) throw e_5.error;
          }
        }
      } else if (_this.props.isRegion) {
        var arrayRegions = _this.props.options.regionCoordinateSpace;

        try {
          for (var arrayRegions_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayRegions), arrayRegions_1_1 = arrayRegions_1.next(); !arrayRegions_1_1.done; arrayRegions_1_1 = arrayRegions_1.next()) {
            var region = arrayRegions_1_1.value;

            if (region.id === idCurrentCoordinateSpace) {
              auxiliaryMetrics = region.metrics;
            }
          }
        } catch (e_6_1) {
          e_6 = {
            error: e_6_1
          };
        } finally {
          try {
            if (arrayRegions_1_1 && !arrayRegions_1_1.done && (_c = arrayRegions_1["return"])) _c.call(arrayRegions_1);
          } finally {
            if (e_6) throw e_6.error;
          }
        }
      }

      return auxiliaryMetrics;
    }; // private getReferenceMainMetric = (isLinkB: boolean): string => {
    //   let newRefId = '';
    //   const idCurrentCoordinateSpace: number = this.props.idCoordinate;
    //   if (this.props.isLink) {
    //     const arrayOrientedLinks: OrientedLinkClass[] = this.props.options.arrayOrientedLinks;
    //     for (const orientedLink of arrayOrientedLinks) {
    //       if (orientedLink.id === idCurrentCoordinateSpace) {
    //         if (isLinkB) {
    //           newRefId = orientedLink.mainMetricB.refId || '';
    //         } else {
    //           newRefId = orientedLink.mainMetric.refId || '';
    //         }
    //       }
    //     }
    //   } else if (this.props.isPoint) {
    //     const newArrayPoints: PointClass[] = this.props.options.arrayPoints;
    //     for (const point of newArrayPoints) {
    //       if (point.id === idCurrentCoordinateSpace) {
    //         newRefId = point.mainMetric.refId || '';
    //       }
    //     }
    //   } else if (this.props.isRegion) {
    //     const arrayRegions: RegionClass[] = this.props.options.regionCoordinateSpace;
    //     for (const region of arrayRegions) {
    //       if (region.id === idCurrentCoordinateSpace) {
    //         newRefId = region.mainMetric.refId || '';
    //       }
    //     }
    //   }
    //   const newAuxiliaryMetrics: Metric[] = this.getAuxiliaryMetrics(isLinkB);
    //   for (const metric of newAuxiliaryMetrics) {
    //     if (metric.refId !== newRefId) {
    //       metric.refId = newRefId;
    //       this.saveAuxMetrics(newAuxiliaryMetrics, isLinkB);
    //     }
    //   }
    //   return newRefId;
    // };

    /** switch value collapse when click collapse */


    _this.onToggleCollapse = function (isOpen) {
      _this.setState({
        collapse: isOpen
      });
    };
    /** switch value collapseLinkA when click collapse */


    _this.onToggleCollapseLinkA = function (isOpen) {
      _this.setState({
        collapseLinkA: isOpen
      });
    };
    /** switch value collapseLinkB when click collapse */


    _this.onToggleCollapseLinkB = function (isOpen) {
      _this.setState({
        collapseLinkB: isOpen
      });
    };

    _this.getAllQuery = function (id) {
      var e_7, _a, e_8, _b;

      var _c;

      var allQuery = [];
      allQuery.push({
        id: id,
        value: undefined,
        label: 'No value'
      });

      try {
        for (var _d = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(_this.props.data.series), _e = _d.next(); !_e.done; _e = _d.next()) {
          var line = _e.value;
          var duplicate = false;

          try {
            for (var allQuery_1 = (e_8 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(allQuery)), allQuery_1_1 = allQuery_1.next(); !allQuery_1_1.done; allQuery_1_1 = allQuery_1.next()) {
              var valueSave = allQuery_1_1.value;

              if (((_c = valueSave.value) === null || _c === void 0 ? void 0 : _c.refId) === line.refId) {
                duplicate = true;
                break;
              }
            }
          } catch (e_8_1) {
            e_8 = {
              error: e_8_1
            };
          } finally {
            try {
              if (allQuery_1_1 && !allQuery_1_1.done && (_b = allQuery_1["return"])) _b.call(allQuery_1);
            } finally {
              if (e_8) throw e_8.error;
            }
          }

          if (!duplicate) {
            allQuery.push({
              id: id,
              value: line,
              label: line.refId
            });
          }
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (_e && !_e.done && (_a = _d["return"])) _a.call(_d);
        } finally {
          if (e_7) throw e_7.error;
        }
      }

      return allQuery;
    };

    _this.getCurrentQuery = function (id, isLinkB) {
      var currentQuery = [];

      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(false);

      currentQuery = {
        id: id,
        label: newAuxiliaryMetrics[parseInt(id, 10)].refId
      };
      return currentQuery;
    };

    _this.getCurrentQueryB = function (id, isLinkB) {
      var currentQuery = [];

      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(true);

      currentQuery = {
        id: id,
        label: newAuxiliaryMetrics[parseInt(id, 10)].refId
      };
      return currentQuery;
    };
    /** edit value for select */


    _this.onChangeSelectQuery = function (event) {
      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(false);

      var id = event.id;
      newAuxiliaryMetrics[id].refId = event.label;

      _this.saveAuxMetrics(newAuxiliaryMetrics, false);
    };
    /** edit value for select */


    _this.onChangeSelectQueryB = function (event) {
      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(true);

      var id = event.id;
      newAuxiliaryMetrics[id].refId = event.label;

      _this.saveAuxMetrics(newAuxiliaryMetrics, true);
    };

    _this.onChangeKey = function (event) {
      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(false);

      var idCurrentAuxMetrics = event.currentTarget.id;
      var value = event.currentTarget.value;
      newAuxiliaryMetrics[idCurrentAuxMetrics].key = value;

      _this.saveAuxMetrics(newAuxiliaryMetrics, false);
    };

    _this.onChangeKeyB = function (event) {
      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(true);

      var idCurrentAuxMetrics = event.currentTarget.id;
      var value = event.currentTarget.value;
      newAuxiliaryMetrics[idCurrentAuxMetrics].key = value;

      _this.saveAuxMetrics(newAuxiliaryMetrics, true);
    };

    _this.onChangeValueKey = function (event) {
      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(false);

      var id = event.currentTarget.id;
      var value = event.currentTarget.value;
      newAuxiliaryMetrics[id].keyValue = value;

      _this.saveAuxMetrics(newAuxiliaryMetrics, false);
    };

    _this.onChangeValueKeyB = function (event) {
      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(true);

      var id = event.currentTarget.id;
      var value = event.currentTarget.value;
      newAuxiliaryMetrics[id].keyValue = value;

      _this.saveAuxMetrics(newAuxiliaryMetrics, true);
    };

    _this.onChangeManageValue = function (event) {
      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(false);

      var id = event.id;
      newAuxiliaryMetrics[id].manageValue = event.value;

      _this.saveAuxMetrics(newAuxiliaryMetrics, false);
    };

    _this.onChangeManageValueB = function (event) {
      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(true);

      var id = event.id;
      newAuxiliaryMetrics[id].manageValue = event.value;

      _this.saveAuxMetrics(newAuxiliaryMetrics, true);
    };

    _this.addAuxiliaryMetric = function () {
      // const refIdMetric: string = this.state.currentRefQuery;
      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(false);

      newAuxiliaryMetrics.push({
        key: '',
        unit: '',
        format: '',
        keyValue: '',
        refId: '',
        manageValue: 'avg'
      });

      _this.saveAuxMetrics(newAuxiliaryMetrics, false);

      _this.displayInputs(false);
    };

    _this.addAuxiliaryMetricB = function () {
      // const refIdMetric: string = this.state.currentRefQueryB;
      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(true);

      newAuxiliaryMetrics.push({
        key: '',
        unit: '',
        format: '',
        keyValue: '',
        refId: '',
        manageValue: 'avg'
      });

      _this.saveAuxMetrics(newAuxiliaryMetrics, true);

      _this.displayInputs(true);
    };

    _this.deleteAuxiliaryMetric = function (event) {
      var id = event.currentTarget.id;

      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(false);

      newAuxiliaryMetrics.splice(id, 1);

      _this.saveAuxMetrics(newAuxiliaryMetrics, false);

      _this.displayInputs(false);
    };

    _this.deleteAuxiliaryMetricB = function (event) {
      var id = event.currentTarget.id;

      var newAuxiliaryMetrics = _this.getAuxiliaryMetrics(true);

      newAuxiliaryMetrics.splice(id, 1);

      _this.saveAuxMetrics(newAuxiliaryMetrics, true);

      _this.displayInputs(true);
    };

    _this.getAllManageValue = function (id) {
      var selectManageValue = [{
        id: id,
        value: 'avg',
        label: 'average'
      }, {
        id: id,
        value: 'sum',
        label: 'total'
      }, {
        id: id,
        value: 'err',
        label: 'error'
      }];
      return selectManageValue;
    };

    _this.getCurrentManageValue = function (id, isLinkB) {
      var label = '';

      var auxMetrics = _this.getAuxiliaryMetrics(isLinkB);

      if (auxMetrics[id].manageValue === 'avg') {
        label = 'average';
      } else if (auxMetrics[id].manageValue === 'sum') {
        label = 'total';
      } else if (auxMetrics[id].manageValue === 'err') {
        label = 'error';
      }

      var value = {
        id: id,
        value: auxMetrics[id].manageValue,
        label: label
      };
      return value;
    };

    _this.generateInputs = function (index, isLinkB) {
      var _a, _b, _c;

      var id = index; //const refIdMetric: string = this.state.currentQuery.label || '';

      var auxMetrics = _this.getAuxiliaryMetrics(isLinkB);

      var idCoordinateSpace = ((_a = _this.props.idCoordinate) === null || _a === void 0 ? void 0 : _a.toString()) || '';
      var styleTitle = {
        marginTop: '10px',
        textAlign: 'center'
      };
      var styleMainDiv = {
        marginTop: '5px',
        border: '1px solid rgb(23, 23, 24)'
      };
      var styleContent = {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'space-between',
        marginBottom: '5px'
      };
      var styleSelect = {
        display: 'flex',
        flexDirection: 'row',
        marginBottom: '2px'
      }; // const styleReferenceMetric = {
      //   width: '416px',
      //   height: '35px',
      //   border: '1px solid #262628',
      //   borderRadius: '0 3px 3px 0',
      //   backgroundColor: '#09090b',
      //   padding: '8px',
      //   fontSize: '14px',
      //   lineHeight: '18px',
      //   color: '#d8d9da',
      //   marginBottom: '0px',
      // } as React.CSSProperties;

      var item;

      if (isLinkB) {
        item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'mainDiv' + id.toString(),
          style: styleMainDiv
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: idCoordinateSpace + 'title' + id.toString(),
          style: styleTitle
        }, 'Auxiliary Metric ' + (id + 1).toString()), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'content' + id.toString(),
          style: styleContent
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'inputs' + id.toString()
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'refBloc' + id.toString(),
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          key: idCoordinateSpace + 'labelref' + id.toString(),
          width: 15
        }, "Query"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          key: ((_b = _this.props.idCoordinate) === null || _b === void 0 ? void 0 : _b.toString()) || '' + 'refValue' + id.toString(),
          onChange: _this.onChangeSelectQueryB,
          allowCustomValue: false,
          options: _this.getAllQuery(id.toString()),
          width: 30,
          value: _this.getCurrentQueryB(id.toString(), isLinkB)
        })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          key: idCoordinateSpace + 'inputKey' + id.toString(),
          id: id.toString(),
          label: "Key",
          labelWidth: 15,
          inputWidth: 30,
          type: "text",
          value: auxMetrics[id].key,
          name: "key",
          onChange: _this.onChangeKeyB
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          key: idCoordinateSpace + 'valueKey' + id.toString(),
          id: id.toString(),
          label: "Value key",
          labelWidth: 15,
          inputWidth: 30,
          type: "text",
          value: auxMetrics[id].keyValue,
          name: "valueKey",
          onChange: _this.onChangeValueKeyB
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'divTypeOfValue' + id.toString(),
          id: id.toString(),
          style: styleSelect
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          key: idCoordinateSpace + 'labelTypeOfValue' + id.toString(),
          width: 15
        }, "Value"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          key: idCoordinateSpace + 'selectTypeOfValue' + id.toString(),
          onChange: _this.onChangeManageValueB,
          allowCustomValue: false,
          options: _this.getAllManageValue(id.toString()),
          width: 30,
          value: _this.getCurrentManageValue(id, isLinkB)
        }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'buttonDelete' + id.toString()
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
          id: id.toString(),
          onClick: _this.deleteAuxiliaryMetricB,
          variant: 'danger'
        }, "Delete"))));
      } else {
        item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'mainDiv' + id.toString(),
          style: styleMainDiv
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: idCoordinateSpace + 'title' + id.toString(),
          style: styleTitle
        }, 'Auxiliary Metric ' + (id + 1).toString()), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'content' + id.toString(),
          style: styleContent
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'inputs' + id.toString()
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'refBloc' + id.toString(),
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          key: idCoordinateSpace + 'labelref' + id.toString(),
          width: 15
        }, "Query"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          key: ((_c = _this.props.idCoordinate) === null || _c === void 0 ? void 0 : _c.toString()) || '' + 'refValue' + id.toString(),
          onChange: _this.onChangeSelectQuery,
          allowCustomValue: false,
          options: _this.getAllQuery(id.toString()),
          width: 30,
          value: _this.getCurrentQuery(id.toString(), isLinkB)
        })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          key: idCoordinateSpace + 'inputKey' + id.toString(),
          id: id.toString(),
          label: "Key",
          labelWidth: 15,
          inputWidth: 30,
          type: "text",
          value: auxMetrics[id].key,
          name: "key",
          onChange: _this.onChangeKey
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          key: idCoordinateSpace + 'valueKey' + id.toString(),
          id: id.toString(),
          label: "Value key",
          labelWidth: 15,
          inputWidth: 30,
          type: "text",
          value: auxMetrics[id].keyValue,
          name: "valueKey",
          onChange: _this.onChangeValueKey
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'divTypeOfValue' + id.toString(),
          id: id.toString(),
          style: styleSelect
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          key: idCoordinateSpace + 'labelTypeOfValue' + id.toString(),
          width: 15
        }, "Value"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          key: idCoordinateSpace + 'selectTypeOfValue' + id.toString(),
          onChange: _this.onChangeManageValue,
          allowCustomValue: false,
          options: _this.getAllManageValue(id.toString()),
          width: 30,
          value: _this.getCurrentManageValue(id, isLinkB)
        }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: idCoordinateSpace + 'buttonDelete' + id.toString()
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
          id: id.toString(),
          onClick: _this.deleteAuxiliaryMetric,
          variant: 'danger'
        }, "Delete"))));
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        key: idCoordinateSpace + 'listInputOneMetric' + id.toString()
      }, item);
    };

    _this.displayInputs = function (isLinkB) {
      var _a;

      var idCoordinateSpace = ((_a = _this.props.idCoordinate) === null || _a === void 0 ? void 0 : _a.toString()) || '';

      var auxiliaryMetrics = _this.getAuxiliaryMetrics(isLinkB);

      var mapItems = [];
      var index = 0;
      auxiliaryMetrics.forEach(function () {
        var item = _this.generateInputs(index, isLinkB);

        mapItems.push(item);
        index++;
      });
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        key: idCoordinateSpace + 'listInputAllMetrics'
      }, mapItems);
    };

    _this.componentDidMount = function () {//this.fillSelectQuery();
    };

    _this.state = {
      collapse: false,
      collapseLinkA: false,
      collapseLinkB: false
    };
    return _this;
  }
  /**
   * result
   */


  ManageAuxiliaryQuery.prototype.render = function () {
    var e_9, _a;

    var _b;

    var idCoordinateSpace = ((_b = this.props.idCoordinate) === null || _b === void 0 ? void 0 : _b.toString()) || '';
    var styleButtonAdd = {
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'center',
      marginTop: '10px'
    };
    var currentOrientedLink;
    var arrayOrientedLinks = this.props.options.arrayOrientedLinks;

    try {
      for (var arrayOrientedLinks_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayOrientedLinks), arrayOrientedLinks_2_1 = arrayOrientedLinks_2.next(); !arrayOrientedLinks_2_1.done; arrayOrientedLinks_2_1 = arrayOrientedLinks_2.next()) {
        var orientedLink = arrayOrientedLinks_2_1.value;

        if (orientedLink.id === this.props.idCoordinate) {
          currentOrientedLink = orientedLink;
        }
      }
    } catch (e_9_1) {
      e_9 = {
        error: e_9_1
      };
    } finally {
      try {
        if (arrayOrientedLinks_2_1 && !arrayOrientedLinks_2_1.done && (_a = arrayOrientedLinks_2["return"])) _a.call(arrayOrientedLinks_2);
      } finally {
        if (e_9) throw e_9.error;
      }
    }

    if (this.props.isLink && currentOrientedLink && currentOrientedLink.orientationLink.value === 'double') {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
        isOpen: this.state.collapse,
        label: "Auxiliary metrics",
        onToggle: this.onToggleCollapse
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
        isOpen: this.state.collapseLinkA,
        label: "Link A",
        onToggle: this.onToggleCollapseLinkA
      }, this.displayInputs(false), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        key: idCoordinateSpace + 'buttonAdd',
        style: styleButtonAdd
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
        onClick: this.addAuxiliaryMetric
      }, "Add Auxiliary Metric"))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
        isOpen: this.state.collapseLinkB,
        label: "Link B",
        onToggle: this.onToggleCollapseLinkB
      }, this.displayInputs(true), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        key: idCoordinateSpace + 'buttonAdd',
        style: styleButtonAdd
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
        onClick: this.addAuxiliaryMetricB
      }, "Add Auxiliary Metric"))));
    } else {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
        isOpen: this.state.collapse,
        label: "Auxiliary metrics",
        onToggle: this.onToggleCollapse
      }, this.displayInputs(false), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        key: idCoordinateSpace + 'buttonAdd',
        style: styleButtonAdd
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
        onClick: this.addAuxiliaryMetric
      }, "Add Auxiliary Metric")));
    }
  };

  return ManageAuxiliaryQuery;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (ManageAuxiliaryQuery);

/***/ }),

/***/ "./components/CoordinateSpace/manageCoordinateSpace.tsx":
/*!**************************************************************!*\
  !*** ./components/CoordinateSpace/manageCoordinateSpace.tsx ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _editCoordinateSpace__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editCoordinateSpace */ "./components/CoordinateSpace/editCoordinateSpace.tsx");
/* harmony import */ var _point_editPoint__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./point/editPoint */ "./components/CoordinateSpace/point/editPoint.tsx");
/* harmony import */ var _orientedLink_editOrientedLink__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./orientedLink/editOrientedLink */ "./components/CoordinateSpace/orientedLink/editOrientedLink.tsx");
/* harmony import */ var _addCoordinate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./addCoordinate */ "./components/CoordinateSpace/addCoordinate.tsx");







/**
 * def class
 */

var ManageCoordinateSpace = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ManageCoordinateSpace, _super);

  function ManageCoordinateSpace(props) {
    var _this = _super.call(this, props) || this;
    /** after save pass to edit mode */


    _this.returnEditMode = function () {
      _this.setState({
        tabsVariable: [false, true]
      });
    };
    /**
     * switch tab
     * @param {number} id id to to new tab
     */


    _this.goToTab = function (id) {
      var oldValue = _this.state.tabsVariable.slice();

      var size = oldValue.length;

      for (var i = 0; i < size; i++) {
        oldValue[i] = i === id ? true : false;
      }

      _this.setState({
        tabsVariable: oldValue
      });
    };

    _this.contentTabEdit = function () {
      var result = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);

      if (_this.props.isRegion) {
        result = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_editCoordinateSpace__WEBPACK_IMPORTED_MODULE_3__["default"], {
          onOptionsChange: _this.props.onOptionsChange,
          options: _this.props.options,
          data: _this.props.data
        }));
      } else if (_this.props.isPoint) {
        result = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_point_editPoint__WEBPACK_IMPORTED_MODULE_4__["default"], {
          onOptionsChange: _this.props.onOptionsChange,
          options: _this.props.options,
          data: _this.props.data
        }));
      } else if (_this.props.isLink) {
        result = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_orientedLink_editOrientedLink__WEBPACK_IMPORTED_MODULE_5__["default"], {
          onOptionsChange: _this.props.onOptionsChange,
          options: _this.props.options,
          data: _this.props.data
        }));
      }

      return result;
    };

    _this.state = {
      tabsVariable: [false, true]
    };
    return _this;
  }
  /** result */


  ManageCoordinateSpace.prototype.render = function () {
    var _this = this;

    if (!this.props.isLink) {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["TabsBar"], {
        className: "page-header tabs",
        hideBorder: false
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
        key: "tabDisplayCoordinateSpaceAdd",
        label: "Add coordinate space",
        active: this.state.tabsVariable[0],
        onChangeTab: function onChangeTab() {
          return _this.goToTab(0);
        }
      }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
        key: "tabDisplayCoordinateSpaceEdit",
        label: "Edit coordinate space",
        active: this.state.tabsVariable[1],
        onChangeTab: function onChangeTab() {
          return _this.goToTab(1);
        }
      })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["TabContent"], null, this.state.tabsVariable[0] && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_addCoordinate__WEBPACK_IMPORTED_MODULE_6__["default"], {
        onOptionsChange: this.props.onOptionsChange,
        options: this.props.options,
        data: this.props.data,
        returnEditMode: this.returnEditMode,
        isRegion: this.props.isRegion,
        isPoint: this.props.isPoint,
        isLink: this.props.isLink
      }), this.state.tabsVariable[1] && this.contentTabEdit()));
    } else {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["TabsBar"], {
        className: "page-header tabs",
        hideBorder: false
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tab"], {
        key: "tabDisplayCoordinateSpaceEdit",
        label: "Edit coordinate space",
        active: this.state.tabsVariable[1],
        onChangeTab: function onChangeTab() {
          return _this.goToTab(1);
        }
      })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["TabContent"], null, this.state.tabsVariable[1] && this.contentTabEdit()));
    }
  };

  return ManageCoordinateSpace;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (ManageCoordinateSpace);

/***/ }),

/***/ "./components/CoordinateSpace/manageMetada.tsx":
/*!*****************************************************!*\
  !*** ./components/CoordinateSpace/manageMetada.tsx ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Models/TextObjectClass */ "./Models/TextObjectClass.tsx");
/* harmony import */ var Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Functions/Input/inputSeriesColorPicker */ "./Functions/Input/inputSeriesColorPicker.tsx");
/* harmony import */ var Functions_initPoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Functions/initPoint */ "./Functions/initPoint.tsx");
/* harmony import */ var Functions_initRegionCoordinateSpace__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! Functions/initRegionCoordinateSpace */ "./Functions/initRegionCoordinateSpace.tsx");
/* harmony import */ var Functions_initOrientedLink__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! Functions/initOrientedLink */ "./Functions/initOrientedLink.tsx");








/*
Manage Metadata
*/

var ManageMetadata = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ManageMetadata, _super);

  function ManageMetadata(props) {
    var _this = _super.call(this, props) || this;

    _this.onMetaStrChanged = function (event) {
      if (_this.props.type === 'point') {
        var newData = _this.getCurrentPoint().meta[parseInt(event.currentTarget.id, 10)];

        newData.meta = event.currentTarget.value;
        _this.getCurrentPoint().meta[parseInt(event.currentTarget.id, 10)].meta = newData.meta;

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayPoints: _this.props.options.arrayPoints
        }));
      }

      if (_this.props.type === 'region') {
        var newData = _this.getCurrentRegion().meta[parseInt(event.currentTarget.id, 10)];

        newData.meta = event.currentTarget.value;
        _this.getCurrentRegion().meta[parseInt(event.currentTarget.id, 10)].meta = newData.meta;

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          regionCoordinateSpace: _this.props.options.regionCoordinateSpace
        }));
      }

      if (_this.props.type === 'link') {
        var newData = _this.getCurrentLink().meta[parseInt(event.currentTarget.id, 10)];

        newData.meta = event.currentTarget.value;
        _this.getCurrentLink().meta[parseInt(event.currentTarget.id, 10)].meta = newData.meta;

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayOrientedLinks: _this.props.options.arrayOrientedLinks
        }));
      }
    };

    _this.onChangeBackColor = function (keyInt, color) {
      if (_this.props.type === 'point') {
        var newTextObject = _this.getCurrentPoint().meta[keyInt].obj;

        newTextObject.colorBack = color;
        _this.getCurrentPoint().meta[keyInt].obj = newTextObject;

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayPoints: _this.props.options.arrayPoints
        }));
      }

      if (_this.props.type === 'link') {
        var newTextObject = _this.getCurrentLink().meta[keyInt].obj;

        newTextObject.colorBack = color;
        _this.getCurrentLink().meta[keyInt].obj = newTextObject;

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayOrientedLinks: _this.props.options.arrayOrientedLinks
        }));
      }

      if (_this.props.type === 'region') {
        var newTextObject = _this.getCurrentRegion().meta[keyInt].obj;

        newTextObject.colorBack = color;
        _this.getCurrentRegion().meta[keyInt].obj = newTextObject;

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          regionCoordinateSpace: _this.props.options.regionCoordinateSpace
        }));
      }
    };

    _this.onChangeTextColor = function (keyInt, color) {
      if (_this.props.type === 'point') {
        var newTextObject = _this.getCurrentPoint().meta[keyInt].obj;

        newTextObject.colorText = color;
        _this.getCurrentPoint().meta[keyInt].obj = newTextObject;

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayPoints: _this.props.options.arrayPoints
        }));
      }

      if (_this.props.type === 'link') {
        var newTextObject = _this.getCurrentLink().meta[keyInt].obj;

        newTextObject.colorText = color;
        _this.getCurrentLink().meta[keyInt].obj = newTextObject;

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayOrientedLinks: _this.props.options.arrayOrientedLinks
        }));
      }

      if (_this.props.type === 'region') {
        var newTextObject = _this.getCurrentRegion().meta[keyInt].obj;

        newTextObject.colorText = color;
        _this.getCurrentRegion().meta[keyInt].obj = newTextObject;

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          regionCoordinateSpace: _this.props.options.regionCoordinateSpace
        }));
      }
    }; // onChangeBold = (event: SyntheticEvent<HTMLInputElement, Event> | undefined ) => {
    //   // if (this.props.type === 'point') {
    //   //   const newTextObject: TextObject = this.props.options.arrayPoints[this.props.idCoordinate - 1].meta[keyInt].obj;
    //   //   newTextObject.style.bold = ;
    //   //   this.props.options.arrayPoints[this.props.idCoordinate - 1].meta[keyInt].obj = newTextObject;
    //   //   this.props.onOptionsChange({ ...this.props.options, arrayPoints: this.props.options.arrayPoints });
    //   // }
    //   // if (this.props.type === 'link') {
    //   //   const newTextObject: TextObject = this.props.options.arrayOrientedLinks[this.props.idCoordinate - 1].meta[keyInt].obj;
    //   //   newTextObject.colorText = color;
    //   //   this.props.options.arrayOrientedLinks[this.props.idCoordinate - 1].meta[keyInt].obj = newTextObject;
    //   //   this.props.onOptionsChange({ ...this.props.options, arrayOrientedLinks: this.props.options.arrayOrientedLinks });
    //   // }
    //   // if (this.props.type === 'region') {
    //   //   const newTextObject: TextObject = this.props.options.regionCoordinateSpace[this.props.idCoordinate - 1].meta[keyInt].obj;
    //   //   newTextObject.colorText = color;
    //   //   this.props.options.regionCoordinateSpace[this.props.idCoordinate - 1].meta[keyInt].obj = newTextObject;
    //   //   this.props.onOptionsChange({ ...this.props.options, regionCoordinateSpace: this.props.options.regionCoordinateSpace });
    //   // }
    // };
    // onChangeBold = (index: number, event: any) => {
    //   const divParent
    //   const id = event.currentTarget;
    //   if (this.props.type === 'point') {
    //     let newArrayPoint: PointClass[] = this.props.options.arrayPoints;
    //     if (newArrayPoint[this.props.idCoordinate - 1].meta[parseInt(event.currentTarget.id, 10) - 5].obj.style.bold) {
    //       newArrayPoint[this.props.idCoordinate - 1].meta[parseInt(event.currentTarget.id, 10) - 5].obj.style.bold = false;
    //     } else {
    //       newArrayPoint[this.props.idCoordinate - 1].meta[parseInt(event.currentTarget.id, 10) - 5].obj.style.bold = true;
    //     }
    //     this.props.onOptionsChange({ ...this.props.options, arrayPoints: newArrayPoint });
    //   }
    // }


    _this.addMeta = function (onClick) {
      if (_this.props.type === 'point') {
        var obj = new Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_3__["TextObject"]('', false, '', '', {
          bold: false,
          italic: false,
          underline: false
        }, false, {
          legendElement: '',
          numericFormatElement: '',
          unit: '',
          displayObjectInTooltip: false,
          addColorTextElement: false,
          colorTextElement: 'white',
          addColorBackElement: false,
          colorBackElement: 'black'
        }, {
          legendElement: '',
          numericFormatElement: '',
          unit: '',
          displayObjectInTooltip: false,
          addColorTextElement: false,
          colorTextElement: 'white',
          addColorBackElement: false,
          colorBackElement: 'black'
        });
        var meta = _this.state.newMeta;

        _this.getCurrentPoint().meta.push({
          meta: meta,
          obj: obj
        });

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayPoints: _this.props.options.arrayPoints
        }));

        _this.setState({
          newMeta: ''
        });
      }

      if (_this.props.type === 'link') {
        var obj = new Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_3__["TextObject"]('', false, '', '', {
          bold: false,
          italic: false,
          underline: false
        }, false, {
          legendElement: '',
          numericFormatElement: '',
          unit: '',
          displayObjectInTooltip: false,
          addColorTextElement: false,
          colorTextElement: 'white',
          addColorBackElement: false,
          colorBackElement: 'black'
        }, {
          legendElement: '',
          numericFormatElement: '',
          unit: '',
          displayObjectInTooltip: false,
          addColorTextElement: false,
          colorTextElement: 'white',
          addColorBackElement: false,
          colorBackElement: 'black'
        });
        var meta = _this.state.newMeta;

        _this.getCurrentLink().meta.push({
          meta: meta,
          obj: obj
        });

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayOrientedLinks: _this.props.options.arrayOrientedLinks
        }));

        _this.setState({
          newMeta: ''
        });
      }

      if (_this.props.type === 'region') {
        var obj = new Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_3__["TextObject"]('', false, '', '', {
          bold: false,
          italic: false,
          underline: false
        }, false, {
          legendElement: '',
          numericFormatElement: '',
          unit: '',
          displayObjectInTooltip: false,
          addColorTextElement: false,
          colorTextElement: 'white',
          addColorBackElement: false,
          colorBackElement: 'black'
        }, {
          legendElement: '',
          numericFormatElement: '',
          unit: '',
          displayObjectInTooltip: false,
          addColorTextElement: false,
          colorTextElement: 'white',
          addColorBackElement: false,
          colorBackElement: 'black'
        });
        var meta = _this.state.newMeta;

        _this.getCurrentRegion().meta.push({
          meta: meta,
          obj: obj
        });

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          regionCoordinateSpace: _this.props.options.regionCoordinateSpace
        }));

        _this.setState({
          newMeta: ''
        });
      }
    };

    _this.getCurrentPoint = function () {
      var point = Object(Functions_initPoint__WEBPACK_IMPORTED_MODULE_5__["initPoint"])(0);

      _this.props.options.arrayPoints.forEach(function (pointToFind) {
        if (pointToFind.id === _this.props.idCoordinate) {
          point = pointToFind;
        }
      });

      return point;
    };

    _this.getCurrentRegion = function () {
      var region = Object(Functions_initRegionCoordinateSpace__WEBPACK_IMPORTED_MODULE_6__["initRegionCoordinateSpace"])(0);

      _this.props.options.regionCoordinateSpace.forEach(function (regionToFind) {
        if (regionToFind.id === _this.props.idCoordinate) {
          region = regionToFind;
        }
      });

      return region;
    };

    _this.getCurrentLink = function () {
      var link = Object(Functions_initOrientedLink__WEBPACK_IMPORTED_MODULE_7__["initOrientedLink"])(0, 0);

      _this.props.options.arrayOrientedLinks.forEach(function (linkToFind) {
        if (linkToFind.id === _this.props.idCoordinate) {
          link = linkToFind;
        }
      });

      return link;
    }; // element for one Meta


    _this.displayMetaList = function (props) {
      var l10n = __webpack_require__(/*! Localization/en.json */ "./Localization/en.json");

      if (props.type === 'point' && _this.props.options.arrayPoints.length !== 0) {
        var point = _this.getCurrentPoint();

        var list = point.meta.map(function (meta, index) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'point' + _this.props.idCoordinate + 'EditorMetadata',
            style: {
              marginTop: '5px',
              border: '1px solid black',
              padding: '10px'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            style: {
              fontSize: '16px',
              fontWeight: 'normal',
              textAlign: 'left',
              paddingLeft: '8px'
            }
          }, "Metadata ", index + 1), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'Meta' + index,
            style: {
              display: 'flex',
              flexDirection: 'row',
              justifyContent: 'space-around'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              display: 'flex',
              flexDirection: 'column'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
            id: index.toString(),
            key: 'Meta' + index.toString(),
            label: 'Text metadata',
            labelWidth: 10,
            inputWidth: 23,
            type: "string",
            value: meta.meta || '',
            onChange: _this.onMetaStrChanged.bind(_this)
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_4__["InputSeriesColorPicker"], {
            width: 30,
            color: meta.obj.colorBack,
            keyInt: index,
            text: l10n.textObject.colorBackground,
            _onChange: _this.onChangeBackColor
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_4__["InputSeriesColorPicker"], {
            width: 30,
            color: meta.obj.colorText,
            keyInt: index,
            text: l10n.textObject.colorText,
            _onChange: _this.onChangeTextColor
          })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              display: 'flex',
              flexDirection: 'column'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
            width: 30
          }, "Bold"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
            label: "",
            checked: meta.obj.style.bold,
            onChange: function onChange() {
              var newArrayPoint = _this.props.options.arrayPoints;

              if (_this.getCurrentPoint().meta[index].obj.style.bold) {
                _this.getCurrentPoint().meta[index].obj.style.bold = false;
              } else {
                _this.getCurrentPoint().meta[index].obj.style.bold = true;
              }

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                arrayPoints: newArrayPoint
              }));
            }
          })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
            width: 30
          }, "Italic"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
            label: "",
            checked: meta.obj.style.italic,
            onChange: function onChange() {
              var newArrayPoint = _this.props.options.arrayPoints;

              if (_this.getCurrentPoint().meta[index].obj.style.italic) {
                _this.getCurrentPoint().meta[index].obj.style.italic = false;
              } else {
                _this.getCurrentPoint().meta[index].obj.style.italic = true;
              }

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                arrayPoints: newArrayPoint
              }));
            }
          })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
            width: 30
          }, "Underline"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
            label: "",
            checked: meta.obj.style.underline,
            onChange: function onChange() {
              var newArrayPoint = _this.props.options.arrayPoints;

              if (_this.getCurrentPoint().meta[index].obj.style.underline) {
                _this.getCurrentPoint().meta[index].obj.style.underline = false;
              } else {
                _this.getCurrentPoint().meta[index].obj.style.underline = true;
              }

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                arrayPoints: newArrayPoint
              }));
            }
          })))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              display: 'flex',
              justifyContent: 'right',
              margin: '10px 0px'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
            variant: 'danger',
            onClick: function onClick() {
              var newArrayPoints = _this.props.options.arrayPoints;

              _this.getCurrentPoint().meta.splice(index, 1);

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                arrayPoints: newArrayPoints
              }));
            }
          }, "Delete")));
        });
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, list);
      }

      if (props.type === 'region' && _this.props.options.regionCoordinateSpace.length !== 0) {
        var region = _this.getCurrentRegion();

        var list = region.meta.map(function (meta, index) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'region' + _this.props.idCoordinate + 'EditorMetadata' + index,
            style: {
              marginTop: '5px',
              border: '1px solid black',
              padding: '10px'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            style: {
              fontSize: '16px',
              fontWeight: 'normal',
              textAlign: 'center',
              paddingLeft: '8px'
            }
          }, "Metadata ", index + 1), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'Meta' + index,
            style: {
              display: 'flex',
              flexDirection: 'row',
              justifyContent: 'space-around'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              display: 'flex',
              flexDirection: 'column'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
            id: index.toString(),
            key: 'Meta' + index.toString(),
            label: 'Text metadata',
            labelWidth: 10,
            inputWidth: 23,
            type: "string",
            value: meta.meta || '',
            onChange: _this.onMetaStrChanged.bind(_this)
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_4__["InputSeriesColorPicker"], {
            width: 30,
            color: meta.obj.colorBack,
            keyInt: index,
            text: l10n.textObject.colorBackground,
            _onChange: _this.onChangeBackColor
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_4__["InputSeriesColorPicker"], {
            width: 30,
            color: meta.obj.colorText,
            keyInt: index,
            text: l10n.textObject.colorText,
            _onChange: _this.onChangeTextColor
          })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              display: 'flex',
              flexDirection: 'column'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
            width: 30
          }, "Bold"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
            label: "",
            checked: meta.obj.style.bold,
            onChange: function onChange() {
              var newArrayRegion = _this.props.options.regionCoordinateSpace;

              if (_this.getCurrentRegion().meta[index].obj.style.bold) {
                _this.getCurrentRegion().meta[index].obj.style.bold = false;
              } else {
                _this.getCurrentRegion().meta[index].obj.style.bold = true;
              }

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                regionCoordinateSpace: newArrayRegion
              }));
            }
          })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
            width: 30
          }, "Italic"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
            label: "",
            checked: meta.obj.style.italic,
            onChange: function onChange() {
              var newArrayRegion = _this.props.options.regionCoordinateSpace;

              if (_this.getCurrentRegion().meta[index].obj.style.italic) {
                _this.getCurrentRegion().meta[index].obj.style.italic = false;
              } else {
                _this.getCurrentRegion().meta[index].obj.style.italic = true;
              }

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                regionCoordinateSpace: newArrayRegion
              }));
            }
          })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
            width: 30
          }, "Underline"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
            label: "",
            checked: meta.obj.style.underline,
            onChange: function onChange() {
              var newArrayRegion = _this.props.options.regionCoordinateSpace;

              if (_this.getCurrentRegion().meta[index].obj.style.underline) {
                _this.getCurrentRegion().meta[index].obj.style.underline = false;
              } else {
                _this.getCurrentRegion().meta[index].obj.style.underline = true;
              }

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                regionCoordinateSpace: newArrayRegion
              }));
            }
          })))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              display: 'flex',
              justifyContent: 'right',
              margin: '10px'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
            variant: 'danger',
            onClick: function onClick() {
              var newArrayRegion = _this.props.options.regionCoordinateSpace;

              _this.getCurrentRegion().meta.splice(index, 1);

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                regionCoordinateSpace: newArrayRegion
              }));
            }
          }, "Delete")));
        });
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, list);
      }

      if (props.type === 'link' && _this.props.options.arrayOrientedLinks.length !== 0) {
        var link = _this.getCurrentLink();

        var list = link.meta.map(function (meta, index) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'link' + _this.props.idCoordinate + 'EditorMetadata',
            style: {
              marginTop: '5px',
              border: '1px solid black',
              padding: '10px'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            style: {
              fontSize: '16px',
              fontWeight: 'normal',
              textAlign: 'center',
              paddingLeft: '8px'
            }
          }, "Metadata ", index + 1), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'Meta' + index,
            style: {
              display: 'flex',
              flexDirection: 'row',
              justifyContent: 'space-around'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              display: 'flex',
              flexDirection: 'column'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
            id: index.toString(),
            key: 'Meta' + index.toString(),
            label: 'Text metadata',
            labelWidth: 10,
            inputWidth: 23,
            type: "string",
            value: meta.meta || '',
            onChange: _this.onMetaStrChanged.bind(_this)
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_4__["InputSeriesColorPicker"], {
            width: 30,
            color: meta.obj.colorBack,
            keyInt: index,
            text: l10n.textObject.colorBackground,
            _onChange: _this.onChangeBackColor
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_4__["InputSeriesColorPicker"], {
            width: 30,
            color: meta.obj.colorText,
            keyInt: index,
            text: l10n.textObject.colorText,
            _onChange: _this.onChangeTextColor
          })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              display: 'flex',
              flexDirection: 'column'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
            width: 30
          }, "Bold"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
            label: "",
            checked: meta.obj.style.bold,
            onChange: function onChange() {
              var newArrayOrientedLink = _this.props.options.arrayOrientedLinks;

              if (_this.getCurrentLink().meta[index].obj.style.bold) {
                _this.getCurrentLink().meta[index].obj.style.bold = false;
              } else {
                _this.getCurrentLink().meta[index].obj.style.bold = true;
              }

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                arrayOrientedLinks: newArrayOrientedLink
              }));
            }
          })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
            width: 30
          }, "Italic"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
            label: "",
            checked: meta.obj.style.italic,
            onChange: function onChange() {
              var newArrayOrientedLink = _this.props.options.arrayOrientedLinks;

              if (_this.getCurrentLink().meta[index].obj.style.italic) {
                _this.getCurrentLink().meta[index].obj.style.italic = false;
              } else {
                _this.getCurrentLink().meta[index].obj.style.italic = true;
              }

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                arrayOrientedLinks: newArrayOrientedLink
              }));
            }
          })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
            width: 30
          }, "Underline"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
            label: "",
            checked: meta.obj.style.underline,
            onChange: function onChange() {
              var newArrayOrientedLink = _this.props.options.arrayOrientedLinks;

              if (_this.getCurrentLink().meta[index].obj.style.underline) {
                _this.getCurrentLink().meta[index].obj.style.underline = false;
              } else {
                _this.getCurrentLink().meta[index].obj.style.underline = true;
              }

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                arrayOrientedLinks: newArrayOrientedLink
              }));
            }
          })))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              display: 'flex',
              justifyContent: 'right',
              marginBottom: '10px'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
            variant: 'danger',
            onClick: function onClick() {
              var newArrayOrientedLink = _this.props.options.arrayOrientedLinks;

              _this.getCurrentLink().meta.splice(index, 1);

              _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
                arrayOrientedLinks: newArrayOrientedLink
              }));
            }
          }, "Delete")));
        });
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, list);
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
    };

    _this.onToggleMetaValue = function (isOpen) {
      _this.setState({
        collapseMetaValue: isOpen
      });
    };

    _this.printProps = function () {
      console.log(_this.props);
    };

    _this.state = {
      newMeta: '',
      collapseMetaValue: false
    };
    return _this;
  }

  ManageMetadata.prototype.render = function () {
    var _this = this;

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_1__["Fragment"], null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseMetaValue,
      label: "Metadata",
      onToggle: this.onToggleMetaValue
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      key: 'metaAdd',
      label: 'Text metadata',
      labelWidth: 15,
      inputWidth: 25,
      name: 'Meta',
      required: true,
      placeholder: 'Enter meta',
      value: this.state.newMeta,
      onChange: function onChange(event) {
        return _this.setState({
          newMeta: event.currentTarget.value
        });
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      variant: "primary",
      className: "button",
      onClick: this.addMeta
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      style: {
        padding: '0px 8px'
      }
    }, "Add"))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(this.displayMetaList, {
      type: this.props.type,
      id: this.props.idCoordinate - 1
    })));
  };

  return ManageMetadata;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (ManageMetadata);

/***/ }),

/***/ "./components/CoordinateSpace/manageQuery.tsx":
/*!****************************************************!*\
  !*** ./components/CoordinateSpace/manageQuery.tsx ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);



/**
 * def
 */

var ManageQuery = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ManageQuery, _super);

  function ManageQuery(props) {
    var _this = _super.call(this, props) || this;
    /** call back to parent */


    _this.callBack = function () {
      _this.props.callBackToParent(_this.state.mainMetric, _this.props.id);
    };
    /** call back to parent for mainMetricB */


    _this.callBackB = function () {
      if (_this.props.callBackToParentMainMetricB) {
        _this.props.callBackToParentMainMetricB(_this.state.mainMetricB, _this.props.id);
      }
    };
    /** get mainMetricB of OrientedLink bidirectionnal */


    _this.getMainMetricB = function () {
      var e_1, _a;

      var mainMetricB = {};
      var arrayOrientedLink = _this.props.options.arrayOrientedLinks;

      try {
        for (var arrayOrientedLink_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayOrientedLink), arrayOrientedLink_1_1 = arrayOrientedLink_1.next(); !arrayOrientedLink_1_1.done; arrayOrientedLink_1_1 = arrayOrientedLink_1.next()) {
          var orientedLink = arrayOrientedLink_1_1.value;

          if (orientedLink.id === _this.props.idCoordinate) {
            mainMetricB = orientedLink.mainMetricB;
          }
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (arrayOrientedLink_1_1 && !arrayOrientedLink_1_1.done && (_a = arrayOrientedLink_1["return"])) _a.call(arrayOrientedLink_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      return mainMetricB;
    };
    /** edit value for default select manage value */


    _this.onChangeSelectManageValue = function (value) {
      var newMainMetric = _this.state.mainMetric;
      newMainMetric.manageValue = value.value || 'err';

      _this.setState({
        mainMetric: newMainMetric
      });

      _this.callBack();
    };
    /** edit value for default select manage value */


    _this.onChangeSelectManageValueB = function (value) {
      var newMainMetric = _this.state.mainMetricB; //const arrayOrientedLinks: OrientedLink = this.props.options.arrayOrientedLinks

      newMainMetric.manageValue = value.value || 'err';

      _this.setState({
        mainMetricB: newMainMetric
      });

      _this.callBackB();
    };
    /** edit value key for mainMetric */


    _this._handleChangeKey = function (value) {
      var newMainMetric = _this.state.mainMetric;
      newMainMetric.key = value;

      _this.setState({
        mainMetric: newMainMetric
      });

      _this.callBack();
    };
    /** edit value key for mainMetric */


    _this._handleChangeKeyB = function (value) {
      var newMainMetric = _this.state.mainMetricB;
      newMainMetric.key = value;

      _this.setState({
        mainMetricB: newMainMetric
      });

      _this.callBackB();
    };
    /** edit value keyValue for mainMetric */


    _this._handleChangeKeyValue = function (value) {
      var newMainMetric = _this.state.mainMetric;
      newMainMetric.keyValue = value;

      _this.setState({
        mainMetric: newMainMetric
      });

      _this.callBack();
    };
    /** edit value keyValue for mainMetric */


    _this._handleChangeKeyValueB = function (value) {
      var newMainMetric = _this.state.mainMetricB;
      newMainMetric.keyValue = value;

      _this.setState({
        mainMetricB: newMainMetric
      });

      _this.callBackB();
    };
    /** edit value for select */


    _this.onChangeSelectQuery = function (value) {
      var _a;

      var newMainMetric = _this.state.mainMetric;
      newMainMetric.refId = ((_a = value.value) === null || _a === void 0 ? void 0 : _a.refId) || '';
      newMainMetric.expr = '';

      _this.setState({
        mainMetric: newMainMetric,
        selectQueryDefault: value
      });

      _this.callBack();
    };
    /** edit value for select */


    _this.onChangeSelectQueryB = function (value) {
      var _a;

      var newMainMetric = _this.state.mainMetricB;
      newMainMetric.refId = ((_a = value.value) === null || _a === void 0 ? void 0 : _a.refId) || '';
      newMainMetric.expr = '';

      _this.setState({
        mainMetricB: newMainMetric
      });

      _this.callBackB();
    };
    /** switch value collapseMainMetric when click collapse */


    _this.onToggleMainMetric = function (isOpen) {
      _this.setState({
        collapseMainMetric: isOpen
      });
    };
    /** switch value collapseLinkA when click collapse */


    _this.onToggleLinkA = function (isOpen) {
      _this.setState({
        collapseLinkA: isOpen
      });
    };
    /** switch value collapseLinkB when click collapse */


    _this.onToggleLinkB = function (isOpen) {
      _this.setState({
        collapseLinkB: isOpen
      });
    };

    _this.getDefaultQueryB = function () {
      var e_2, _a;

      var defaultValue = {
        label: 'No value',
        value: undefined
      };
      var mainMetricB = _this.state.mainMetricB;

      try {
        for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(_this.state.selectQuery), _c = _b.next(); !_c.done; _c = _b.next()) {
          var value = _c.value;

          if (mainMetricB.refId) {
            if (mainMetricB.refId === value.label) {
              defaultValue = value;
            }
          }
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }

      return defaultValue;
    };

    _this.getDefaultManageValue = function () {
      var e_3, _a;

      var defaultValue = {
        label: 'avg',
        value: 'avg'
      };
      var mainMetric = _this.state.mainMetric;

      try {
        for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(_this.state.selectManageValue), _c = _b.next(); !_c.done; _c = _b.next()) {
          var value = _c.value;

          if (mainMetric.manageValue) {
            if (mainMetric.manageValue === value.value) {
              defaultValue = value;
            }
          }
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
        } finally {
          if (e_3) throw e_3.error;
        }
      }

      return defaultValue;
    };

    _this.getDefaultManageValueB = function () {
      var e_4, _a;

      var defaultValue = {
        label: 'avg',
        value: 'avg'
      };
      var mainMetricB = _this.state.mainMetricB;

      try {
        for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(_this.state.selectManageValue), _c = _b.next(); !_c.done; _c = _b.next()) {
          var value = _c.value;

          if (mainMetricB.manageValue) {
            if (mainMetricB.manageValue === value.value) {
              defaultValue = value;
            }
          }
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
        } finally {
          if (e_4) throw e_4.error;
        }
      }

      return defaultValue;
    };
    /** add all query in select */


    _this.fillSelectQuery = function () {
      var e_5, _a, e_6, _b, e_7, _c;

      var _d, _e, _f;

      var valueSelect = [];
      var newMainMetric = _this.state.mainMetric;
      valueSelect.push({
        value: undefined,
        label: 'No value'
      });

      try {
        for (var _g = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(_this.props.data.series), _h = _g.next(); !_h.done; _h = _g.next()) {
          var line = _h.value;
          var duplicate = false;

          try {
            for (var valueSelect_1 = (e_6 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(valueSelect)), valueSelect_1_1 = valueSelect_1.next(); !valueSelect_1_1.done; valueSelect_1_1 = valueSelect_1.next()) {
              var valueSave = valueSelect_1_1.value;

              if (((_d = valueSave.value) === null || _d === void 0 ? void 0 : _d.refId) === line.refId) {
                duplicate = true;
                break;
              }
            }
          } catch (e_6_1) {
            e_6 = {
              error: e_6_1
            };
          } finally {
            try {
              if (valueSelect_1_1 && !valueSelect_1_1.done && (_b = valueSelect_1["return"])) _b.call(valueSelect_1);
            } finally {
              if (e_6) throw e_6.error;
            }
          }

          if (!duplicate) {
            valueSelect.push({
              value: line,
              label: line.refId
            });
          }
        }
      } catch (e_5_1) {
        e_5 = {
          error: e_5_1
        };
      } finally {
        try {
          if (_h && !_h.done && (_a = _g["return"])) _a.call(_g);
        } finally {
          if (e_5) throw e_5.error;
        }
      }

      if (newMainMetric.refId === '') {
        newMainMetric.refId = valueSelect.length > 0 ? ((_e = valueSelect[0].value) === null || _e === void 0 ? void 0 : _e.refId) || '' : '';
      }

      var refId = _this.state.mainMetric.refId;
      var defaultValue;
      defaultValue = {
        value: undefined,
        label: 'No value'
      };

      if (refId) {
        try {
          for (var valueSelect_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(valueSelect), valueSelect_2_1 = valueSelect_2.next(); !valueSelect_2_1.done; valueSelect_2_1 = valueSelect_2.next()) {
            var line = valueSelect_2_1.value;

            if (((_f = line.value) === null || _f === void 0 ? void 0 : _f.refId) === refId) {
              defaultValue = line;
              break;
            }
          }
        } catch (e_7_1) {
          e_7 = {
            error: e_7_1
          };
        } finally {
          try {
            if (valueSelect_2_1 && !valueSelect_2_1.done && (_c = valueSelect_2["return"])) _c.call(valueSelect_2);
          } finally {
            if (e_7) throw e_7.error;
          }
        }
      }

      _this.setState({
        mainMetric: newMainMetric,
        selectQuery: valueSelect,
        selectQueryDefault: defaultValue
      });
    };
    /** fill data when component mount */


    _this.componentDidMount = function () {
      _this.fillSelectQuery();

      var newSelectManageValue = [{
        value: 'avg',
        label: 'average'
      }, {
        value: 'sum',
        label: 'total'
      }, {
        value: 'err',
        label: 'error'
      }]; // let defaultValue: SelectableValue<TManageValue> = newSelectManageValue[0];
      // for (const line of newSelectManageValue) {
      //   if (line.value === this.state.mainMetric.manageValue) {
      //     defaultValue = line;
      //   }
      // }

      _this.setState({
        selectManageValue: newSelectManageValue
      });
    };
    /** update with promise mainMetric state */


    _this.setStateAsyncMainMetric = function (state) {
      return new Promise(function (resolve) {
        return _this.setState(state, resolve);
      });
    };
    /** update with promise mainMetric state */


    _this.setStateAsyncMainMetricB = function (state) {
      return new Promise(function (resolve) {
        return _this.setState(state, resolve);
      });
    };
    /** update data when props is update */


    _this.componentDidUpdate = function (prevProps) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(prevProps.idCoordinate !== this.props.idCoordinate)) return [3
              /*break*/
              , 4];
              this.setState({
                collapseMainMetric: false
              });
              return [4
              /*yield*/
              , this.setStateAsyncMainMetric({
                mainMetric: this.props.mainMetric
              })];

            case 1:
              _a.sent();

              if (!this.props.mainMetricB) return [3
              /*break*/
              , 3];
              return [4
              /*yield*/
              , this.setStateAsyncMainMetricB({
                mainMetricB: this.props.mainMetricB
              })];

            case 2:
              _a.sent();

              _a.label = 3;

            case 3:
              this.fillSelectQuery();
              _a.label = 4;

            case 4:
              if (prevProps.data.series !== this.props.data.series) {
                this.fillSelectQuery();
              }

              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.displayHtml = function () {
      var e_8, _a;

      var result;
      var currentOrientedLink;
      var arrayOrientedLinks = _this.props.options.arrayOrientedLinks;

      try {
        for (var arrayOrientedLinks_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayOrientedLinks), arrayOrientedLinks_1_1 = arrayOrientedLinks_1.next(); !arrayOrientedLinks_1_1.done; arrayOrientedLinks_1_1 = arrayOrientedLinks_1.next()) {
          var orientedLink = arrayOrientedLinks_1_1.value;

          if (orientedLink.id === _this.props.idCoordinate) {
            currentOrientedLink = orientedLink;
          }
        }
      } catch (e_8_1) {
        e_8 = {
          error: e_8_1
        };
      } finally {
        try {
          if (arrayOrientedLinks_1_1 && !arrayOrientedLinks_1_1.done && (_a = arrayOrientedLinks_1["return"])) _a.call(arrayOrientedLinks_1);
        } finally {
          if (e_8) throw e_8.error;
        }
      }

      if (_this.props.isLink && currentOrientedLink && currentOrientedLink.orientationLink.value === 'double') {
        result = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
          isOpen: _this.state.collapseMainMetric,
          label: "Main metric",
          onToggle: _this.onToggleMainMetric
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
          isOpen: _this.state.collapseLinkA,
          label: "Link A",
          onToggle: _this.onToggleLinkA
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 15
        }, "Query"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: function onChange(value) {
            return _this.onChangeSelectQuery(value);
          },
          allowCustomValue: false,
          options: _this.state.selectQuery,
          width: 30,
          value: _this.state.selectQueryDefault
        })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Key",
          labelWidth: 15,
          inputWidth: 30,
          type: "text",
          value: _this.state.mainMetric.key,
          name: "key",
          onChange: function onChange(event) {
            return _this._handleChangeKey(event.currentTarget.value);
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Value key",
          labelWidth: 15,
          inputWidth: 30,
          type: "text",
          value: _this.state.mainMetric.keyValue,
          name: "valueKey",
          onChange: function onChange(event) {
            return _this._handleChangeKeyValue(event.currentTarget.value);
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 15
        }, "Manipulate"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: function onChange(value) {
            return _this.onChangeSelectManageValue(value);
          },
          allowCustomValue: false,
          options: _this.state.selectManageValue,
          width: 30,
          value: _this.getDefaultManageValue()
        }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
          isOpen: _this.state.collapseLinkB,
          label: "Link B",
          onToggle: _this.onToggleLinkB
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex',
            marginTop: '10px'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 15
        }, "Query"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: function onChange(value) {
            return _this.onChangeSelectQueryB(value);
          },
          allowCustomValue: false,
          options: _this.state.selectQuery,
          width: 30,
          value: _this.getDefaultQueryB()
        })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Key",
          labelWidth: 15,
          inputWidth: 30,
          type: "text",
          value: _this.state.mainMetricB.key,
          name: "key",
          onChange: function onChange(event) {
            return _this._handleChangeKeyB(event.currentTarget.value);
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Value key",
          labelWidth: 15,
          inputWidth: 30,
          type: "text",
          value: _this.state.mainMetricB.keyValue,
          name: "valueKey",
          onChange: function onChange(event) {
            return _this._handleChangeKeyValueB(event.currentTarget.value);
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 15
        }, "Manipulate"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: function onChange(value) {
            return _this.onChangeSelectManageValueB(value);
          },
          allowCustomValue: false,
          options: _this.state.selectManageValue,
          width: 30,
          value: _this.getDefaultManageValueB()
        }))));
      } else {
        result = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
          isOpen: _this.state.collapseMainMetric,
          label: "Main metric",
          onToggle: _this.onToggleMainMetric
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 15
        }, "Query"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: function onChange(value) {
            return _this.onChangeSelectQuery(value);
          },
          allowCustomValue: false,
          options: _this.state.selectQuery,
          width: 30,
          value: _this.state.selectQueryDefault
        })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Key",
          labelWidth: 15,
          inputWidth: 30,
          type: "text",
          value: _this.state.mainMetric.key,
          name: "key",
          onChange: function onChange(event) {
            return _this._handleChangeKey(event.currentTarget.value);
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Value key",
          labelWidth: 15,
          inputWidth: 30,
          type: "text",
          value: _this.state.mainMetric.keyValue,
          name: "valueKey",
          onChange: function onChange(event) {
            return _this._handleChangeKeyValue(event.currentTarget.value);
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 15
        }, "Manipulate"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: function onChange(value) {
            return _this.onChangeSelectManageValue(value);
          },
          allowCustomValue: false,
          options: _this.state.selectManageValue,
          width: 30,
          value: _this.getDefaultManageValue()
        })));
      }

      return result;
    };

    _this.state = {
      mainMetric: _this.props.mainMetric,
      mainMetricB: _this.props.mainMetricB || {
        key: '',
        unit: '',
        format: '',
        keyValue: '',
        refId: '',
        manageValue: 'avg'
      },
      collapseMainMetric: false,
      collapseLinkA: false,
      collapseLinkB: false,
      selectManageValue: [],
      // selectDefaultManageValue: { value: 'avg', label: 'avg' },
      selectQuery: [],
      selectQueryDefault: []
    };
    return _this;
  }
  /**
   * result
   */


  ManageQuery.prototype.render = function () {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.displayHtml());
  };

  return ManageQuery;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (ManageQuery);

/***/ }),

/***/ "./components/CoordinateSpace/orientedLink/editOrientedLink.tsx":
/*!**********************************************************************!*\
  !*** ./components/CoordinateSpace/orientedLink/editOrientedLink.tsx ***!
  \**********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _orientedLink__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./orientedLink */ "./components/CoordinateSpace/orientedLink/orientedLink.tsx");




/**
 * manage coordinate space for simpleEditor
 */

var EditOrientedLink = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(EditOrientedLink, _super);

  function EditOrientedLink(props) {
    var _this = _super.call(this, props) || this;
    /**
     * save data in parent
     */


    _this.callBack = function (id, newCoordinate) {
      var e_1, _a, e_2, _b;

      if (newCoordinate) {
        var oldData = _this.props.options.arrayOrientedLinks.slice();

        var i = 0;

        try {
          for (var oldData_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(oldData), oldData_1_1 = oldData_1.next(); !oldData_1_1.done; oldData_1_1 = oldData_1.next()) {
            var line = oldData_1_1.value;

            if (line.id === id) {
              oldData[i] = newCoordinate;
              break;
            }

            ++i;
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (oldData_1_1 && !oldData_1_1.done && (_a = oldData_1["return"])) _a.call(oldData_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayOrientedLinks: oldData
        })); //this.fillSelectOrientedLink();

      } else {
        var find = false;

        var oldData = _this.props.options.arrayOrientedLinks.slice();

        var i = 0;

        try {
          for (var oldData_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(oldData), oldData_2_1 = oldData_2.next(); !oldData_2_1.done; oldData_2_1 = oldData_2.next()) {
            var line = oldData_2_1.value;

            if (line.id === id) {
              find = true;
              break;
            }

            ++i;
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (oldData_2_1 && !oldData_2_1.done && (_b = oldData_2["return"])) _b.call(oldData_2);
          } finally {
            if (e_2) throw e_2.error;
          }
        }

        if (find) {
          oldData.splice(i, 1);

          _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
            arrayOrientedLinks: oldData
          }));

          _this.fillSelectOrientedLink();
        }
      }
    };
    /** change select value to edit */


    _this.onChangeSelectCoordinate = function (value) {
      _this.setState({
        selectCoordinateSpaceDefault: value
      });
    };
    /** fill select with array region object */


    _this.fillSelectOrientedLink = function () {
      var e_3, _a, e_4, _b;

      var _c;

      var valueExist = false;
      var valueSelect = [];

      var stockTmpCoordinatesSpace = _this.props.options.arrayOrientedLinks.slice();

      try {
        for (var stockTmpCoordinatesSpace_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(stockTmpCoordinatesSpace), stockTmpCoordinatesSpace_1_1 = stockTmpCoordinatesSpace_1.next(); !stockTmpCoordinatesSpace_1_1.done; stockTmpCoordinatesSpace_1_1 = stockTmpCoordinatesSpace_1.next()) {
          var line = stockTmpCoordinatesSpace_1_1.value;
          var label = line.label || line.name;
          valueSelect.push({
            value: line,
            label: label
          });
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (stockTmpCoordinatesSpace_1_1 && !stockTmpCoordinatesSpace_1_1.done && (_a = stockTmpCoordinatesSpace_1["return"])) _a.call(stockTmpCoordinatesSpace_1);
        } finally {
          if (e_3) throw e_3.error;
        }
      }

      if (_this.state.selectCoordinateSpaceDefault) {
        try {
          for (var stockTmpCoordinatesSpace_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(stockTmpCoordinatesSpace), stockTmpCoordinatesSpace_2_1 = stockTmpCoordinatesSpace_2.next(); !stockTmpCoordinatesSpace_2_1.done; stockTmpCoordinatesSpace_2_1 = stockTmpCoordinatesSpace_2.next()) {
            var line = stockTmpCoordinatesSpace_2_1.value;

            if (line.id === ((_c = _this.state.selectCoordinateSpaceDefault.value) === null || _c === void 0 ? void 0 : _c.id)) {
              valueExist = true;
              break;
            }
          }
        } catch (e_4_1) {
          e_4 = {
            error: e_4_1
          };
        } finally {
          try {
            if (stockTmpCoordinatesSpace_2_1 && !stockTmpCoordinatesSpace_2_1.done && (_b = stockTmpCoordinatesSpace_2["return"])) _b.call(stockTmpCoordinatesSpace_2);
          } finally {
            if (e_4) throw e_4.error;
          }
        }
      } // dev
      // this.setState(prevState => ({
      //   selectCoordinateSpace: valueSelect,
      //   selectCoordinateSpaceDefault: valueExist
      //     ? prevState.selectCoordinateSpaceDefault
      //     : valueSelect.length > 0
      //     ? valueSelect[0]
      //     : prevState.selectCoordinateSpaceDefault,
      // }));


      _this.setState(function (prevState) {
        return {
          selectCoordinateSpace: valueSelect,
          selectCoordinateSpaceDefault: valueExist ? prevState.selectCoordinateSpaceDefault : valueSelect.length > 0 ? valueSelect[0] : []
        };
      }); // final
      // this.setState({
      // 	selectCoordinateSpace: valueSelect,
      // 	selectCoordinateSpaceDefault: (valueSelect.length > 0) ?
      // 		valueSelect[0] : this.state.selectCoordinateSpaceDefault,
      // });

    };
    /** fill data for select */


    _this.componentDidMount = function () {
      _this.fillSelectOrientedLink();
    };
    /** update state if value props change */


    _this.componentDidUpdate = function (prevProps) {
      if (prevProps.options.arrayOrientedLinks !== _this.props.options.arrayOrientedLinks) {
        _this.fillSelectOrientedLink();
      }

      if (prevProps.options.newOrientedLink) {
        _this.fillSelectOrientedLink();

        _this.props.options.newOrientedLink = false;
      }
    };

    _this.state = {
      selectCoordinateSpace: [],
      selectCoordinateSpaceDefault: []
    };
    return _this;
  }
  /** return html */


  EditOrientedLink.prototype.render = function () {
    var _this = this;

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Select Oriented Link"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
      onChange: function onChange(value) {
        return _this.onChangeSelectCoordinate(value);
      },
      allowCustomValue: false,
      options: this.state.selectCoordinateSpace,
      width: 10,
      value: this.state.selectCoordinateSpaceDefault
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.selectCoordinateSpaceDefault.value ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_orientedLink__WEBPACK_IMPORTED_MODULE_3__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      orientedLink: this.state.selectCoordinateSpaceDefault.value,
      callBackToParent: this.callBack,
      isAddLink: false
    }) : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      style: {
        textAlign: 'center',
        fontSize: '20px',
        marginTop: '50px'
      }
    }, "Data not set")));
  };

  return EditOrientedLink;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (EditOrientedLink);

/***/ }),

/***/ "./components/CoordinateSpace/orientedLink/orientedLink.tsx":
/*!******************************************************************!*\
  !*** ./components/CoordinateSpace/orientedLink/orientedLink.tsx ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Models_ArrayInputSelectableClass__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Models/ArrayInputSelectableClass */ "./Models/ArrayInputSelectableClass.tsx");
/* harmony import */ var _Functions_Input_inputTextOrientedLink__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../Functions/Input/inputTextOrientedLink */ "./Functions/Input/inputTextOrientedLink.tsx");
/* harmony import */ var _Functions_Input_inputSelectOrientedLink__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../Functions/Input/inputSelectOrientedLink */ "./Functions/Input/inputSelectOrientedLink.tsx");
/* harmony import */ var _Functions_CreateInput_createInputsOrientedLink__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../Functions/CreateInput/createInputsOrientedLink */ "./Functions/CreateInput/createInputsOrientedLink.tsx");
/* harmony import */ var _Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../Functions/EditParameter/editGoodParameterOrientedLink */ "./Functions/EditParameter/editGoodParameterOrientedLink.tsx");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _Parametrage_parametresGeneriques__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../Parametrage/parametresGeneriques */ "./components/Parametrage/parametresGeneriques.tsx");
/* harmony import */ var _Parametrage_manageLowerLimit__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../Parametrage/manageLowerLimit */ "./components/Parametrage/manageLowerLimit.tsx");
/* harmony import */ var _Parametrage_positionParameters__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Parametrage/positionParameters */ "./components/Parametrage/positionParameters.tsx");
/* harmony import */ var _CoordinateSpace_manageQuery__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../CoordinateSpace/manageQuery */ "./components/CoordinateSpace/manageQuery.tsx");
/* harmony import */ var _CoordinateSpace_manageAuxiliaryQuery__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../CoordinateSpace/manageAuxiliaryQuery */ "./components/CoordinateSpace/manageAuxiliaryQuery.tsx");
/* harmony import */ var _Functions_initOrientedLink__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../../Functions/initOrientedLink */ "./Functions/initOrientedLink.tsx");
/* harmony import */ var components_CoordinateSpace_manageMetada__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! components/CoordinateSpace/manageMetada */ "./components/CoordinateSpace/manageMetada.tsx");















/**
 * IndexParametrage
 */

var OrientedLink = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(OrientedLink, _super);

  function OrientedLink(props) {
    var _this = _super.call(this, props) || this;
    /** update state with promise */


    _this.setStateAsyncOrientedLink = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /** update state with promise */


    _this.setStateAsyncArrayInput = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /** add inputs for a new coordiante */


    _this.addInput = function (id) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncArrayInput({
                arrayInput: this.state.arrayInput.concat([new _Models_ArrayInputSelectableClass__WEBPACK_IMPORTED_MODULE_2__["ArrayInputSelectableClass"](id, Object(_Functions_CreateInput_createInputsOrientedLink__WEBPACK_IMPORTED_MODULE_5__["createInputsOrientedLink"])(id, this.defineDataRegion(), this.defineDataPoint()))])
              })];

            case 1:
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * Delete array input and value
     * @param {event} event event click delete button
     */


    _this.deleteOwnInput = function () {
      var label = _this.state.orientedLink.label || _this.state.orientedLink.name;
      var del = confirm('Delete "' + label + '" ?'); // alert(del);

      if (del) {
        _this.props.callBackToParent(_this.state.orientedLink.id, undefined);
      }
    };
    /** set point in/out to empty in if orientedLink is associate to region in/out
     *  set region in/out to empty in if orientedLink is associate to point in/out
     */


    _this.updateAssociatePointAndRegion = function (newOrientedLink, name) {
      var arrayPoint = _this.props.options.arrayPoints;
      var arrayRegion = _this.props.options.regionCoordinateSpace;

      if (name.startsWith('pointIn')) {
        // supprime la valeur de regionIn si un point est associé à un lien en entrée
        newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('regionIn', newOrientedLink, '', {}); // MAJ des valeurs x et y du pointA du lien si un point est associé en entrée

        arrayPoint.forEach(function (point) {
          if (_this.state.orientedLink.pointIn === point.name || _this.state.orientedLink.pointIn === point.label) {
            newOrientedLink.pointAPositionXDefault = point.positionXDefault;
            newOrientedLink.pointAPositionYDefault = point.positionYDefault;
            newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('pointAX', newOrientedLink, point.positionShapeX, {});
            newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('pointAY', newOrientedLink, point.positionShapeY, {});
          }
        });
      } else if (name.startsWith('regionIn')) {
        // supprime la valeur de pointIn si une region est associée à un lien en entrée
        newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('pointIn', newOrientedLink, '', {}); // MAJ des valeurs x et y du pointA du lien si une region est associée en entrée

        arrayRegion.forEach(function (region) {
          if (_this.state.orientedLink.regionIn === region.label) {
            newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('pointAX', newOrientedLink, (parseInt(region.coords.xMax, 10) - parseInt(region.coords.xMin, 10)).toString(), {});
            newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('pointAY', newOrientedLink, (parseInt(region.coords.yMax, 10) - parseInt(region.coords.yMin, 10)).toString(), {});
            newOrientedLink.pointAPositionXDefault = (parseInt(region.coordsDefault.xMax, 10) - parseInt(region.coordsDefault.xMin, 10)).toString(); // this.state.orientedLink.pointAPositionXDefault = (
            //   parseInt(region.coordsDefault.xMax, 10) - parseInt(region.coordsDefault.xMin, 10)
            // ).toString();

            newOrientedLink.pointAPositionYDefault = (parseInt(region.coordsDefault.yMax, 10) - parseInt(region.coordsDefault.yMin, 10)).toString(); // this.state.orientedLink.pointAPositionYDefault = (
            //   parseInt(region.coordsDefault.yMax, 10) - parseInt(region.coordsDefault.yMin, 10)
            // ).toString();
          }
        });
      } else if (name.startsWith('pointOut')) {
        // supprime la valeur de regionOut si un point est associé à un lien en sortie
        newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('regionOut', newOrientedLink, '', {}); // MAJ des valeurs x et y du pointB du lien si un point est associé en sortie

        arrayPoint.forEach(function (point) {
          if (_this.state.orientedLink.pointOut === point.name || _this.state.orientedLink.pointOut === point.label) {
            // this.state.orientedLink.pointBPositionXDefault = point.positionXDefault;
            // this.state.orientedLink.pointBPositionYDefault = point.positionYDefault;
            newOrientedLink.pointBPositionXDefault = point.positionXDefault;
            newOrientedLink.pointBPositionYDefault = point.positionYDefault;
            newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('pointBX', newOrientedLink, point.positionShapeX, {});
            newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('pointBY', newOrientedLink, point.positionShapeY, {});
          }
        });
      } else if (name.startsWith('regionOut')) {
        // supprime la valeur de pointOut si une region est associée à un lien en sortie
        newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('pointOut', newOrientedLink, '', {}); // MAJ des valeurs x et y du pointB du lien si une region est associée en entrée

        arrayRegion.forEach(function (region) {
          if (_this.state.orientedLink.regionOut === region.label) {
            newOrientedLink.pointBPositionXDefault = (parseInt(region.coordsDefault.xMax, 10) - parseInt(region.coordsDefault.xMin, 10)).toString(); // this.state.orientedLink.pointBPositionXDefault = (
            //   parseInt(region.coordsDefault.xMax, 10) - parseInt(region.coordsDefault.xMin, 10)
            // ).toString();

            newOrientedLink.pointBPositionYDefault = (parseInt(region.coordsDefault.yMax, 10) - parseInt(region.coordsDefault.yMin, 10)).toString(); // this.state.orientedLink.pointBPositionYDefault = (
            //   parseInt(region.coordsDefault.yMax, 10) - parseInt(region.coordsDefault.yMin, 10)
            // ).toString();

            newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('pointBX', newOrientedLink, (parseInt(region.coords.xMax, 10) - parseInt(region.coords.xMin, 10)).toString(), {});
            newOrientedLink = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])('pointBY', newOrientedLink, (parseInt(region.coords.yMax, 10) - parseInt(region.coords.yMin, 10)).toString(), {});
          }
        });
      }

      return newOrientedLink;
    };
    /** call function to return arrayCoor a SimpleEditor */


    _this.callBack = function () {
      var waitAlert = 3000;

      if (_this.state.orientedLink.label === '') {
        _this.setState({
          severityAlert: 'error',
          titleAlert: 'Error: label is empty',
          hiddenAlert: false
        });

        setTimeout(function () {
          _this.setState({
            hiddenAlert: true
          });
        }, waitAlert);
      } else {
        _this.props.callBackToParent(_this.state.orientedLink.id, _this.state.orientedLink);

        _this.setState({
          severityAlert: 'success',
          titleAlert: 'Save',
          hiddenAlert: false
        });

        if (!_this.props.isAddLink) {
          setTimeout(function () {
            _this.setState({
              hiddenAlert: true
            });
          }, waitAlert);
        }
      }
    };
    /** update data for manageLink and textObject */


    _this.callBackToOther = function (linkUrl, textObj) {
      var oldCoor = _this.state.orientedLink;

      if (linkUrl) {
        oldCoor.linkURL.followLink = linkUrl.followLink;
        oldCoor.linkURL.hoveringTooltipLink = linkUrl.hoveringTooltipLink;
        oldCoor.linkURL.hoveringTooltipText = linkUrl.hoveringTooltipText;
      }

      if (textObj) {
        oldCoor.textObj = textObj;
      }

      _this.setState({
        orientedLink: oldCoor
      });

      if (_this.props.isAddLink === false) {
        _this.callBack();
      }
    };
    /** update lower limit */


    _this.callBackManageLowerLimit = function (coordinate, id) {
      var newValue = _this.state.orientedLink;
      newValue.colorMode = coordinate.colorMode;
      newValue.traceBorder = coordinate.traceBorder;
      newValue.traceBack = coordinate.traceBack;

      _this.setState({
        orientedLink: newValue
      });

      if (_this.props.isAddLink === false) {
        _this.callBack();
      }
    };
    /** save lower limit data */


    _this.callBackLowerLimit = function (lowerLimit, id) {
      var newValue = _this.state.orientedLink;
      newValue.lowerLimit = lowerLimit;

      _this.setState({
        orientedLink: newValue
      });

      if (_this.props.isAddLink === false) {
        _this.callBack();
      }
    };
    /** save data of mainMetric */


    _this.callBackMainMetric = function (mainMetric, id) {
      var newValue = _this.state.orientedLink;
      newValue.mainMetric = mainMetric;

      _this.setState({
        orientedLink: newValue
      });

      if (_this.props.isAddLink === false) {
        _this.callBack();
      }
    };
    /** save data of mainMetric */


    _this.callBackMainMetricB = function (mainMetricB, id) {
      var newValue = _this.state.orientedLink;
      newValue.mainMetricB = mainMetricB;

      _this.setState({
        orientedLink: newValue
      });

      if (_this.props.isAddLink === false) {
        _this.callBack();
      }
    }; // Meta


    _this.saveMetaData = function (meta) {
      var old = _this.state.orientedLink;
      old.meta = meta;

      _this.setState({
        orientedLink: old
      });
    };
    /**
     * fill input with data
     * this function is called by mount and update event
     */


    _this.getDataInInput = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.addInput(this.props.orientedLink.id)];

            case 1:
              _a.sent();

              this.generateInputsOrientedLink();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** call function in load component */


    _this.componentDidMount = function () {
      _this.getDataInInput();
    };
    /** function is call when props is update. Update state */


    _this.componentDidUpdate = function (prevProps, prevState) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(prevProps.orientedLink.id !== this.props.orientedLink.id)) return [3
              /*break*/
              , 3];
              return [4
              /*yield*/
              , this.setStateAsyncOrientedLink({
                orientedLink: Object(_Functions_initOrientedLink__WEBPACK_IMPORTED_MODULE_13__["cloneOrientedLink"])(this.props.orientedLink)
              })];

            case 1:
              _a.sent();

              return [4
              /*yield*/
              , this.setStateAsyncArrayInput({
                arrayInput: []
              })];

            case 2:
              _a.sent();

              this.getDataInInput();
              _a.label = 3;

            case 3:
              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.state = {
      arrayInput: [],
      orientedLink: Object(_Functions_initOrientedLink__WEBPACK_IMPORTED_MODULE_13__["cloneOrientedLink"])(_this.props.orientedLink),
      //debug: false,
      htmlInput: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null),
      hiddenAlert: true,
      titleAlert: 'Error: label is empty',
      severityAlert: 'error'
    };
    return _this;
  }

  OrientedLink.prototype.defineDataRegion = function () {
    var regionCoordinateSpace = this.props.options.regionCoordinateSpace;
    var optionRegionNull = {
      label: 'None',
      value: ''
    };
    var arrayOptionsRegion = [];
    arrayOptionsRegion.push(optionRegionNull);
    regionCoordinateSpace.forEach(function (region) {
      var optionRegion = {
        label: region.label,
        value: region.label
      };
      arrayOptionsRegion.push(optionRegion);
    });
    return arrayOptionsRegion;
  };

  OrientedLink.prototype.defineDataPoint = function () {
    var arrayPoints = this.props.options.arrayPoints;
    var optionPointNull = {
      label: 'None',
      value: ''
    };
    var arrayOptionsPoint = [];
    arrayOptionsPoint.push(optionPointNull);
    arrayPoints.forEach(function (point) {
      var valueLabel = point.label || point.name;
      var optionPoint = {
        label: valueLabel,
        value: valueLabel
      };
      arrayOptionsPoint.push(optionPoint);
    });
    return arrayOptionsPoint;
  };
  /**
   * Use function if value input change
   * @param {string} currentTarget new value of input
   * @param {string} name name of input
   * @param {number} index id of input
   */


  OrientedLink.prototype._handleChange = function (currentTarget, name, index) {
    var tmp = this.state.orientedLink; // UPDATE PositionXdefault

    var widthBackground = parseInt(this.props.options.baseMap.width, 10);
    var xMinInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMin, 10);
    var xMaxInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMax, 10);
    var widthInitialSpace = xMaxInitialSpace - xMinInitialSpace;

    if (name.startsWith('pointAX')) {
      tmp.pointAPositionXDefault = ((parseInt(currentTarget, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
    } else if (name.startsWith('pointBX')) {
      tmp.pointBPositionXDefault = ((parseInt(currentTarget, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
    } else if (name.startsWith('pointCX')) {
      tmp.pointCPositionXDefault = ((parseInt(currentTarget, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
    } // UPDATE PositionYdefault


    var heightBackground = parseInt(this.props.options.baseMap.height, 10);
    var yMinInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMin, 10);
    var yMaxInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMax, 10);
    var heightInitialSpace = yMaxInitialSpace - yMinInitialSpace;

    if (name.startsWith('pointAY')) {
      tmp.pointAPositionYDefault = ((parseInt(currentTarget, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
    } else if (name.startsWith('pointBY')) {
      tmp.pointBPositionYDefault = ((parseInt(currentTarget, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
    } else if (name.startsWith('pointCY')) {
      tmp.pointCPositionYDefault = ((parseInt(currentTarget, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
    }

    tmp = Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])(name, tmp, currentTarget, {});
    this.setState({
      orientedLink: tmp
    });
    this.generateInputsOrientedLink();

    if (this.props.isAddLink === false) {
      this.callBack();
    }
  };
  /**
   * Get value of input with state.arrayPointClass
   * @param {number} id id of element
   * @param {string} param name of input
   * @returns {string} value of the array element
   */


  OrientedLink.prototype.getGoodValue = function (name) {
    var value;
    var valueSelect;
    var valueMetric;
    value = '';
    valueSelect = {};

    if (name.startsWith('orientationLink') || name.startsWith('isIncurved') || name.startsWith('pointIn') || name.startsWith('pointOut') || name.startsWith('regionIn') || name.startsWith('regionOut')) {
      if (name.startsWith('orientationLink')) {
        valueSelect = this.state.orientedLink.orientationLink;
      } else if (name.startsWith('isIncurved')) {
        valueSelect = this.state.orientedLink.isIncurved;
      } else if (name.startsWith('pointIn')) {
        valueSelect = {
          label: this.state.orientedLink.pointIn,
          value: this.state.orientedLink.pointIn
        };
      } else if (name.startsWith('pointOut')) {
        valueSelect = {
          label: this.state.orientedLink.pointOut,
          value: this.state.orientedLink.pointOut
        };
      } else if (name.startsWith('regionIn')) {
        valueSelect = {
          label: this.state.orientedLink.regionIn,
          value: this.state.orientedLink.regionIn
        };
      } else if (name.startsWith('regionOut')) {
        valueSelect = {
          label: this.state.orientedLink.regionOut,
          value: this.state.orientedLink.regionOut
        };
      }

      return valueSelect;
    } else if (name.startsWith('mainMetric')) {
      valueMetric = this.state.orientedLink.mainMetric;
      return valueMetric;
    } else {
      if (name.startsWith('label')) {
        value = this.state.orientedLink.label;
      } else if (name.startsWith('pointAX')) {
        value = this.state.orientedLink.pointAPositionX;
      } else if (name.startsWith('pointAY')) {
        value = this.state.orientedLink.pointAPositionY;
      } else if (name.startsWith('pointBX')) {
        value = this.state.orientedLink.pointBPositionX;
      } else if (name.startsWith('pointBY')) {
        value = this.state.orientedLink.pointBPositionY;
      } else if (name.startsWith('colorCoordinateA')) {
        value = this.state.orientedLink.colorCoordinateA;
      } else if (name.startsWith('colorCoordinateB')) {
        value = this.state.orientedLink.colorCoordinateB;
      } else if (name.startsWith('refIdMainMetric')) {
        value = this.state.orientedLink.mainMetric.refId || '';
      } else if (name.startsWith('keyMainMetric')) {
        value = this.state.orientedLink.mainMetric.key || '';
      } else if (name.startsWith('keyValueMainMetric')) {
        value = this.state.orientedLink.mainMetric.keyValue || '';
      } else if (name.startsWith('pointCX')) {
        value = this.state.orientedLink.pointCPositionX;
      } else if (name.startsWith('pointCY')) {
        value = this.state.orientedLink.pointCPositionY;
      } else if (name.startsWith('size')) {
        value = this.state.orientedLink.size;
      }

      return value;
    }
  };
  /** create dynamic input */


  OrientedLink.prototype.generateInputsOrientedLink = function () {
    var e_1, _a;

    var _this = this;

    var arrayInput = this.state.arrayInput;
    var finalItem = [];
    var item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);

    var _loop_1 = function _loop_1(line) {
      var mapItems = [];
      line.uneClassInput.forEach(function (obj) {
        if (obj.input_type === 'text') {
          item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Functions_Input_inputTextOrientedLink__WEBPACK_IMPORTED_MODULE_3__["default"], {
            key: obj.id,
            label: obj.label,
            name: obj.name,
            placeholder: obj.placeholder || '',
            required: obj.required,
            value: _this.getGoodValue(obj.name),
            _handleChange: function _handleChange(event) {
              _this._handleChange(event.currentTarget.value, obj.name, line.id);
            },
            isIncurved: _this.getGoodValue('isIncurved')
          });
        } else if (obj.input_type === 'select') {
          item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Functions_Input_inputSelectOrientedLink__WEBPACK_IMPORTED_MODULE_4__["default"], {
            key: obj.id,
            _onChange: function _onChange(value, name, index) {
              var newOrientedLink = _this.state.orientedLink;
              Object(_Functions_EditParameter_editGoodParameterOrientedLink__WEBPACK_IMPORTED_MODULE_6__["editGoodParameterOrientedLink"])(name, newOrientedLink, value.value || '', value);

              _this.updateAssociatePointAndRegion(newOrientedLink, name);

              _this.setState({
                orientedLink: newOrientedLink
              });

              _this.generateInputsOrientedLink();

              if (_this.props.isAddLink === false) {
                _this.callBack();
              }
            },
            name: obj.name,
            index: line.id,
            data: obj.optionValues,
            defaultValue: _this.getGoodValue(obj.name),
            label: obj.label
          });
        } else {
          item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: obj.id
          });
        }

        mapItems.push(item);
      });
      var newInputList = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        key: 'inputOrientedLink' + line.id.toString(),
        className: "inputCoor",
        id: 'orientedLink' + line.id.toString()
      }, mapItems);
      finalItem = finalItem.concat(newInputList);
    };

    try {
      for (var arrayInput_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayInput), arrayInput_1_1 = arrayInput_1.next(); !arrayInput_1_1.done; arrayInput_1_1 = arrayInput_1.next()) {
        var line = arrayInput_1_1.value;

        _loop_1(line);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (arrayInput_1_1 && !arrayInput_1_1.done && (_a = arrayInput_1["return"])) _a.call(arrayInput_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    this.setState(function (prevState) {
      return {
        htmlInput: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, finalItem)
      };
    });
  };
  /** save data of zIndex */


  OrientedLink.prototype.callBackZIndex = function (zIndexUpdated, id) {
    var newValue = this.state.orientedLink;
    newValue.zIndex = zIndexUpdated;
    this.setState({
      orientedLink: newValue
    });

    if (this.props.isAddLink === false) {
      this.callBack();
    }
  };
  /**
   * render()
   */


  OrientedLink.prototype.render = function () {
    var _this = this;

    var styleAlert = {
      position: 'fixed',
      bottom: '5%',
      right: '5%',
      zIndex: 9999
    };
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: styleAlert,
      hidden: this.state.hiddenAlert
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__["Alert"], {
      title: this.state.titleAlert,
      severity: this.state.severityAlert
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_CoordinateSpace_manageQuery__WEBPACK_IMPORTED_MODULE_11__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      idCoordinate: this.state.orientedLink.id,
      mainMetric: this.state.orientedLink.mainMetric,
      mainMetricB: this.state.orientedLink.mainMetricB,
      callBackToParent: this.callBackMainMetric,
      callBackToParentMainMetricB: this.callBackMainMetricB,
      isLink: true
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_CoordinateSpace_manageAuxiliaryQuery__WEBPACK_IMPORTED_MODULE_12__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      idCoordinate: this.state.orientedLink.id,
      metrics: this.state.orientedLink.metrics,
      isLink: true
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_CoordinateSpace_manageMetada__WEBPACK_IMPORTED_MODULE_14__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      idCoordinate: this.state.orientedLink.id,
      type: "link",
      saveToParent: this.saveMetaData
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Parametrage_parametresGeneriques__WEBPACK_IMPORTED_MODULE_8__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      coordinateSpace: this.state.orientedLink,
      callBackToParent: this.callBackToOther
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Parametrage_manageLowerLimit__WEBPACK_IMPORTED_MODULE_9__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      coordinate: this.state.orientedLink,
      callBack: this.callBackManageLowerLimit,
      lowerLimitCallBack: this.callBackLowerLimit,
      isLink: true
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Parametrage_positionParameters__WEBPACK_IMPORTED_MODULE_10__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      callBackToParentZIndex: this.callBackZIndex.bind(this),
      isPoint: false,
      isLink: true,
      isRegion: false,
      id: this.state.orientedLink.id
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.htmlInput), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        textAlign: 'center'
      },
      className: "buttonSave"
    }, this.props.isAddLink && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__["Button"], {
      style: {
        marginRight: '1%'
      },
      onClick: function onClick() {
        return _this.callBack();
      }
    }, "Save"), !this.props.isAddLink && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__["Button"], {
      onClick: this.deleteOwnInput,
      variant: "danger"
    }, "Delete")));
  };

  return OrientedLink;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (OrientedLink);

/***/ }),

/***/ "./components/CoordinateSpace/point/editPoint.tsx":
/*!********************************************************!*\
  !*** ./components/CoordinateSpace/point/editPoint.tsx ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _point__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./point */ "./components/CoordinateSpace/point/point.tsx");


 // import { initRegionCoordinateSpace } from 'Functions/initRegionCoordinateSpace';


/**
 * manage coordinate space for simpleEditor
 */

var EditPoint = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(EditPoint, _super);

  function EditPoint(props) {
    var _this = _super.call(this, props) || this;
    /**
     * save data in parent
     */


    _this.callBack = function (id, newCoordinate) {
      var e_1, _a, e_2, _b;

      if (newCoordinate) {
        var oldData = _this.props.options.arrayPoints.slice();

        var i = 0;

        try {
          for (var oldData_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(oldData), oldData_1_1 = oldData_1.next(); !oldData_1_1.done; oldData_1_1 = oldData_1.next()) {
            var line = oldData_1_1.value;

            if (line.id === id) {
              oldData[i] = newCoordinate;
              break;
            }

            ++i;
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (oldData_1_1 && !oldData_1_1.done && (_a = oldData_1["return"])) _a.call(oldData_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayPoints: oldData
        })); //this.fillSelectPoint();

      } else {
        var find = false;

        var oldData = _this.props.options.arrayPoints.slice();

        var i = 0;

        try {
          for (var oldData_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(oldData), oldData_2_1 = oldData_2.next(); !oldData_2_1.done; oldData_2_1 = oldData_2.next()) {
            var line = oldData_2_1.value;

            if (line.id === id) {
              find = true;
              break;
            }

            ++i;
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (oldData_2_1 && !oldData_2_1.done && (_b = oldData_2["return"])) _b.call(oldData_2);
          } finally {
            if (e_2) throw e_2.error;
          }
        }

        if (find) {
          oldData.splice(i, 1);

          _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
            arrayPoints: oldData
          }));

          _this.fillSelectPoint();
        }
      }
    };
    /** change select value to edit */


    _this.onChangeSelectCoordinate = function (value) {
      _this.setState({
        selectCoordinateSpaceDefault: value
      });
    };
    /** fill select with array region object */


    _this.fillSelectPoint = function () {
      var e_3, _a, e_4, _b;

      var _c;

      var valueExist = false;
      var valueSelect = [];

      var stockTmpCoordinatesSpace = _this.props.options.arrayPoints.slice();

      try {
        //valueSelect.push({ value: {}, label: 'No Data' });
        for (var stockTmpCoordinatesSpace_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(stockTmpCoordinatesSpace), stockTmpCoordinatesSpace_1_1 = stockTmpCoordinatesSpace_1.next(); !stockTmpCoordinatesSpace_1_1.done; stockTmpCoordinatesSpace_1_1 = stockTmpCoordinatesSpace_1.next()) {
          var line = stockTmpCoordinatesSpace_1_1.value;
          var label = line.label || line.name;
          valueSelect.push({
            value: line,
            label: label
          });
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (stockTmpCoordinatesSpace_1_1 && !stockTmpCoordinatesSpace_1_1.done && (_a = stockTmpCoordinatesSpace_1["return"])) _a.call(stockTmpCoordinatesSpace_1);
        } finally {
          if (e_3) throw e_3.error;
        }
      }

      if (_this.state.selectCoordinateSpaceDefault) {
        try {
          for (var stockTmpCoordinatesSpace_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(stockTmpCoordinatesSpace), stockTmpCoordinatesSpace_2_1 = stockTmpCoordinatesSpace_2.next(); !stockTmpCoordinatesSpace_2_1.done; stockTmpCoordinatesSpace_2_1 = stockTmpCoordinatesSpace_2.next()) {
            var line = stockTmpCoordinatesSpace_2_1.value;

            if (line.id === ((_c = _this.state.selectCoordinateSpaceDefault.value) === null || _c === void 0 ? void 0 : _c.id)) {
              valueExist = true;
              break;
            }
          }
        } catch (e_4_1) {
          e_4 = {
            error: e_4_1
          };
        } finally {
          try {
            if (stockTmpCoordinatesSpace_2_1 && !stockTmpCoordinatesSpace_2_1.done && (_b = stockTmpCoordinatesSpace_2["return"])) _b.call(stockTmpCoordinatesSpace_2);
          } finally {
            if (e_4) throw e_4.error;
          }
        }
      } // dev
      // this.setState(prevState => ({
      //   selectCoordinateSpace: valueSelect,
      //   selectCoordinateSpaceDefault: valueExist
      //     ? prevState.selectCoordinateSpaceDefault
      //     : valueSelect.length > 0
      //     ? valueSelect[0]
      //     : prevState.selectCoordinateSpaceDefault,
      // }));


      _this.setState(function (prevState) {
        return {
          selectCoordinateSpace: valueSelect,
          selectCoordinateSpaceDefault: valueExist ? prevState.selectCoordinateSpaceDefault : valueSelect.length > 0 ? valueSelect[0] : []
        };
      }); // final
      // this.setState({
      // 	selectCoordinateSpace: valueSelect,
      // 	selectCoordinateSpaceDefault: (valueSelect.length > 0) ?
      // 		valueSelect[0] : this.state.selectCoordinateSpaceDefault,
      // });

    };
    /** fill data for select */


    _this.componentDidMount = function () {
      _this.fillSelectPoint();
    };
    /** update state if value props change */


    _this.componentDidUpdate = function (prevProps) {
      if (prevProps.options.arrayPoints !== _this.props.options.arrayPoints) {
        _this.fillSelectPoint();
      }

      if (prevProps.options.newPoint) {
        _this.fillSelectPoint();

        _this.props.options.newPoint = false;
      }
    };

    _this.state = {
      selectCoordinateSpace: [],
      selectCoordinateSpaceDefault: []
    };
    return _this;
  }
  /** return html */


  EditPoint.prototype.render = function () {
    var _this = this;

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Select Point"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
      onChange: function onChange(value) {
        return _this.onChangeSelectCoordinate(value);
      },
      allowCustomValue: false,
      options: this.state.selectCoordinateSpace,
      width: 10,
      value: this.state.selectCoordinateSpaceDefault
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.selectCoordinateSpaceDefault.value ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_point__WEBPACK_IMPORTED_MODULE_3__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      point: this.state.selectCoordinateSpaceDefault.value,
      callBackToParent: this.callBack,
      isAddPoint: false
    }) : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      style: {
        textAlign: 'center',
        fontSize: '20px',
        marginTop: '50px'
      }
    }, "Data not set")));
  };

  return EditPoint;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (EditPoint);

/***/ }),

/***/ "./components/CoordinateSpace/point/point.tsx":
/*!****************************************************!*\
  !*** ./components/CoordinateSpace/point/point.tsx ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Functions_CreateInput_createInputsPoint__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../Functions/CreateInput/createInputsPoint */ "./Functions/CreateInput/createInputsPoint.tsx");
/* harmony import */ var _Functions_Input_inputTextPoint__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../Functions/Input/inputTextPoint */ "./Functions/Input/inputTextPoint.tsx");
/* harmony import */ var _Models_ArrayInputSelectableClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../../Models/ArrayInputSelectableClass */ "./Models/ArrayInputSelectableClass.tsx");
/* harmony import */ var _Functions_EditParameter_editGoodParameterPoint__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../../Functions/EditParameter/editGoodParameterPoint */ "./Functions/EditParameter/editGoodParameterPoint.tsx");
/* harmony import */ var _Functions_Input_inputSelectPoint__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../../Functions/Input/inputSelectPoint */ "./Functions/Input/inputSelectPoint.tsx");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _manageQuery__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../manageQuery */ "./components/CoordinateSpace/manageQuery.tsx");
/* harmony import */ var _manageAuxiliaryQuery__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../manageAuxiliaryQuery */ "./components/CoordinateSpace/manageAuxiliaryQuery.tsx");
/* harmony import */ var _Parametrage_positionParameters__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../Parametrage/positionParameters */ "./components/Parametrage/positionParameters.tsx");
/* harmony import */ var _Parametrage_parametresGeneriques__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../Parametrage/parametresGeneriques */ "./components/Parametrage/parametresGeneriques.tsx");
/* harmony import */ var _Parametrage_manageLowerLimit__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../Parametrage/manageLowerLimit */ "./components/Parametrage/manageLowerLimit.tsx");
/* harmony import */ var Functions_initPoint__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! Functions/initPoint */ "./Functions/initPoint.tsx");
/* harmony import */ var components_CoordinateSpace_manageMetada__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! components/CoordinateSpace/manageMetada */ "./components/CoordinateSpace/manageMetada.tsx");















/**
 * IndexParametrage
 */

var Point = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Point, _super);

  function Point(props) {
    var _this = _super.call(this, props) || this;
    /** update state with promise */


    _this.setStateAsyncArrayCoor = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /** update state with promise */


    _this.setStateAsyncArrayInput = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /** add inputs for a new coordiante */


    _this.addInput = function (id) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncArrayInput({
                arrayInput: this.state.arrayInput.concat([new _Models_ArrayInputSelectableClass__WEBPACK_IMPORTED_MODULE_4__["ArrayInputSelectableClass"](id, Object(_Functions_CreateInput_createInputsPoint__WEBPACK_IMPORTED_MODULE_2__["createInputsPoint"])(id))])
              })];

            case 1:
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * Delete array input and value
     * @param {event} event event click delete button
     */


    _this.deleteOwnInput = function () {
      var label = _this.state.point.label || _this.state.point.name;
      var del = confirm('Delete "' + label + '" ?'); // alert(del);

      if (del) {
        _this.props.callBackToParent(_this.state.point.id, undefined);
      }
    };
    /** call function to return arrayCoor a SimpleEditor */


    _this.callBack = function () {
      var waitAlert = 3000;

      if (_this.state.point.label === '') {
        _this.setState({
          severityAlert: 'error',
          titleAlert: 'Error: label is empty',
          hiddenAlert: false
        });

        setTimeout(function () {
          _this.setState({
            hiddenAlert: true
          });
        }, waitAlert); //console.log('ok');
      } else {
        _this.props.callBackToParent(_this.state.point.id, _this.state.point);

        _this.setState({
          severityAlert: 'success',
          titleAlert: 'Save',
          hiddenAlert: false
        });

        if (!_this.props.isAddPoint) {
          setTimeout(function () {
            _this.setState({
              hiddenAlert: true
            });
          }, waitAlert);
        }
      }
    };

    _this.callBackToOther = function (linkUrl, textObj) {
      var oldCoor = _this.state.point;

      if (linkUrl) {
        oldCoor.linkURL.followLink = linkUrl.followLink;
        oldCoor.linkURL.hoveringTooltipLink = linkUrl.hoveringTooltipLink;
        oldCoor.linkURL.hoveringTooltipText = linkUrl.hoveringTooltipText;
      }

      if (textObj) {
        oldCoor.textObj = textObj;
      }

      _this.setState({
        point: oldCoor
      });

      if (_this.props.isAddPoint === false) {
        _this.callBack();
      }
    };
    /** update lower limit */


    _this.callBackManageLowerLimit = function (coordinate, id) {
      var newValue = _this.state.point;
      newValue.colorMode = coordinate.colorMode;
      newValue.traceBorder = coordinate.traceBorder;
      newValue.traceBack = coordinate.traceBack;

      _this.setState({
        point: newValue
      });

      if (_this.props.isAddPoint === false) {
        _this.callBack();
      }
    };
    /** save lower limit data */


    _this.callBackLowerLimit = function (lowerLimit, id) {
      var newValue = _this.state.point;
      newValue.lowerLimit = lowerLimit;

      _this.setState({
        point: newValue
      });

      if (_this.props.isAddPoint === false) {
        _this.callBack();
      }
    };

    _this.callBackMainMetric = function (mainMetric, id) {
      var newValue = _this.state.point;
      newValue.mainMetric = mainMetric;

      _this.setState({
        point: newValue
      });

      if (_this.props.isAddPoint === false) {
        _this.callBack();
      }
    };
    /**
     * fill input with data
     * this function is called by mount and update event
     */


    _this.getDataInInput = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.addInput(this.props.point.id)];

            case 1:
              _a.sent();

              this.generateInputsPoint();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** call function in load component */


    _this.componentDidMount = function () {
      _this.getDataInInput();
    }; // Meta


    _this.saveMetaData = function (meta) {
      var old = _this.state.arrayCoor;
      old.meta = meta;

      _this.setState({
        arrayCoor: old
      });
    };
    /** function is call when props is update. Update state */


    _this.componentDidUpdate = function (prevProps, prevState) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(prevProps.point.id !== this.props.point.id)) return [3
              /*break*/
              , 3];
              return [4
              /*yield*/
              , this.setStateAsyncArrayCoor({
                point: Object(Functions_initPoint__WEBPACK_IMPORTED_MODULE_13__["clonePoint"])(this.props.point, parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMin, 10), parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMax, 10), parseInt(this.props.options.baseMap.width, 10), parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMin, 10), parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMax, 10), parseInt(this.props.options.baseMap.height, 10))
              })];

            case 1:
              _a.sent();

              return [4
              /*yield*/
              , this.setStateAsyncArrayInput({
                arrayInput: []
              })];

            case 2:
              _a.sent();

              this.getDataInInput();
              _a.label = 3;

            case 3:
              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.state = {
      point: Object(Functions_initPoint__WEBPACK_IMPORTED_MODULE_13__["clonePoint"])(_this.props.point, parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMin, 10), parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMax, 10), parseInt(_this.props.options.baseMap.width, 10), parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMin, 10), parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMax, 10), parseInt(_this.props.options.baseMap.height, 10)),
      arrayCoor: Object(Functions_initPoint__WEBPACK_IMPORTED_MODULE_13__["clonePoint"])(_this.props.point, parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMin, 10), parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMax, 10), parseInt(_this.props.options.baseMap.width, 10), parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMin, 10), parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMax, 10), parseInt(_this.props.options.baseMap.height, 10)),
      arrayInput: [],
      //arrayPointClass: [],
      htmlInput: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null),
      hiddenAlert: true,
      titleAlert: 'Error: label is empty',
      severityAlert: 'error'
    };
    return _this;
  }
  /**
   * Use function if value input change
   * @param {string} currentTarget new value of input
   * @param {string} name name of input
   * @param {number} index id of input
   */


  Point.prototype._handleChange = function (currentTarget, name, index) {
    var tmp = this.state.point; // UPDATE PositionXdefault

    var widthBackground = parseInt(this.props.options.baseMap.width, 10);
    var xMinInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMin, 10);
    var xMaxInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMax, 10);
    var widthInitialSpace = xMaxInitialSpace - xMinInitialSpace;

    if (name.startsWith('positionShapeX')) {
      tmp.positionXDefault = ((parseInt(currentTarget, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
    } // UPDATE PositionYdefault


    var heightBackground = parseInt(this.props.options.baseMap.height, 10);
    var yMinInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMin, 10);
    var yMaxInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMax, 10);
    var heightInitialSpace = yMaxInitialSpace - yMinInitialSpace;

    if (name.startsWith('positionShapeY')) {
      tmp.positionYDefault = ((parseInt(currentTarget, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
    } // update point attribut


    tmp = Object(_Functions_EditParameter_editGoodParameterPoint__WEBPACK_IMPORTED_MODULE_5__["editGoodParameterPoint"])(name, tmp, currentTarget, {});
    this.setState({
      point: tmp
    });
    this.generateInputsPoint();

    if (this.props.isAddPoint === false) {
      this.callBack();
    }
  };
  /**
   * Get value of input with state.arrayPointClass
   * @param {number} id id of element
   * @param {string} param name of input
   * @returns {string} value of the array element
   */


  Point.prototype.getGoodValue = function (param) {
    var value;
    var valueSelect;
    value = '';
    valueSelect = {};

    if (param.startsWith('drawGraphicMarker') || param.startsWith('shape') || //param.startsWith('sizeWidth') ||
    param.startsWith('sizeHeight') || param.startsWith('linkWithCoordinateSpace')) {
      if (param.startsWith('drawGraphicMarker')) {
        valueSelect = this.state.point.drawGraphicMarker;
      } else if (param.startsWith('shape')) {
        valueSelect = this.state.point.shape;
      } else if (param.startsWith('sizeWidth')) {//value = this.state.point.sizeWidth;
      } else if (param.startsWith('sizeHeight')) {
        valueSelect = this.state.point.sizeHeight;
      }

      return valueSelect;
    } else {
      if (param.startsWith('rotateArrow')) {
        value = this.state.point.rotateArrow;
      } else if (param.startsWith('positionShapeX')) {
        value = this.state.point.positionShapeX;
      } else if (param.startsWith('positionShapeY')) {
        value = this.state.point.positionShapeY;
      } else if (param.startsWith('label')) {
        value = this.state.point.label;
      } else if (param.startsWith('color')) {
        value = this.state.point.color;
      } else if (param.startsWith('sizeWidth')) {
        value = this.state.point.sizeWidth;
      }

      return value;
    }
  };
  /** create dynamic input */


  Point.prototype.generateInputsPoint = function () {
    var e_1, _a;

    var _this = this;

    var arrayInput = this.state.arrayInput;
    var item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
    var finalItem = [];

    var _loop_1 = function _loop_1(line) {
      var mapItems = [];
      line.uneClassInput.forEach(function (obj) {
        if (obj.input_type === 'text') {
          item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Functions_Input_inputTextPoint__WEBPACK_IMPORTED_MODULE_3__["default"], {
            key: obj.id,
            label: obj.label,
            name: obj.name,
            placeholder: obj.placeholder || '',
            required: obj.required,
            value: _this.getGoodValue(obj.name),
            _handleChange: function _handleChange(event) {
              _this._handleChange(event.currentTarget.value, obj.name, line.id);
            },
            shape: _this.getGoodValue('shape').value
          });
        } else if (obj.input_type === 'select') {
          item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Functions_Input_inputSelectPoint__WEBPACK_IMPORTED_MODULE_6__["default"], {
            key: obj.id,
            _onChange: function _onChange(value, name, index) {
              var newPoint = _this.state.point;
              Object(_Functions_EditParameter_editGoodParameterPoint__WEBPACK_IMPORTED_MODULE_5__["editGoodParameterPoint"])(name, newPoint, '', value //this.props.options.arrayPoints[this.props.id || 0],
              );

              _this.setState({
                point: newPoint
              });

              _this.generateInputsPoint();

              if (_this.props.isAddPoint === false) {
                _this.callBack();
              }
            },
            name: obj.name,
            index: line.id,
            data: obj.optionValues,
            defaultValue: _this.getGoodValue(obj.name),
            shape: _this.getGoodValue('shape').value,
            label: obj.label
          });
        } else {
          item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: obj.id
          });
        }

        mapItems.push(item);
      });
      var newInputList = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        key: 'inputPoint' + line.id.toString(),
        className: "inputCoor",
        id: 'point' + line.id.toString()
      }, mapItems);
      finalItem = finalItem.concat(newInputList);
    };

    try {
      for (var arrayInput_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayInput), arrayInput_1_1 = arrayInput_1.next(); !arrayInput_1_1.done; arrayInput_1_1 = arrayInput_1.next()) {
        var line = arrayInput_1_1.value;

        _loop_1(line);
      }
    } catch (e_1_1) {
      e_1 = {
        error: e_1_1
      };
    } finally {
      try {
        if (arrayInput_1_1 && !arrayInput_1_1.done && (_a = arrayInput_1["return"])) _a.call(arrayInput_1);
      } finally {
        if (e_1) throw e_1.error;
      }
    }

    this.setState(function (prevState) {
      return {
        htmlInput: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, finalItem)
      };
    });
  };
  /**
   * render()
   */


  Point.prototype.render = function () {
    var _this = this;

    var styleAlert = {
      position: 'fixed',
      bottom: '5%',
      right: '5%',
      zIndex: 9999
    };
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: styleAlert,
      hidden: this.state.hiddenAlert
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__["Alert"], {
      title: this.state.titleAlert,
      severity: this.state.severityAlert
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_manageQuery__WEBPACK_IMPORTED_MODULE_8__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      idCoordinate: this.state.point.id,
      mainMetric: this.state.point.mainMetric,
      callBackToParent: this.callBackMainMetric,
      isLink: false
    })), !this.props.isAddPoint && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_manageAuxiliaryQuery__WEBPACK_IMPORTED_MODULE_9__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      idCoordinate: this.state.point.id,
      metrics: this.state.point.metrics,
      //callBackToParent={this.callBackAuxiliaryMetric}
      isPoint: true
    })), !this.props.isAddPoint && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_CoordinateSpace_manageMetada__WEBPACK_IMPORTED_MODULE_14__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      idCoordinate: this.state.point.id,
      type: "point",
      saveToParent: this.saveMetaData
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Parametrage_parametresGeneriques__WEBPACK_IMPORTED_MODULE_11__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      coordinateSpace: this.state.point,
      callBackToParent: this.callBackToOther
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Parametrage_manageLowerLimit__WEBPACK_IMPORTED_MODULE_12__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      coordinate: this.state.point,
      callBack: this.callBackManageLowerLimit,
      lowerLimitCallBack: this.callBackLowerLimit,
      isLink: false
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Parametrage_positionParameters__WEBPACK_IMPORTED_MODULE_10__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      callBackToParentZIndex: function callBackToParentZIndex() {},
      isPoint: true,
      isLink: false,
      isRegion: false,
      id: this.state.point.id
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.htmlInput), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        textAlign: 'center'
      },
      className: "buttonSave"
    }, this.props.isAddPoint && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__["Button"], {
      style: {
        marginRight: '1%'
      },
      onClick: function onClick() {
        return _this.callBack();
      }
    }, "Save"), !this.props.isAddPoint && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_7__["Button"], {
      onClick: this.deleteOwnInput,
      variant: "danger"
    }, "Delete")));
  };

  return Point;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (Point);

/***/ }),

/***/ "./components/Draw/drawOrientedLink.tsx":
/*!**********************************************!*\
  !*** ./components/Draw/drawOrientedLink.tsx ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);




var DrawOrientedLink = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DrawOrientedLink, _super);

  function DrawOrientedLink(props) {
    var _this = _super.call(this, props) || this;

    _this.labelSynchroX = function (whatLabel) {
      var _a, _b;

      var result = 0;
      var labelMainMetric = null;

      if (whatLabel === 'A') {
        labelMainMetric = document.getElementById('labelMainMetric' + _this.props.id);
      } else {
        labelMainMetric = document.getElementById('labelMainMetricB' + _this.props.id);
      }

      if ((_a = labelMainMetric) === null || _a === void 0 ? void 0 : _a.offsetWidth) {
        result = ((_b = labelMainMetric) === null || _b === void 0 ? void 0 : _b.offsetWidth) / 2;
      }

      return result;
    };

    _this.labelSynchroY = function (whatLabel) {
      var _a, _b;

      var result = 0;
      var labelMainMetric = null;

      if (whatLabel === 'A') {
        labelMainMetric = document.getElementById('labelMainMetric' + _this.props.id);
      } else {
        labelMainMetric = document.getElementById('labelMainMetricB' + _this.props.id);
      }

      if ((_a = labelMainMetric) === null || _a === void 0 ? void 0 : _a.offsetHeight) {
        result = ((_b = labelMainMetric) === null || _b === void 0 ? void 0 : _b.offsetHeight) / 2;
      }

      return result;
    };
    /**
     * to do
     */


    _this.defineParallelOrientedLinks = function () {
      var arrayOrientedLink = _this.props.options.arrayOrientedLinks;
      var listParallelOrientedLinks = [];
      listParallelOrientedLinks.push(parseInt(_this.props.id, 10));
      arrayOrientedLink.forEach(function (orientedLink) {
        if (_this.props.name !== orientedLink.name) {
          if (_this.props.associateRegionIn !== '' && _this.props.associateRegionOut !== '') {
            if (_this.props.associateRegionIn === orientedLink.regionIn || _this.props.associateRegionIn === orientedLink.regionOut) {
              if (_this.props.associateRegionOut === orientedLink.regionIn || _this.props.associateRegionOut === orientedLink.regionOut) {
                listParallelOrientedLinks.push(orientedLink.id);
              }
            }
          } else if (_this.props.associatePointIn !== '' && _this.props.associatePointOut !== '') {
            if (_this.props.associatePointIn === orientedLink.pointIn || _this.props.associatePointIn === orientedLink.pointOut) {
              if (_this.props.associatePointOut === orientedLink.pointIn || _this.props.associatePointOut === orientedLink.pointOut) {
                listParallelOrientedLinks.push(orientedLink.id);
              }
            }
          } else if (_this.props.associateRegionIn !== '' && _this.props.associatePointOut !== '') {
            if (_this.props.associateRegionIn === orientedLink.regionIn || _this.props.associateRegionIn === orientedLink.regionOut) {
              if (_this.props.associatePointOut === orientedLink.pointOut || _this.props.associatePointOut === orientedLink.pointIn) {
                listParallelOrientedLinks.push(orientedLink.id);
              }
            }
          } else if (_this.props.associatePointIn !== '' && _this.props.associateRegionOut !== '') {
            if (_this.props.associatePointIn === orientedLink.pointIn || _this.props.associatePointIn === orientedLink.pointOut) {
              if (_this.props.associateRegionOut === orientedLink.regionOut || _this.props.associateRegionOut === orientedLink.regionIn) {
                listParallelOrientedLinks.push(orientedLink.id);
              }
            }
          }
        }
      });
      var listParallelOrientedLinkSorted = listParallelOrientedLinks.sort(function (a, b) {
        return a - b;
      });
      return listParallelOrientedLinkSorted;
    };
    /**
     * to do
     * @param region
     */


    _this.defineCoor4DRegion = function (region) {
      // let coor4D: Coord4D = { xMin: '0', xMax: '0', yMin: '0', yMax: '0' };
      var coor4D;
      var xMin = 0;
      var xMax = 0;
      var yMin = 0;
      var yMax = 0;

      if (region.idSVG !== '') {
        // region SVG
        var heightPanel = parseInt(_this.props.options.baseMap.height, 10);
        var widthPanel = parseInt(_this.props.options.baseMap.width, 10);
        var initialSpace = _this.props.options.coordinateSpaceInitial.coordinate;
        var xMinInitialSpace = parseInt(initialSpace.xMin, 10);
        var xMinPx = (xMinInitialSpace + 100) * (widthPanel / 200);
        var xMaxInitialSpace = parseInt(initialSpace.xMax, 10);
        var xMaxPx = (xMaxInitialSpace + 100) * (widthPanel / 200);
        var widthInitialSpace = xMaxPx - xMinPx;
        var yMinInitialSpace = parseInt(initialSpace.yMin, 10);
        var yMinPx = (yMinInitialSpace + 100) * (heightPanel / 200);
        var yMaxInitialSpace = parseInt(initialSpace.yMax, 10);
        var yMaxPx = (yMaxInitialSpace + 100) * (heightPanel / 200);
        var heightInitialSpace = yMaxPx - yMinPx;
        var regionSVGHtml = void 0;

        if (_this.props.options.baseMap.isUploaded) {
          regionSVGHtml = document.getElementById(region.idSVG);
        } else {
          regionSVGHtml = document.getElementById('oct' + region.idSVG);
        }

        var width = 0;
        var height = 0;
        var xMinSVG = 0;
        var xMaxSVG = 0;
        var yMaxSVG = 0;
        var yMinSVG = 0;

        if (regionSVGHtml) {
          if (regionSVGHtml.localName === 'rect') {
            width = parseInt(regionSVGHtml.attributes['width'].nodeValue, 10);
            height = parseInt(regionSVGHtml.attributes['height'].nodeValue, 10);
            xMinSVG = parseInt(regionSVGHtml.attributes['x'].nodeValue, 10);
            xMaxSVG = xMinSVG + width;
            yMaxSVG = parseInt(regionSVGHtml.attributes['y'].nodeValue, 10);
            yMinSVG = yMaxSVG + height;
          } else if (regionSVGHtml.localName === 'ellipse') {
            var rX = parseInt(regionSVGHtml.attributes['rx'].nodeValue, 10);
            var rY = parseInt(regionSVGHtml.attributes['ry'].nodeValue, 10);
            xMinSVG = parseInt(regionSVGHtml.attributes['cx'].nodeValue, 10) - rX;
            xMaxSVG = parseInt(regionSVGHtml.attributes['cx'].nodeValue, 10) + rX;
            yMinSVG = parseInt(regionSVGHtml.attributes['cy'].nodeValue, 10) + rY;
            yMaxSVG = parseInt(regionSVGHtml.attributes['cy'].nodeValue, 10) - rY;
          } else if (regionSVGHtml.localName === 'path') {
            var allValues = regionSVGHtml.attributes['d'].nodeValue;
            var arrayAllValues = allValues.split(' ');
            var iX = -2;
            var xMin_1 = 1000000;
            var xMax_1 = 0;
            var iY = -1;
            var yMin_1 = 1000000;
            var yMax_1 = 0;

            for (var i = 0; i < arrayAllValues.length; i++) {
              var valueToCheck = parseInt(arrayAllValues[i], 10);

              if (i === iX + 3) {
                if (valueToCheck < xMin_1) {
                  xMin_1 = valueToCheck;
                }

                if (valueToCheck > xMax_1) {
                  xMax_1 = valueToCheck;
                }

                iX = i;
              }

              if (i === iY + 3) {
                if (valueToCheck < yMin_1) {
                  yMin_1 = valueToCheck;
                }

                if (valueToCheck > yMax_1) {
                  yMax_1 = valueToCheck;
                }

                iY = i;
              }
            }

            xMinSVG = xMin_1;
            xMaxSVG = xMax_1;
            yMinSVG = yMax_1;
            yMaxSVG = yMin_1;
          }
        }

        var xMinSVGCoor = Math.round((xMinSVG - widthInitialSpace / 2) * (100 / widthInitialSpace)) * 2;
        var xMaxSVGCoor = Math.round((xMaxSVG - widthInitialSpace / 2) * (100 / widthInitialSpace)) * 2;
        var yMinSVGCoor = Math.round((yMinSVG - heightInitialSpace / 2) * (100 / heightInitialSpace)) * 2 * -1;
        var yMaxSVGCoor = Math.round((yMaxSVG - heightInitialSpace / 2) * (100 / heightInitialSpace)) * 2 * -1;
        xMin = Math.round(xMinSVG);
        xMax = Math.round(xMaxSVG);
        yMin = Math.round(_this.props.heightImage - yMinSVG);
        yMax = Math.round(_this.props.heightImage - yMaxSVG);

        if (xMin < 0 && xMax < 0) {
          xMin = xMaxSVGCoor;
          xMax = xMinSVGCoor;
        }

        if (yMin < 0 && yMax < 0) {
          yMin = yMaxSVGCoor;
          yMax = yMinSVGCoor;
        }
      } else {
        // region coordinate
        xMin = parseInt(region.coordsDefault.xMin, 10);
        xMax = parseInt(region.coordsDefault.xMax, 10);
        yMin = parseInt(region.coordsDefault.yMin, 10);
        yMax = parseInt(region.coordsDefault.yMax, 10);
      }

      coor4D = {
        xMin: xMin.toString(),
        xMax: xMax.toString(),
        yMin: yMin.toString(),
        yMax: yMax.toString()
      };
      return coor4D;
    };

    _this.getPaddingPoint = function (point, idMultiLink) {
      var result = 0;
      var pointHtml = document.getElementById(point.name);

      if (pointHtml) {
        result = parseInt(pointHtml.style.padding.substring(-2), 10) + parseInt(_this.props.size, 10) / 10;

        if (idMultiLink === 2) {
          result = result / 2;
        }
      }

      return result;
    }; // permet de définir le bon placement X des extrémités du lien :
    // - selon si il y a un ou plusieurs liens entre deux extrémités
    // - selon si l'extrémité A est un point, une région ou le panel
    // - selon si l'extrémité B est un point, une région ou le panel


    _this.definePositionX = function (isIn, idMultiLink) {
      var xResult = 0;
      var arrayRegions = _this.props.options.regionCoordinateSpace;
      var arrayPoints = _this.props.options.arrayPoints;
      var xMinIn = 0;
      var xMaxIn = 0;
      var xMinOut = 0;
      var xMaxOut = 0;
      var yMinIn = 0;
      var yMaxIn = 0;
      var yMinOut = 0;
      var yMaxOut = 0;
      var xMidIn = 0;
      var xMidOut = 0;
      var yMidIn = 0;
      var yMidOut = 0;
      var paddingPoint = 0;

      if (_this.props.associatePointIn !== '' && _this.props.associateRegionOut !== '') {
        // pointIn + regionOut
        //console.log('1');
        arrayPoints.forEach(function (point) {
          paddingPoint = _this.getPaddingPoint(point, idMultiLink);
          var name = point.label || point.name;

          if (name === _this.props.associatePointIn) {
            xMinIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxIn = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxIn = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinIn < 0 && xMaxIn < 0) {
              xMinIn = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinIn < 0 && yMaxIn < 0) {
              yMinIn = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }
        });
        arrayRegions.forEach(function (region) {
          if (region.label === _this.props.associateRegionOut) {
            xMinOut = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxOut = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinOut = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxOut = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }
        });
      } else if (_this.props.associateRegionIn !== '' && _this.props.associatePointOut !== '') {
        // regionIn + pointOut
        //console.log('2');
        arrayRegions.forEach(function (region) {
          if (region.label === _this.props.associateRegionIn) {
            xMinIn = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxIn = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinIn = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxIn = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }
        });
        arrayPoints.forEach(function (point) {
          paddingPoint = _this.getPaddingPoint(point, idMultiLink);
          var name = point.label || point.name;

          if (name === _this.props.associatePointOut) {
            xMinOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxOut = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxOut = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinOut < 0 && xMaxOut < 0) {
              xMinOut = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinOut < 0 && yMaxOut < 0) {
              yMinOut = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }
        });
      } else if (_this.props.associatePointIn === '' && _this.props.associateRegionIn === '' && _this.props.associateRegionOut !== '') {
        // vide + regionOut
        //console.log('3');
        arrayRegions.forEach(function (region) {
          if (region.label === _this.props.associateRegionOut) {
            xMinOut = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxOut = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinOut = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxOut = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }
        });
        xMinIn = parseInt(_this.props.positionXADefault, 10);
        xMaxIn = parseInt(_this.props.positionXADefault, 10);
        yMinIn = parseInt(_this.props.positionYADefault, 10);
        yMaxIn = parseInt(_this.props.positionYADefault, 10);
      } else if (_this.props.associateRegionIn !== '' && _this.props.associatePointOut === '' && _this.props.associateRegionOut === '') {
        // regionIn + vide
        //console.log('4');
        arrayRegions.forEach(function (region) {
          if (region.label === _this.props.associateRegionIn) {
            xMinIn = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxIn = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinIn = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxIn = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }
        });
        xMinOut = parseInt(_this.props.positionXBDefault, 10);
        xMaxOut = parseInt(_this.props.positionXBDefault, 10);
        yMinOut = parseInt(_this.props.positionYBDefault, 10);
        yMaxOut = parseInt(_this.props.positionYBDefault, 10);
      } else if (_this.props.associatePointIn !== '' && _this.props.associatePointOut === '' && _this.props.associateRegionOut === '') {
        // pointIn + vide
        //console.log('5');
        arrayPoints.forEach(function (point) {
          paddingPoint = _this.getPaddingPoint(point, idMultiLink);
          var name = point.label || point.name;

          if (name === _this.props.associatePointIn) {
            xMinIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxIn = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxIn = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinIn < 0 && xMaxIn < 0) {
              xMinIn = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinIn < 0 && yMaxIn < 0) {
              yMinIn = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }
        });
        xMinOut = parseInt(_this.props.positionXBDefault, 10);
        xMaxOut = parseInt(_this.props.positionXBDefault, 10);
        yMinOut = parseInt(_this.props.positionYBDefault, 10);
        yMaxOut = parseInt(_this.props.positionYBDefault, 10);
      } else if (_this.props.associatePointIn === '' && _this.props.associateRegionIn === '' && _this.props.associatePointOut !== '') {
        // vide + pointOut
        //console.log('6');
        arrayPoints.forEach(function (point) {
          paddingPoint = _this.getPaddingPoint(point, idMultiLink);
          var name = point.label || point.name;

          if (name === _this.props.associatePointOut) {
            xMinOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxOut = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxOut = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinOut < 0 && xMaxOut < 0) {
              xMinOut = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinOut < 0 && yMaxOut < 0) {
              yMinOut = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }
        });
        xMinIn = parseInt(_this.props.positionXADefault, 10);
        xMaxIn = parseInt(_this.props.positionXADefault, 10);
        yMinIn = parseInt(_this.props.positionYADefault, 10);
        yMaxIn = parseInt(_this.props.positionYADefault, 10);
      } else if (_this.props.associatePointIn !== '' && _this.props.associatePointOut !== '') {
        // pointIn + pointOut
        //console.log('7');
        arrayPoints.forEach(function (point) {
          paddingPoint = _this.getPaddingPoint(point, idMultiLink);
          var name = point.label || point.name;

          if (name === _this.props.associatePointIn) {
            xMinIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxIn = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxIn = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinIn < 0 && xMaxIn < 0) {
              xMinIn = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinIn < 0 && yMaxIn < 0) {
              yMinIn = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }

          if (name === _this.props.associatePointOut) {
            xMinOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxOut = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxOut = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinOut < 0 && xMaxOut < 0) {
              xMinOut = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinOut < 0 && yMaxOut < 0) {
              yMinOut = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }
        });
      } else {
        //console.log('8');
        arrayRegions.forEach(function (region) {
          if (region.label === _this.props.associateRegionIn) {
            xMinIn = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxIn = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinIn = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxIn = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }

          if (region.label === _this.props.associateRegionOut) {
            xMinOut = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxOut = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinOut = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxOut = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }
        });
      }

      xMidIn = (xMinIn + xMaxIn) / 2;
      xMidOut = (xMinOut + xMaxOut) / 2;
      yMidIn = (yMinIn + yMaxIn) / 2;
      yMidOut = (yMinOut + yMaxOut) / 2;
      var ratioXin = xMidIn / _this.props.widthImage;
      var ratioXout = xMidOut / _this.props.widthImage;

      if (isIn) {
        if (idMultiLink === 0) {
          if (xMidIn > xMidOut) {
            if (yMidIn > yMidOut) {
              //console.log('x1');
              if (xMinIn < 0 && xMaxIn < 0) {
                xResult = xMinIn;
              } else {
                xResult = xMaxIn;
              }
            } else if (yMidIn < yMidOut) {
              //console.log('x2');
              if (xMinIn < 0 && xMaxIn < 0) {
                xResult = xMinIn;
              } else {
                xResult = xMaxIn;
              }
            } else if (yMidIn === yMidOut) {
              //console.log('x3');
              xResult = xMidIn;
            }
          } else if (xMidIn < xMidOut) {
            if (yMidIn > yMidOut) {
              //console.log('x4');
              if (xMinIn < 0 && xMaxIn < 0) {
                xResult = xMinIn;
              } else {
                xResult = xMaxIn;
              }
            } else if (yMidIn < yMidOut) {
              //console.log('x5');
              if (xMinIn < 0 && xMaxIn < 0) {
                xResult = xMaxIn;
              } else {
                xResult = xMinIn;
              }
            } else if (yMidIn === yMidOut) {
              //console.log('x6');
              xResult = xMidIn;
            }
          } else if (xMidIn === xMidOut) {
            //console.log('x7');
            xResult = xMidIn;
          }
        } else if (idMultiLink === 1) {
          if (xMidIn > xMidOut) {
            if (yMidIn > yMidOut) {
              //console.log('x8');
              if (xMinIn < 0 && xMaxIn < 0) {
                xResult = xMinIn;
              } else {
                xResult = xMaxIn;
              }
            } else if (yMidIn < yMidOut) {
              //console.log('x9');
              if (xMinIn < 0 && xMaxIn < 0) {
                xResult = xMaxIn;
              } else {
                xResult = xMinIn;
              }
            } else if (yMidIn === yMidOut) {
              //console.log('x10');
              xResult = xMidIn;
            }
          } else if (xMidIn < xMidOut) {
            if (yMidIn > yMidOut) {
              //console.log('x11');
              if (xMinIn < 0 && xMaxIn < 0) {
                xResult = xMaxIn;
              } else {
                xResult = xMinIn;
              }
            } else if (yMidIn < yMidOut) {
              //console.log('x12');
              if (xMinIn < 0 && xMaxIn < 0) {
                xResult = xMaxIn;
              } else {
                xResult = xMinIn;
              }
            } else if (yMidIn === yMidOut) {
              //console.log('x13');
              xResult = xMidIn;
            }
          } else if (xMidIn === xMidOut) {
            //console.log('x14');
            xResult = xMidIn;
          }
        } else if (idMultiLink === 2) {
          if (_this.props.associatePointIn !== '' && _this.props.associateRegionIn === '') {
            if (yMidIn === yMidOut) {
              if (xMidOut > xMinIn && xMidOut < xMaxIn || xMidOut < xMinIn && xMidOut > xMaxIn) {
                xResult = xMidIn;
              } else if (xMidIn > xMidOut) {
                if (xMinIn < 0 && xMaxIn < 0) {
                  xResult = xMaxIn;
                } else {
                  xResult = xMinIn;
                }
              } else if (xMidIn < xMidOut) {
                if (xMinIn < 0 && xMaxIn < 0) {
                  xResult = xMinIn;
                } else {
                  xResult = xMaxIn;
                }
              } else if (xMidIn === xMidOut) {
                xResult = xMinIn;
              }
            } else {
              if (xMidOut > xMinIn && xMidOut < xMaxIn || xMidOut < xMinIn && xMidOut > xMaxIn) {
                xResult = xMidIn;
              } else if (xMidIn > xMidOut) {
                if (ratioXin - ratioXout < 0.05) {
                  xResult = xMidIn;
                } else if (ratioXin - ratioXout < 0.11) {
                  xResult = xMidIn + paddingPoint - parseInt(_this.props.size, 10) / 2;
                } else if (ratioXin - ratioXout < 0.37) {
                  xResult = xMidIn - paddingPoint / 2;
                } else {
                  if (xMinIn < 0 && xMaxIn < 0) {
                    xResult = xMaxIn;
                  } else {
                    xResult = xMinIn;
                  }
                }
              } else if (xMidIn < xMidOut) {
                if (ratioXout - ratioXin < 0.05) {
                  xResult = xMidIn;
                } else if (ratioXout - ratioXin < 0.11) {
                  xResult = xMidIn - paddingPoint + parseInt(_this.props.size, 10) / 2;
                } else if (ratioXout - ratioXin < 0.37) {
                  xResult = xMidIn + paddingPoint / 2;
                } else {
                  if (xMinIn < 0 && xMaxIn < 0) {
                    xResult = xMinIn;
                  } else {
                    xResult = xMaxIn;
                  }
                }
              } else if (xMidIn === xMidOut) {
                xResult = xMidIn;
              }
            }
          } else if (_this.props.associatePointIn === '' && _this.props.associateRegionIn !== '') {
            if (yMidIn === yMidOut) {
              if (xMidOut > xMinIn && xMidOut < xMaxIn || xMidOut < xMinIn && xMidOut > xMaxIn) {
                xResult = xMidIn;
              } else if (xMidIn > xMidOut) {
                if (xMinIn < 0 && xMaxIn < 0) {
                  xResult = xMaxIn;
                } else {
                  xResult = xMinIn;
                }
              } else if (xMidIn < xMidOut) {
                if (xMinIn < 0 && xMaxIn < 0) {
                  xResult = xMinIn;
                } else {
                  xResult = xMaxIn;
                }
              } else if (xMidIn === xMidOut) {
                xResult = xMinIn;
              }
            } else {
              if (xMidOut > xMinIn && xMidOut < xMaxIn || xMidOut < xMinIn && xMidOut > xMaxIn) {
                xResult = xMidIn;
              } else if (xMidIn > xMidOut) {
                if (xMinIn < 0 && xMaxIn < 0) {
                  xResult = xMaxIn;
                } else {
                  xResult = xMinIn;
                }
              } else if (xMidIn < xMidOut) {
                if (xMinIn < 0 && xMaxIn < 0) {
                  xResult = xMinIn;
                } else {
                  xResult = xMaxIn;
                }
              } else if (xMidIn === xMidOut) {
                xResult = xMidIn;
              }
            }
          }
        }
      } else {
        if (idMultiLink === 0) {
          if (xMidIn > xMidOut) {
            if (yMidIn > yMidOut) {
              //console.log('x15');
              if (xMinOut < 0 && xMaxOut < 0) {
                xResult = xMinOut;
              } else {
                xResult = xMaxOut;
              }
            } else if (yMidIn < yMidOut) {
              //console.log('x16');
              if (xMinOut < 0 && xMaxOut < 0) {
                xResult = xMinOut;
              } else {
                xResult = xMaxOut;
              }
            } else if (yMidIn === yMidOut) {
              //console.log('x17');
              xResult = xMidOut;
            }
          } else if (xMidIn < xMidOut) {
            if (yMidIn > yMidOut) {
              //console.log('x18');
              if (xMinOut < 0 && xMaxOut < 0) {
                xResult = xMinOut;
              } else {
                xResult = xMaxOut;
              }
            } else if (yMidIn < yMidOut) {
              //console.log('x19');
              if (xMinOut < 0 && xMaxOut < 0) {
                xResult = xMinOut;
              } else {
                xResult = xMaxOut;
              }
            } else if (yMidIn === yMidOut) {
              //console.log('x20');
              xResult = xMidOut;
            }
          } else if (xMidIn === xMidOut) {
            //console.log('x21');
            xResult = xMidOut;
          }
        } else if (idMultiLink === 1) {
          if (xMidIn > xMidOut) {
            if (yMidIn > yMidOut) {
              //console.log('x22');
              if (xMinOut < 0 && xMaxOut < 0) {
                xResult = xMinOut;
              } else {
                xResult = xMaxOut;
              }
            } else if (yMidIn < yMidOut) {
              //console.log('x23');
              if (xMinOut < 0 && xMaxOut < 0) {
                xResult = xMaxOut;
              } else {
                xResult = xMinOut;
              }
            } else if (yMidIn === yMidOut) {
              //console.log('x24');
              xResult = xMidOut;
            }
          } else if (xMidIn < xMidOut) {
            if (yMidIn > yMidOut) {
              //console.log('x25');
              if (xMinOut < 0 && xMaxOut < 0) {
                xResult = xMaxOut;
              } else {
                xResult = xMinOut;
              }
            } else if (yMidIn < yMidOut) {
              //console.log('x26');
              if (xMinOut < 0 && xMaxOut < 0) {
                xResult = xMaxOut;
              } else {
                xResult = xMinOut;
              }
            } else if (yMidIn === yMidOut) {
              //console.log('x27');
              xResult = xMidOut;
            }
          } else if (xMidIn === xMidOut) {
            //console.log('x28');
            xResult = xMidOut;
          }
        } else if (idMultiLink === 2) {
          if (_this.props.associatePointOut !== '' && _this.props.associateRegionOut === '') {
            if (yMidIn === yMidOut) {
              if (xMidIn > xMidOut) {
                if (xMinOut < 0 && xMaxOut < 0) {
                  xResult = xMinOut;
                } else {
                  xResult = xMaxOut;
                }
              } else if (xMidIn < xMidOut) {
                if (xMinOut < 0 && xMaxOut < 0) {
                  xResult = xMaxOut;
                } else {
                  xResult = xMinOut;
                }
              } else if (xMidIn === xMidOut) {
                xResult = xMinOut;
              }
            } else {
              if (xMidIn > xMinOut && xMidIn < xMaxOut || xMidIn < xMinOut && xMidIn > xMaxOut) {
                xResult = xMidOut;
              } else if (xMidIn > xMidOut) {
                if (ratioXin - ratioXout < 0.23) {
                  xResult = xMidOut;
                } else {
                  if (xMinOut < 0 && xMaxOut < 0) {
                    xResult = xMinOut;
                  } else {
                    xResult = xMaxOut;
                  }
                }
              } else if (xMidIn < xMidOut) {
                if (ratioXout - ratioXin < 0.23) {
                  xResult = xMidOut;
                } else {
                  if (xMinOut < 0 && xMaxOut < 0) {
                    xResult = xMaxOut;
                  } else {
                    xResult = xMinOut;
                  }
                }
              } else if (xMidIn === xMidOut) {
                xResult = xMidOut;
              }
            }
          } else if (_this.props.associatePointOut === '' && _this.props.associateRegionOut !== '') {
            if (xMidIn > xMinOut && xMidIn < xMaxOut || xMidIn < xMinOut && xMidIn > xMaxOut) {
              xResult = xMidOut;
            } else if (xMidIn > xMidOut) {
              if (xMinOut < 0 && xMaxOut < 0) {
                xResult = xMinOut;
              } else {
                xResult = xMaxOut;
              }
            } else if (xMidIn < xMidOut) {
              if (xMinOut < 0 && xMaxOut < 0) {
                xResult = xMaxOut;
              } else {
                xResult = xMinOut;
              }
            } else if (xMidIn === xMidOut) {
              xResult = xMidOut;
            }
          }
        }
      }

      var newArrayOrientedLink = _this.props.options.arrayOrientedLinks;
      newArrayOrientedLink.forEach(function (orientedLink) {
        if (orientedLink.name === _this.props.name) {
          if (isIn) {
            orientedLink.pointAPositionX = xResult.toString();
            orientedLink.pointAPositionXDefault = xResult.toString();
          } else {
            orientedLink.pointBPositionX = xResult.toString();
            orientedLink.pointBPositionXDefault = xResult.toString();
          }
        }
      });
      _this.props.options.arrayOrientedLinks = newArrayOrientedLink;
      return xResult;
    }; // permet de définir le bon placement Y des extrémités du lien :
    // - selon si il y a un ou plusieurs liens entre deux extrémités
    // - selon si l'extrémité A est un point, une région ou le panel
    // - selon si l'extrémité B est un point, une région ou le panel


    _this.definePositionY = function (isIn, idMultiLink) {
      var yResult = 0;
      var arrayPoints = _this.props.options.arrayPoints;
      var arrayRegions = _this.props.options.regionCoordinateSpace;
      var xMinIn = 0;
      var xMaxIn = 0;
      var xMinOut = 0;
      var xMaxOut = 0;
      var yMinIn = 0;
      var yMaxIn = 0;
      var yMinOut = 0;
      var yMaxOut = 0;
      var xMidIn = 0;
      var xMidOut = 0;
      var yMidIn = 0;
      var yMidOut = 0;

      if (_this.props.associatePointIn !== '' && _this.props.associateRegionOut !== '') {
        arrayPoints.forEach(function (point) {
          var paddingPoint = _this.getPaddingPoint(point, idMultiLink);

          var name = point.label || point.name;

          if (name === _this.props.associatePointIn) {
            xMinIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxIn = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxIn = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinIn < 0 && xMaxIn < 0) {
              xMinIn = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinIn < 0 && yMaxIn < 0) {
              yMinIn = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }
        });
        arrayRegions.forEach(function (region) {
          if (region.label === _this.props.associateRegionOut) {
            xMinOut = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxOut = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinOut = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxOut = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }
        });
      } else if (_this.props.associateRegionIn !== '' && _this.props.associatePointOut !== '') {
        arrayRegions.forEach(function (region) {
          if (region.label === _this.props.associateRegionIn) {
            xMinIn = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxIn = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinIn = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxIn = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }
        });
        arrayPoints.forEach(function (point) {
          var paddingPoint = _this.getPaddingPoint(point, idMultiLink);

          var name = point.label || point.name;

          if (name === _this.props.associatePointOut) {
            xMinOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxOut = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxOut = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinOut < 0 && xMaxOut < 0) {
              xMinOut = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinOut < 0 && yMaxOut < 0) {
              yMinOut = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }
        });
      } else if (_this.props.associatePointIn === '' && _this.props.associateRegionIn === '' && _this.props.associateRegionOut !== '') {
        arrayRegions.forEach(function (region) {
          if (region.label === _this.props.associateRegionOut) {
            xMinOut = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxOut = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinOut = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxOut = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }
        });
        xMinIn = parseInt(_this.props.positionXADefault, 10);
        xMaxIn = parseInt(_this.props.positionXADefault, 10);
        yMinIn = parseInt(_this.props.positionYADefault, 10);
        yMaxIn = parseInt(_this.props.positionYADefault, 10);
      } else if (_this.props.associateRegionIn !== '' && _this.props.associatePointOut === '' && _this.props.associateRegionOut === '') {
        arrayRegions.forEach(function (region) {
          if (region.label === _this.props.associateRegionIn) {
            xMinIn = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxIn = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinIn = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxIn = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }
        });
        xMinOut = parseInt(_this.props.positionXBDefault, 10);
        xMaxOut = parseInt(_this.props.positionXBDefault, 10);
        yMinOut = parseInt(_this.props.positionYBDefault, 10);
        yMaxOut = parseInt(_this.props.positionYBDefault, 10);
      } else if (_this.props.associatePointIn !== '' && _this.props.associatePointOut === '' && _this.props.associateRegionOut === '') {
        arrayPoints.forEach(function (point) {
          var paddingPoint = _this.getPaddingPoint(point, idMultiLink);

          var name = point.label || point.name;

          if (name === _this.props.associatePointIn) {
            xMinIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxIn = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxIn = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinIn < 0 && xMaxIn < 0) {
              xMinIn = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinIn < 0 && yMaxIn < 0) {
              yMinIn = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }
        });
        xMinOut = parseInt(_this.props.positionXBDefault, 10);
        xMaxOut = parseInt(_this.props.positionXBDefault, 10);
        yMinOut = parseInt(_this.props.positionYBDefault, 10);
        yMaxOut = parseInt(_this.props.positionYBDefault, 10);
      } else if (_this.props.associatePointIn === '' && _this.props.associateRegionIn === '' && _this.props.associatePointOut !== '') {
        arrayPoints.forEach(function (point) {
          var paddingPoint = _this.getPaddingPoint(point, idMultiLink);

          var name = point.label || point.name;

          if (name === _this.props.associatePointOut) {
            xMinOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxOut = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxOut = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinOut < 0 && xMaxOut < 0) {
              xMinOut = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinOut < 0 && yMaxOut < 0) {
              yMinOut = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }
        });
        xMinIn = parseInt(_this.props.positionXADefault, 10);
        xMaxIn = parseInt(_this.props.positionXADefault, 10);
        yMinIn = parseInt(_this.props.positionYADefault, 10);
        yMaxIn = parseInt(_this.props.positionYADefault, 10);
      } else if (_this.props.associatePointIn !== '' && _this.props.associatePointOut !== '') {
        arrayPoints.forEach(function (point) {
          var paddingPoint = _this.getPaddingPoint(point, idMultiLink);

          var name = point.label || point.name;

          if (name === _this.props.associatePointIn) {
            xMinIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxIn = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxIn = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinIn < 0 && xMaxIn < 0) {
              xMinIn = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxIn = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinIn < 0 && yMaxIn < 0) {
              yMinIn = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxIn = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }

          if (name === _this.props.associatePointOut) {
            xMinOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            xMaxOut = parseInt(point.positionXDefault, 10) + paddingPoint;
            yMinOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            yMaxOut = parseInt(point.positionYDefault, 10) + paddingPoint;

            if (xMinOut < 0 && xMaxOut < 0) {
              xMinOut = parseInt(point.positionXDefault, 10) + paddingPoint;
              xMaxOut = parseInt(point.positionXDefault, 10) - paddingPoint;
            }

            if (yMinOut < 0 && yMaxOut < 0) {
              yMinOut = parseInt(point.positionYDefault, 10) + paddingPoint;
              yMaxOut = parseInt(point.positionYDefault, 10) - paddingPoint;
            }
          }
        });
      } else {
        arrayRegions.forEach(function (region) {
          if (region.label === _this.props.associateRegionIn) {
            xMinIn = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxIn = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinIn = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxIn = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }

          if (region.label === _this.props.associateRegionOut) {
            xMinOut = parseInt(_this.defineCoor4DRegion(region).xMin, 10);
            xMaxOut = parseInt(_this.defineCoor4DRegion(region).xMax, 10);
            yMinOut = parseInt(_this.defineCoor4DRegion(region).yMin, 10);
            yMaxOut = parseInt(_this.defineCoor4DRegion(region).yMax, 10);
          }
        });
      }

      xMidIn = (xMinIn + xMaxIn) / 2;
      xMidOut = (xMinOut + xMaxOut) / 2;
      yMidIn = (yMinIn + yMaxIn) / 2;
      yMidOut = (yMinOut + yMaxOut) / 2;

      if (isIn) {
        if (idMultiLink === 0) {
          if (yMidIn > yMidOut) {
            if (xMidIn > xMidOut) {
              //console.log('y1');
              if (yMinIn < 0 && yMaxIn < 0) {
                yResult = yMaxIn;
              } else {
                yResult = yMinIn;
              }
            } else if (xMidIn < xMidOut) {
              //console.log('y2');
              if (yMinIn < 0 && yMaxIn < 0) {
                yResult = yMinIn;
              } else {
                yResult = yMaxIn;
              }
            } else if (xMidIn === xMidOut) {
              //console.log('y3');
              yResult = yMidIn;
            }
          } else if (yMidIn < yMidOut) {
            if (xMidIn > xMidOut) {
              //console.log('y4');
              if (yMinIn < 0 && yMaxIn < 0) {
                yResult = yMinIn;
              } else {
                yResult = yMaxIn;
              }
            } else if (xMidIn < xMidOut) {
              //console.log('y5');
              if (yMinIn < 0 && yMaxIn < 0) {
                yResult = yMaxIn;
              } else {
                yResult = yMinIn;
              }
            } else if (xMidIn === xMidOut) {
              //console.log('y6');
              yResult = yMidIn;
            }
          } else if (yMidIn === yMidOut) {
            //console.log('y7');
            yResult = yMidIn;
          }
        } else if (idMultiLink === 1) {
          if (yMidIn > yMidOut) {
            if (xMidIn > xMidOut) {
              //console.log('y8');
              if (yMinIn < 0 && yMaxIn < 0) {
                yResult = yMinIn;
              } else {
                yResult = yMaxIn;
              }
            } else if (xMidIn < xMidOut) {
              //console.log('y9');
              if (yMinIn < 0 && yMaxIn < 0) {
                yResult = yMaxIn;
              } else {
                yResult = yMinIn;
              }
            } else if (xMidIn === xMidOut) {
              //console.log('y10');
              yResult = yMidIn;
            }
          } else if (yMidIn < yMidOut) {
            if (xMidIn > xMidOut) {
              //console.log('y11');
              if (yMinIn < 0 && yMaxIn < 0) {
                yResult = yMaxIn;
              } else {
                yResult = yMinIn;
              }
            } else if (xMidIn < xMidOut) {
              //console.log('y12');
              if (yMinIn < 0 && yMaxIn < 0) {
                yResult = yMinIn;
              } else {
                yResult = yMaxIn;
              }
            } else if (xMidIn === xMidOut) {
              //console.log('y13');
              yResult = yMidIn;
            }
          } else if (yMidIn === yMidOut) {
            //console.log('y14');
            yResult = yMidIn;
          }
        } else if (idMultiLink === 2) {
          if (_this.props.associatePointIn !== '' && _this.props.associateRegionIn === '') {
            if (xMidIn === xMidOut) {
              if (yMidIn > yMidOut) {
                if (yMinIn < 0 && yMaxIn < 0) {
                  yResult = yMaxIn;
                } else {
                  yResult = yMinIn;
                }
              } else if (yMidIn < yMidOut) {
                if (yMinIn < 0 && yMaxIn < 0) {
                  yResult = yMinIn;
                } else {
                  yResult = yMaxIn;
                }
              }
            } else {
              yResult = yMidIn;
            }
          } else if (_this.props.associatePointIn === '' && _this.props.associateRegionIn !== '') {
            if (yMidIn > yMidOut) {
              if (yMinIn < 0 && yMaxIn < 0) {
                yResult = yMaxIn;
              } else {
                yResult = yMinIn;
              }
            } else if (yMidIn < yMidOut) {
              if (yMinIn < 0 && yMaxIn < 0) {
                yResult = yMinIn;
              } else {
                yResult = yMaxIn;
              }
            } else if (yMidIn === yMidOut) {
              yResult = yMidIn;
            }
          }
        }
      } else {
        // ce lien est le premier parmis deux ou trois liens
        if (idMultiLink === 0) {
          if (yMidIn > yMidOut) {
            if (xMidIn > xMidOut) {
              //console.log('y15');
              if (yMinOut < 0 && yMaxOut < 0) {
                yResult = yMaxOut;
              } else {
                yResult = yMinOut;
              }
            } else if (xMidIn < xMidOut) {
              //console.log('y16');
              if (yMinOut < 0 && yMaxOut < 0) {
                yResult = yMinOut;
              } else {
                yResult = yMaxOut;
              }
            } else if (xMidIn === xMidOut) {
              //console.log('y17');
              yResult = yMidOut;
            }
          } else if (yMidIn < yMidOut) {
            if (xMidIn > xMidOut) {
              //console.log('y18');
              if (yMinOut < 0 && yMaxOut < 0) {
                yResult = yMinOut;
              } else {
                yResult = yMaxOut;
              }
            } else if (xMidIn < xMidOut) {
              //console.log('y19');
              if (yMinOut < 0 && yMaxOut < 0) {
                yResult = yMaxOut;
              } else {
                yResult = yMinOut;
              }
            } else if (xMidIn === xMidOut) {
              //console.log('y20');
              yResult = yMidOut;
            }
          } else if (yMidIn === yMidOut) {
            //console.log('y21');
            yResult = yMidOut;
          } // ce lien est le deuxième parmis deux ou trois liens

        } else if (idMultiLink === 1) {
          if (yMidIn > yMidOut) {
            if (xMidIn > xMidOut) {
              //console.log('y22');
              if (yMinOut < 0 && yMaxOut < 0) {
                yResult = yMinOut;
              } else {
                yResult = yMaxOut;
              }
            } else if (xMidIn < xMidOut) {
              //console.log('y23');
              if (yMinOut < 0 && yMaxOut < 0) {
                yResult = yMaxOut;
              } else {
                yResult = yMinOut;
              }
            } else if (xMidIn === xMidOut) {
              //console.log('y24');
              yResult = yMidOut;
            }
          } else if (yMidIn < yMidOut) {
            if (xMidIn > xMidOut) {
              //console.log('y25');
              if (yMinOut < 0 && yMaxOut < 0) {
                yResult = yMaxOut;
              } else {
                yResult = yMinOut;
              }
            } else if (xMidIn < xMidOut) {
              //console.log('y26');
              if (yMinOut < 0 && yMaxOut < 0) {
                yResult = yMinOut;
              } else {
                yResult = yMaxOut;
              }
            } else if (xMidIn === xMidOut) {
              //console.log('y27');
              yResult = yMidOut;
            }
          } else if (yMidIn === yMidOut) {
            //console.log('y28');
            yResult = yMidOut;
          } // le lien est seul ou au milieu de trois liens

        } else if (idMultiLink === 2) {
          // un point en sortie
          if (_this.props.associatePointOut !== '' && _this.props.associateRegionOut === '') {
            if (xMidIn === xMidOut) {
              if (yMidIn > yMidOut) {
                if (yMinOut < 0 && yMaxOut < 0) {
                  yResult = yMinOut;
                } else {
                  yResult = yMaxOut;
                }
              } else if (yMidIn < yMidOut) {
                if (yMinOut < 0 && yMaxOut < 0) {
                  yResult = yMaxOut;
                } else {
                  yResult = yMinOut;
                }
              }
            } else {
              yResult = yMidOut;
            } // une région en sortie

          } else if (_this.props.associatePointOut === '' && _this.props.associateRegionOut !== '') {
            if (yMidIn > yMidOut) {
              if (yMinOut < 0 && yMaxOut < 0) {
                yResult = yMinOut;
              } else {
                yResult = yMaxOut;
              }
            } else if (yMidIn < yMidOut) {
              if (yMinOut < 0 && yMaxOut < 0) {
                yResult = yMaxOut;
              } else {
                yResult = yMinOut;
              }
            } else if (yMidIn === yMidOut) {
              yResult = yMidOut;
            }
          }
        }
      }

      var newArrayOrientedLink = _this.props.options.arrayOrientedLinks;
      newArrayOrientedLink.forEach(function (orientedLink) {
        if (orientedLink.name === _this.props.name) {
          if (isIn) {
            orientedLink.pointAPositionY = yResult.toString();
            orientedLink.pointAPositionYDefault = yResult.toString();
          } else {
            orientedLink.pointBPositionY = yResult.toString();
            orientedLink.pointBPositionYDefault = yResult.toString();
          }
        }
      });
      _this.props.options.arrayOrientedLinks = newArrayOrientedLink;
      return yResult;
    };

    _this.desactiveLink = function (event) {
      // const inputFollowingLink: any = document.getElementById('followLink');
      // if (inputFollowingLink) {
      //   if (inputFollowingLink.defaultValue === '') {
      //     event.preventDefault();
      //   }
      // } else if (this.props.linkUrl.followLink === '') {
      //   event.preventDefault();
      // }
      if (_this.props.linkUrl.followLink === '') {
        event.preventDefault();
      }
    };

    _this.defineCursor = function () {
      var result = 'pointer'; // const inputFollowingLink: any = document.getElementById('followLink');
      // if (inputFollowingLink) {
      //   if (inputFollowingLink.defaultValue === '') {
      //     result = 'default';
      //   }
      // } else if (this.props.linkUrl.followLink === '') {
      //   result = 'default';
      // }

      if (_this.props.linkUrl.followLink === '') {
        result = 'default';
      }

      return result;
    };

    _this.defineMainMetric = function (mainMetric) {
      var result = '';
      var unit = _this.props.textObject.valueGenerateObjectText.unit;
      var decimal = _this.props.textObject.valueGenerateObjectText.numericFormatElement;
      var roundValue = parseInt(decimal, 10) || 1;

      if (decimal !== '') {
        result = parseFloat(mainMetric).toPrecision(roundValue) + ' ' + unit;
      } else {
        result = mainMetric + ' ' + unit;
      }

      return result;
    };

    _this.defineAuxMetric = function (auxMetric) {
      var result = '';
      var unit = _this.props.textObject.generateAuxiliaryElement.unit;
      var decimal = _this.props.textObject.generateAuxiliaryElement.numericFormatElement;
      var roundValue = parseInt(decimal, 10) || 1;

      if (decimal !== '') {
        result = parseFloat(auxMetric).toPrecision(roundValue) + ' ' + unit;
      } else {
        result = auxMetric + ' ' + unit;
      }

      return result;
    };

    _this.defineTextObject = function (mainMetric) {
      var htmlTextObject = [];
      var htmlMainMetric = [];
      var dislayTextObjectInTooltip = _this.props.textObject.isTextTooltip;
      var textColorTextObject = _this.props.textObject.colorText;
      var backColoTextObject = _this.props.textObject.colorBack;
      var displayMainMetric = _this.props.textObject.generateObjectText;
      var displayMainMetricInTooltip = _this.props.textObject.valueGenerateObjectText.displayObjectInTooltip;
      var addTextColorMainMetric = _this.props.textObject.valueGenerateObjectText.addColorTextElement;
      var addBackColorMainMetric = _this.props.textObject.valueGenerateObjectText.addColorBackElement;
      var textColorMainMetric = _this.props.textObject.valueGenerateObjectText.colorTextElement;
      var backColorMainMetric = _this.props.textObject.valueGenerateObjectText.colorBackElement;
      var legendMainMetric = _this.props.textObject.valueGenerateObjectText.legendElement;
      var styleLabel = {
        color: textColorTextObject,
        backgroundColor: backColoTextObject,
        textAlign: 'center',
        margin: 0,
        padding: '0 5px'
      };
      var styleMainMetric = {
        color: addTextColorMainMetric ? textColorMainMetric : textColorTextObject,
        margin: 0,
        padding: 0,
        whiteSpace: 'nowrap'
      };

      if (!dislayTextObjectInTooltip) {
        htmlTextObject.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: 'contentTextObject1' + _this.props.name,
          style: styleLabel
        }, _this.props.label || _this.props.name.toUpperCase()));
      }

      if (displayMainMetric) {
        if (!displayMainMetricInTooltip) {
          if (legendMainMetric) {
            htmlMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: 'contentTextObject2' + _this.props.name,
              style: styleMainMetric
            }, legendMainMetric));
          } // Condition Display NaN none Oriented Link


          htmlMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: 'contentTextObject3' + _this.props.name,
            style: styleMainMetric
          }, !isNaN(parseFloat(_this.defineMainMetric(mainMetric))) && _this.defineMainMetric(mainMetric)));
        }
      }

      var styleMainDiv = {
        backgroundColor: backColoTextObject,
        border: '1px solid black'
      };

      if (!displayMainMetric || displayMainMetric && displayMainMetricInTooltip) {
        styleMainDiv = {
          backgroundColor: backColoTextObject
        };
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: styleMainDiv
      }, htmlTextObject, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          backgroundColor: addBackColorMainMetric ? backColorMainMetric : backColoTextObject,
          padding: '0 5px'
        }
      }, htmlMainMetric));
    };

    _this.defineHtmlLinkTooltip = function () {
      var result = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);

      if (_this.props.linkUrl.hoveringTooltipText !== '') {
        result = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
          href: _this.props.linkUrl.hoveringTooltipLink,
          target: "_blank",
          rel: "noopener noreferrer"
        }, _this.props.linkUrl.hoveringTooltipText);
      }

      return result;
    };

    _this.defineValueTooptip = function (typeLink, link) {
      var contentTooltip = [];
      var contentTooltipMainMetric = [];
      var contentTooltipAuxMetric = [];
      var contentTooltipMetaData = [];
      var valueMainMetricA = _this.props.valueMainMetricA;
      var valueMainMetricB = _this.props.valueMainMetricB;
      var refMainMetricA = _this.props.refMainMetricA;
      var refMainMetricB = _this.props.refMainMetricB;
      var dislayTextObjectInTooltip = _this.props.textObject.isTextTooltip;
      var textColorTextObject = _this.props.textObject.colorText;
      var backColoTextObject = _this.props.textObject.colorBack;
      var displayMainMetric = _this.props.textObject.generateObjectText;
      var displayMainMetricInTooltip = _this.props.textObject.valueGenerateObjectText.displayObjectInTooltip;
      var addTextColorMainMetric = _this.props.textObject.valueGenerateObjectText.addColorTextElement;
      var addBackColorMainMetric = _this.props.textObject.valueGenerateObjectText.addColorBackElement;
      var textColorMainMetric = _this.props.textObject.valueGenerateObjectText.colorTextElement;
      var backColorMainMetric = _this.props.textObject.valueGenerateObjectText.colorBackElement;
      var legendMainMetric = _this.props.textObject.valueGenerateObjectText.legendElement;
      var displayAuxMetricInTooltip = _this.props.textObject.generateAuxiliaryElement.displayObjectInTooltip;
      var addTextColorAuxMetric = _this.props.textObject.generateAuxiliaryElement.addColorTextElement;
      var addBackColorAuxMetric = _this.props.textObject.generateAuxiliaryElement.addColorBackElement;
      var textColorAuxMetric = _this.props.textObject.generateAuxiliaryElement.colorTextElement;
      var backColorAuxMetric = _this.props.textObject.generateAuxiliaryElement.colorBackElement;
      var legendAuxMetric = _this.props.textObject.generateAuxiliaryElement.legendElement;
      var styleMainTitle = {
        fontFamily: _this.props.police,
        fontSize: '11px',
        marginBottom: '0px',
        textAlign: 'center',
        color: textColorTextObject,
        backgroundColor: backColoTextObject
      };
      var styleTitleMainMetric = {
        fontFamily: _this.props.police,
        fontSize: '10px',
        marginTop: '5px',
        marginBottom: '0px',
        color: addTextColorMainMetric ? textColorMainMetric : textColorTextObject
      };
      var styleTitleAuxMetric = {
        fontFamily: _this.props.police,
        fontSize: '10px',
        marginTop: '5px',
        marginBottom: '0px',
        color: addTextColorAuxMetric ? textColorAuxMetric : textColorTextObject
      };
      var styleTitle2MainMetric = {
        fontFamily: _this.props.police,
        fontSize: '10px',
        marginTop: '5px',
        marginLeft: '5px',
        marginBottom: '0px',
        color: addTextColorMainMetric ? textColorMainMetric : textColorTextObject
      };
      var styleTitle2AuxMetric = {
        fontFamily: _this.props.police,
        fontSize: '10px',
        marginTop: '5px',
        marginLeft: '5px',
        marginBottom: '0px',
        color: addTextColorAuxMetric ? textColorAuxMetric : textColorTextObject
      };
      var styleTitleMetaData = {
        fontFamily: _this.props.police,
        fontSize: '10px',
        marginTop: '5px',
        marginBottom: '0px',
        color: 'white'
      };
      var styleContentMainMetrics = {
        fontFamily: _this.props.police,
        fontSize: '9px',
        marginLeft: '10px',
        marginBottom: '0px',
        color: addTextColorMainMetric ? textColorMainMetric : textColorTextObject
      };
      var styleContentAuxMetrics = {
        fontFamily: _this.props.police,
        fontSize: '9px',
        marginLeft: '10px',
        marginBottom: '0px',
        color: addTextColorAuxMetric ? textColorAuxMetric : textColorTextObject
      };

      if (dislayTextObjectInTooltip) {
        contentTooltip.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: 'contentTooltip1' + _this.props.name,
          style: styleMainTitle
        }, _this.props.label || _this.props.name.toUpperCase()));
      }

      if (displayMainMetric) {
        if (displayMainMetricInTooltip) {
          if (legendMainMetric) {
            contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              style: styleTitleMainMetric
            }, legendMainMetric));
          }

          contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: 'contentTooltip1' + _this.props.name,
            style: styleTitleMainMetric
          }, "Main Metric"));

          if (typeLink === 'bidirectional') {
            if (link === 'A') {
              contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: 'contentTooltip2' + _this.props.name,
                style: styleTitle2MainMetric
              }, "+ Link A"));
              contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: 'contentTooltip3' + _this.props.name,
                style: styleContentMainMetrics
              }, ' ', "- Reference : ", refMainMetricA));
              contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: 'contentTooltip4' + _this.props.name,
                style: styleContentMainMetrics
              }, ' ', "- Value : ", _this.defineMainMetric(valueMainMetricA)));
            } else {
              contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: 'contentTooltip5' + _this.props.name,
                style: styleTitle2MainMetric
              }, "+ Link B"));
              contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: 'contentTooltip6' + _this.props.name,
                style: styleContentMainMetrics
              }, ' ', "- Reference : ", refMainMetricB));
              contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: 'contentTooltip7' + _this.props.name,
                style: styleContentMainMetrics
              }, ' ', "- Value : ", _this.defineMainMetric(valueMainMetricB)));
            }
          } else if (typeLink === 'monodirectional') {
            contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: 'contentTooltip8' + _this.props.name,
              style: styleContentMainMetrics
            }, ' ', "- Reference : ", refMainMetricA));
            contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: 'contentTooltip9' + _this.props.name,
              style: styleContentMainMetrics
            }, ' ', "- Value : ", _this.defineMainMetric(valueMainMetricA)));
          }
        }
      }

      if (displayAuxMetricInTooltip) {
        if (legendAuxMetric) {
          contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            style: styleTitleAuxMetric
          }, legendAuxMetric));
        }

        if (typeLink === 'bidirectional') {
          if (link === 'A') {
            if (_this.props.auxiliaryMetrics.length > 0) {
              contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: 'contentTooltip10' + _this.props.name,
                style: styleTitleAuxMetric
              }, "Auxiliary Metric"));
              var index_1 = 1;

              _this.props.auxiliaryMetrics.forEach(function (metric) {
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_1.toString() + 'contentTooltip11' + _this.props.name,
                  style: styleTitle2AuxMetric
                }, "+ Metric ", index_1));
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_1.toString() + 'contentTooltip12' + _this.props.name,
                  style: styleContentAuxMetrics
                }, "- Reference : ", metric.refId));
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_1.toString() + 'contentTooltip13' + _this.props.name,
                  style: styleContentAuxMetrics
                }, "- Value :", ' ', !isNaN(parseFloat(_this.defineAuxMetric(_this.props.valuesAuxiliaryMetrics[index_1 - 1]))) && _this.defineAuxMetric(_this.props.valuesAuxiliaryMetrics[index_1 - 1])));
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_1.toString() + 'contentTooltip14' + _this.props.name,
                  style: styleContentAuxMetrics
                }, "- Key : ", metric.key));
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_1.toString() + 'contentTooltip15' + _this.props.name,
                  style: styleContentAuxMetrics
                }, "- KeyValue : ", metric.keyValue));
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_1.toString() + 'contentTooltip16' + _this.props.name,
                  style: styleContentAuxMetrics
                }, "- Type : ", metric.manageValue));
                index_1++;
              });
            }
          } else {
            if (_this.props.auxiliaryMetricsB.length > 0) {
              contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: 'contentTooltip17' + _this.props.name,
                style: styleTitleAuxMetric
              }, "Auxiliary Metric"));
              var index_2 = 1;

              _this.props.auxiliaryMetricsB.forEach(function (metricB) {
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_2.toString() + 'contentTooltip18' + _this.props.name,
                  style: styleTitle2AuxMetric
                }, "+ Metric ", index_2));
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_2.toString() + 'contentTooltip19' + _this.props.name,
                  style: styleContentAuxMetrics
                }, "- Reference : ", metricB.refId));
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_2.toString() + 'contentTooltip20' + _this.props.name,
                  style: styleContentAuxMetrics
                }, "- Value :", ' ', !isNaN(parseFloat(_this.defineAuxMetric(_this.props.valuesAuxiliaryMetricsB[index_2 - 1]))) && _this.defineAuxMetric(_this.props.valuesAuxiliaryMetricsB[index_2 - 1])));
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_2.toString() + 'contentTooltip21' + _this.props.name,
                  style: styleContentAuxMetrics
                }, "- Key : ", metricB.key));
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_2.toString() + 'contentTooltip22' + _this.props.name,
                  style: styleContentAuxMetrics
                }, "- KeyValue : ", metricB.keyValue));
                contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                  key: index_2.toString() + 'contentTooltip23' + _this.props.name,
                  style: styleContentAuxMetrics
                }, "- Type : ", metricB.manageValue));
                index_2++;
              });
            }
          }
        } else if (typeLink === 'monodirectional') {
          if (_this.props.auxiliaryMetrics.length > 0) {
            contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: 'contentTooltip24' + _this.props.name,
              style: styleTitleAuxMetric
            }, "Auxiliary Metric"));
            var index_3 = 1;

            _this.props.auxiliaryMetrics.forEach(function (metric) {
              contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: index_3.toString() + 'contentTooltip25' + _this.props.name,
                style: styleTitle2AuxMetric
              }, "+ Metric ", index_3));
              contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: index_3.toString() + 'contentTooltip26' + _this.props.name,
                style: styleContentAuxMetrics
              }, "- Reference : ", metric.refId));
              contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: index_3.toString() + 'contentTooltip27' + _this.props.name,
                style: styleContentAuxMetrics
              }, "- Value :", ' ', !isNaN(parseFloat(_this.defineAuxMetric(_this.props.valuesAuxiliaryMetrics[index_3 - 1]))) && _this.defineAuxMetric(_this.props.valuesAuxiliaryMetrics[index_3 - 1])));
              contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: index_3.toString() + 'contentTooltip28' + _this.props.name,
                style: styleContentAuxMetrics
              }, "- Key : ", metric.key));
              contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: index_3.toString() + 'contentTooltip29' + _this.props.name,
                style: styleContentAuxMetrics
              }, "- KeyValue : ", metric.keyValue));
              contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                key: index_3.toString() + 'contentTooltip30' + _this.props.name,
                style: styleContentAuxMetrics
              }, "- Type : ", metric.manageValue));
              index_3++;
            });
          }
        }
      }

      if (_this.props.metaData.length !== 0) {
        contentTooltipMetaData.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: 'ContentTooltip31' + _this.props.name,
          style: styleTitleMetaData
        }, "Metadata"));

        _this.props.metaData.forEach(function (oneMetaData, index) {
          var styleContentMetaData = {
            color: oneMetaData.obj.colorText,
            backgroundColor: oneMetaData.obj.colorBack,
            fontWeight: oneMetaData.obj.style.bold ? 'bold' : 'normal',
            fontStyle: oneMetaData.obj.style.italic ? 'italic' : 'normal',
            textDecoration: oneMetaData.obj.style.underline ? 'underline' : 'none',
            fontFamily: _this.props.police,
            fontSize: '9px',
            marginLeft: '10px',
            marginBottom: '0px'
          };
          contentTooltipMetaData.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: index + 'ContentTooltip32' + _this.props.name,
            style: styleContentMetaData
          }, "- ", oneMetaData.meta));
        });
      }

      if (contentTooltip.length === 0 && contentTooltipAuxMetric.length === 0 && contentTooltipMainMetric.length === 0 && contentTooltipMetaData.length === 0 && !_this.props.linkUrl.hoveringTooltipText) {
        return null;
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          border: '1px solid black',
          padding: 0
        }
      }, contentTooltip, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          backgroundColor: addBackColorMainMetric ? backColorMainMetric : backColoTextObject,
          padding: '0 5px'
        }
      }, contentTooltipMainMetric), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          backgroundColor: addBackColorAuxMetric ? backColorAuxMetric : backColoTextObject,
          padding: '0 5px'
        }
      }, contentTooltipAuxMetric), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          padding: '0 5px'
        }
      }, contentTooltipMetaData), _this.defineHtmlLinkTooltip());
    };

    _this.defineTextDecoration = function () {
      var mainStyle = _this.props.textObject.style;
      var result = '';

      if (mainStyle.underline) {
        result = 'underline';
      } else {
        if (_this.props.options.display.style.underline) {
          result = 'underline';
        } else {
          result = 'none';
        }
      }

      return result;
    };

    _this.defineFontStyle = function () {
      var mainStyle = _this.props.textObject.style;
      var result = '';

      if (mainStyle.italic) {
        result = 'italic';
      } else {
        if (_this.props.options.display.style.italic) {
          result = 'italic';
        } else {
          result = 'normal';
        }
      }

      return result;
    };

    _this.defineFontWeight = function () {
      var mainStyle = _this.props.textObject.style;
      var result = '';

      if (mainStyle.bold) {
        result = 'bold';
      } else {
        if (_this.props.options.display.style.bold) {
          result = 'bold';
        } else {
          result = 'normal';
        }
      }

      return result;
    };

    _this.defineColorTextLabel = function () {
      var result = '';

      if (_this.props.textObject.colorText) {
        result = _this.props.textObject.colorText;
      } else {
        result = 'black';
      }

      return result;
    };

    _this.defineSizeLink = function () {
      var result = '';

      if (_this.props.size) {
        var size = _this.props.size || '';
        result = size;
      } else {
        result = '2';
      }

      return result;
    };

    _this.state = {};
    return _this;
  }
  /**
   * détermine la valeur de X pour les points A, B et C du lien en fonction des limites
   * de l'initialSpace
   * @param coordinateX
   *
   */


  DrawOrientedLink.prototype.defineLimitX = function (coordinateX) {
    var result = coordinateX;
    var xMin = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMin, 10);
    var xMax = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMax, 10);

    if (coordinateX < xMin) {
      result = xMin;
    } else if (coordinateX > xMax) {
      result = xMax;
    }

    return result;
  };
  /**
   * détermine la valeur de Y pour les points A, B et C du lien en fonction des limites
   * de l'initialSpace
   * @param coordinateY
   *
   */


  DrawOrientedLink.prototype.defineLimitY = function (coordinateY) {
    var result = coordinateY;
    var yMin = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMin, 10);
    var yMax = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMax, 10);

    if (coordinateY < yMin) {
      result = yMin;
    } else if (coordinateY > yMax) {
      result = yMax;
    }

    return result;
  }; // définit la bonne position X des points A, B et C composant le lien
  // en fonction des valeurs de l'initialSpace (xMin, xMax, yMin, yMax)


  DrawOrientedLink.prototype.synchroLinkX = function (positionX, name) {
    var _this = this;

    var initialSpace = this.props.options.coordinateSpaceInitial.coordinate;
    var xMin = parseInt(initialSpace.xMin, 10);
    var xMax = parseInt(initialSpace.xMax, 10);
    var widthInitialSpace = xMax - xMin;
    var ratioX = positionX / this.props.widthImage; // define value to display in input positionShapeX

    var x = Math.round(xMin + widthInitialSpace * ratioX); // saving data new positionShapeX

    var newArrayLink = this.props.options.arrayOrientedLinks;
    newArrayLink.forEach(function (link) {
      if (link.name === _this.props.name) {
        if (name === 'xA') {
          link.pointAPositionX = x.toString();
        } else if (name === 'xB') {
          link.pointBPositionX = x.toString();
        } else if (name === 'xC') {
          link.pointCPositionX = x.toString();
        }
      }
    });
    this.props.options.arrayOrientedLinks = newArrayLink; // define limit x in fonction of values xMin and xMax of initialSpace

    var xLimited = this.defineLimitX(x); // define display x

    var result = (xLimited - xMin) / widthInitialSpace * this.props.widthImage; // return result and center display of point in fonction of sizePoint and borderPoint

    return result;
  }; // définit la bonne position Y des points A, B et C composant le lien
  // en fonction des valeurs de l'initialSpace (xMin, xMax, yMin, yMax)


  DrawOrientedLink.prototype.synchroLinkY = function (positionY, name) {
    var _this = this;

    var initialSpace = this.props.options.coordinateSpaceInitial.coordinate;
    var yMin = parseInt(initialSpace.yMin, 10);
    var yMax = parseInt(initialSpace.yMax, 10);
    var heightInitialSpace = yMax - yMin;
    var ratioY = positionY / this.props.heightImage; // define value to display in input positionShapeY

    var y = Math.round(yMin + heightInitialSpace * ratioY); // saving data new positionShapeY

    var newArrayLink = this.props.options.arrayOrientedLinks;
    newArrayLink.forEach(function (link) {
      if (link.name === _this.props.name) {
        if (name === 'yA') {
          link.pointAPositionY = y.toString();
        } else if (name === 'yB') {
          link.pointBPositionY = y.toString();
        } else if (name === 'yC') {
          link.pointCPositionY = y.toString();
        }
      }
    });
    this.props.options.arrayOrientedLinks = newArrayLink; // define limit y in fonction of values yMin and yMax of initialSpace

    var yLimited = this.defineLimitY(y); // define display y

    var result = (yMin + heightInitialSpace - yLimited) / heightInitialSpace * this.props.heightImage;
    return result;
  };
  /**
   * to do
   */


  DrawOrientedLink.prototype.drawLink = function (xA0, yA0, xB0, yB0, xCByClick0, yCByClick0, orientationLink) {
    var _this = this;

    var listParallelOrientedLinks = this.defineParallelOrientedLinks();
    var xA = 0;
    var yA = 0;
    var xB = 0;
    var yB = 0;
    var xCByClick = 0;
    var yCByClick = 0;

    if (listParallelOrientedLinks.length > 1) {
      var indexOrientedLink_1 = 0;
      listParallelOrientedLinks.forEach(function (index) {
        if (index === parseInt(_this.props.id, 10)) {
          if (indexOrientedLink_1 === 0) {
            xA = _this.synchroLinkX(_this.definePositionX(true, 0));
            yA = _this.synchroLinkY(_this.definePositionY(true, 0));
            xB = _this.synchroLinkX(_this.definePositionX(false, 0));
            yB = _this.synchroLinkY(_this.definePositionY(false, 0));
            xCByClick = xCByClick0 || (xA + xB) / 2;
            yCByClick = yCByClick0 || (yA + yB) / 2;
          } else if (indexOrientedLink_1 === 1) {
            xA = _this.synchroLinkX(_this.definePositionX(true, 1));
            yA = _this.synchroLinkY(_this.definePositionY(true, 1));
            xB = _this.synchroLinkX(_this.definePositionX(false, 1));
            yB = _this.synchroLinkY(_this.definePositionY(false, 1));
            xCByClick = xCByClick0 || (xA + xB) / 2;
            yCByClick = yCByClick0 || (yA + yB) / 2;
          } else if (indexOrientedLink_1 === 2) {
            xA = _this.synchroLinkX(_this.definePositionX(true, 2));
            yA = _this.synchroLinkY(_this.definePositionY(true, 2));
            xB = _this.synchroLinkX(_this.definePositionX(false, 2));
            yB = _this.synchroLinkY(_this.definePositionY(false, 2));
            xCByClick = xCByClick0 || (xA + xB) / 2;
            yCByClick = yCByClick0 || (yA + yB) / 2;
          }
        }

        indexOrientedLink_1++;
      });
    } else {
      if ((this.props.associateRegionIn !== '' || this.props.associatePointIn !== '') && this.props.associateRegionOut === '' && this.props.associatePointOut === '') {
        xA = this.synchroLinkX(this.definePositionX(true, 2));
        yA = this.synchroLinkY(this.definePositionY(true, 2));
        xB = xB0;
        yB = yB0;
        xCByClick = xCByClick0 || (xA + xB) / 2;
        yCByClick = yCByClick0 || (yA + yB) / 2;
      } else if ((this.props.associateRegionIn === '' || this.props.associatePointIn === '') && this.props.associateRegionOut !== '' && this.props.associatePointOut !== '') {
        xA = xA0;
        yA = yA0;
        xB = this.synchroLinkX(this.definePositionX(false, 2));
        yB = this.synchroLinkY(this.definePositionY(false, 2));
        xCByClick = xCByClick0 || (xA + xB) / 2;
        yCByClick = yCByClick0 || (yA + yB) / 2;
      } else if (this.props.associatePointIn !== '' && this.props.associatePointOut !== '' || this.props.associatePointIn !== '' && this.props.associateRegionOut !== '' || this.props.associateRegionIn !== '' && this.props.associatePointOut !== '' || this.props.associateRegionIn !== '' && this.props.associateRegionOut !== '') {
        xA = this.synchroLinkX(this.definePositionX(true, 2));
        yA = this.synchroLinkY(this.definePositionY(true, 2));
        xB = this.synchroLinkX(this.definePositionX(false, 2));
        yB = this.synchroLinkY(this.definePositionY(false, 2));
        xCByClick = xCByClick0 || (xA + xB) / 2;
        yCByClick = yCByClick0 || (yA + yB) / 2;
      } else {
        xA = xA0;
        yA = yA0;
        xB = xB0;
        yB = yB0;
        xCByClick = xCByClick0;
        yCByClick = yCByClick0;
      }
    }

    var xC = 0;
    var yC = 0;

    if (this.props.isIncurved.value) {
      xC = xCByClick;
      yC = yCByClick;
    } else {
      xC = (xA + xB) / 2;
      yC = (yA + yB) / 2;
    }

    var distanceAC = Math.sqrt((xA - xC) * (xA - xC) + (yA - yC) * (yA - yC));
    var angleRadianAC = Math.atan2(yA - yC, xA - xC);
    var angleDegreeAC = angleRadianAC * 180 / Math.PI;
    var xMidAC = (xA + xC) / 2;
    var yMidAC = (yA + yC) / 2;
    var xArrowAC = xMidAC - distanceAC / 2;
    var yArrowAC = yMidAC;
    var distanceBC = Math.sqrt((xB - xC) * (xB - xC) + (yB - yC) * (yB - yC));
    var angleRadianBC = Math.atan2(yB - yC, xB - xC);
    var angleDegreeBC = angleRadianBC * 180 / Math.PI;
    var xMidBC = (xB + xC) / 2;
    var yMidBC = (yB + yC) / 2;
    var xArrowBC = xMidBC - distanceBC / 2;
    var yArrowBC = yMidBC;
    var distanceAB = Math.sqrt((xA - xB) * (xA - xB) + (yA - yB) * (yA - yB));
    var angleRadianAB = Math.atan2(yA - yB, xA - xB);
    var angleDegreeAB = angleRadianAB * 180 / Math.PI;
    var xMidAB = (xA + xB) / 2;
    var yMidAB = (yA + yB) / 2;
    var xArrowAB = xMidAB - distanceAB / 2;
    var yArrowAB = yMidAB;
    var sizeArrowTriangle = 8;
    var valueTooltipMonodirectional = this.defineValueTooptip('monodirectional');
    var valueTooltipBidirectionalA = this.defineValueTooptip('bidirectional', 'A');
    var valueTooltipBidirectionalB = this.defineValueTooptip('bidirectional', 'B');
    var linkUrlOrientedLink = this.props.linkUrl.followLink;
    var inverseAxeY = -1;
    var positionTooltipA = '';

    if (this.props.tooltipPositionA.value) {
      positionTooltipA = this.props.tooltipPositionA.value.toLowerCase();
    }

    var positionTooltipB = '';

    if (this.props.tooltipPositionB.value) {
      positionTooltipB = this.props.tooltipPositionB.value.toLowerCase();
    }

    if (orientationLink === 'double') {
      var first = void 0;

      if (valueTooltipBidirectionalA) {
        first = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
          content: valueTooltipBidirectionalA,
          placement: positionTooltipA
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "linkA",
          style: {
            position: 'absolute',
            zIndex: this.props.zIndex,
            top: yArrowAC - sizeArrowTriangle / 2,
            left: xArrowAC,
            transform: 'rotate(' + angleDegreeAC.toString() + 'deg)',
            width: distanceAC
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "arrow1",
          style: {
            display: 'flex',
            alignContent: 'stretch'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "arrowTriangle",
          style: {
            width: '0',
            height: '0',
            borderLeft: this.defineSizeLink() + 'px solid transparent',
            borderRight: this.defineSizeLink() + 'px solid transparent',
            borderBottom: this.defineSizeLink() + 'px solid ' + this.defineBackColor('A'),
            transform: 'rotate(270deg)'
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            border: this.defineBorderSize('A') + 'px solid ' + this.defineBorderColor('A'),
            backgroundColor: this.defineBackColor('A'),
            width: distanceAC,
            height: this.defineSizeLink() + 'px'
          }
        }))));
      } else {
        first = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "linkA",
          style: {
            position: 'absolute',
            zIndex: this.props.zIndex,
            top: yArrowAC - sizeArrowTriangle / 2,
            left: xArrowAC,
            transform: 'rotate(' + angleDegreeAC.toString() + 'deg)',
            width: distanceAC
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "arrow1",
          style: {
            display: 'flex',
            alignContent: 'stretch'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "arrowTriangle",
          style: {
            width: '0',
            height: '0',
            borderLeft: this.defineSizeLink() + 'px solid transparent',
            borderRight: this.defineSizeLink() + 'px solid transparent',
            borderBottom: this.defineSizeLink() + 'px solid ' + this.defineBackColor('A'),
            transform: 'rotate(270deg)'
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            border: this.defineBorderSize('A') + 'px solid ' + this.defineBorderColor('A'),
            backgroundColor: this.defineBackColor('A'),
            width: distanceAC,
            height: this.defineSizeLink() + 'px'
          }
        })));
      }

      var second = void 0;

      if (valueTooltipBidirectionalB) {
        second = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
          content: valueTooltipBidirectionalB,
          placement: positionTooltipB
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "linkB",
          style: {
            position: 'absolute',
            zIndex: this.props.zIndex,
            top: yArrowBC - sizeArrowTriangle / 2,
            left: xArrowBC,
            transform: 'rotate(' + angleDegreeBC.toString() + 'deg)',
            width: distanceBC
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "arrow2",
          style: {
            display: 'flex',
            alignContent: 'stretch'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "arrowTriangle",
          style: {
            width: '0',
            height: '0',
            borderLeft: this.defineSizeLink() + 'px solid transparent',
            borderRight: this.defineSizeLink() + 'px solid transparent',
            borderBottom: this.defineSizeLink() + 'px solid ' + this.defineBackColor('B'),
            transform: 'rotate(270deg)'
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            border: this.defineBorderSize('B') + 'px solid ' + this.defineBorderColor('B'),
            backgroundColor: this.defineBackColor('B'),
            width: distanceBC,
            height: this.defineSizeLink() + 'px'
          }
        }))));
      } else {
        second = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "linkB",
          style: {
            position: 'absolute',
            zIndex: this.props.zIndex,
            top: yArrowBC - sizeArrowTriangle / 2,
            left: xArrowBC,
            transform: 'rotate(' + angleDegreeBC.toString() + 'deg)',
            width: distanceBC
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "arrow2",
          style: {
            display: 'flex',
            alignContent: 'stretch'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "arrowTriangle",
          style: {
            width: '0',
            height: '0',
            borderLeft: this.defineSizeLink() + 'px solid transparent',
            borderRight: this.defineSizeLink() + 'px solid transparent',
            borderBottom: this.defineSizeLink() + 'px solid ' + this.defineBackColor('B'),
            transform: 'rotate(270deg)'
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            border: this.defineBorderSize('B') + 'px solid ' + this.defineBorderColor('B'),
            backgroundColor: this.defineBackColor('B'),
            width: distanceBC,
            height: this.defineSizeLink() + 'px'
          }
        })));
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
        id: "link",
        href: linkUrlOrientedLink,
        onClick: this.desactiveLink,
        style: {
          cursor: this.defineCursor()
        },
        target: "_blank",
        rel: "noopener noreferrer"
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, first, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        id: 'labelMainMetric' + this.props.id,
        style: {
          textDecoration: this.defineTextDecoration(),
          fontStyle: this.defineFontStyle(),
          fontWeight: this.defineFontWeight(),
          position: 'absolute',
          zIndex: 9999,
          top: yMidAC + parseInt(this.props.labelAPositionY, 10) * inverseAxeY - this.labelSynchroY('A'),
          left: xMidAC + parseInt(this.props.labelAPositionX, 10) - this.labelSynchroX('A'),
          fontSize: this.props.sizePolice,
          //border: '1px solid black',
          backgroundColor: 'white',
          color: this.defineColorTextLabel(),
          padding: '0'
        }
      }, this.defineTextObject(this.props.valueMainMetricA))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, second, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        id: 'labelMainMetricB' + this.props.id,
        style: {
          textDecoration: this.defineTextDecoration(),
          fontStyle: this.defineFontStyle(),
          fontWeight: this.defineFontWeight(),
          position: 'absolute',
          zIndex: 9999,
          top: yMidBC + parseInt(this.props.labelBPositionY, 10) * inverseAxeY - this.labelSynchroY('B'),
          left: xMidBC + parseInt(this.props.labelBPositionX, 10) - this.labelSynchroX('B'),
          fontSize: this.props.sizePolice,
          //border: '1px solid black',
          backgroundColor: 'white',
          color: this.defineColorTextLabel(),
          padding: '0'
        }
      }, this.defineTextObject(this.props.valueMainMetricB))));
    } else if (orientationLink === 'AB') {
      var first = void 0;

      if (valueTooltipMonodirectional) {
        first = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
          content: valueTooltipMonodirectional,
          placement: positionTooltipA
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "partA",
          style: {
            position: 'absolute',
            zIndex: this.props.zIndex,
            top: yArrowAC - sizeArrowTriangle / 2,
            left: xArrowAC,
            transform: 'rotate(' + angleDegreeAC.toString() + 'deg)',
            width: distanceAC
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            padding: parseInt(this.defineBorderSize('A'), 10) / 2 + 'px',
            border: this.defineBorderSize('A') + 'px solid ' + this.defineBorderColor('A'),
            backgroundColor: this.defineBackColor('A'),
            width: distanceAC,
            height: this.defineSizeLink() + 'px'
          }
        })));
      } else {
        first = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "partA",
          style: {
            position: 'absolute',
            zIndex: this.props.zIndex,
            top: yArrowAC - sizeArrowTriangle / 2,
            left: xArrowAC,
            transform: 'rotate(' + angleDegreeAC.toString() + 'deg)',
            width: distanceAC
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            padding: parseInt(this.defineBorderSize('A'), 10) / 2 + 'px',
            border: this.defineBorderSize('A') + 'px solid ' + this.defineBorderColor('A'),
            backgroundColor: this.defineBackColor('A'),
            width: distanceAC,
            height: this.defineSizeLink() + 'px'
          }
        }));
      }

      var second = void 0;

      if (valueTooltipMonodirectional) {
        second = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
          content: valueTooltipMonodirectional,
          placement: positionTooltipA
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "partB",
          style: {
            position: 'absolute',
            zIndex: this.props.zIndex,
            top: yArrowBC - sizeArrowTriangle / 2,
            left: xArrowBC,
            transform: 'rotate(' + angleDegreeBC.toString() + 'deg)',
            width: distanceBC
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "arrow2",
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            border: this.defineBorderSize('A') + 'px solid ' + this.defineBorderColor('A'),
            backgroundColor: this.defineBackColor('A'),
            width: distanceBC,
            height: this.defineSizeLink() + 'px'
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "arrowTriangle",
          style: {
            width: '0',
            height: '0',
            borderLeft: this.defineSizeLink() + 'px solid transparent',
            borderRight: this.defineSizeLink() + 'px solid transparent',
            borderBottom: this.defineSizeLink() + 'px solid ' + this.defineBackColor('A'),
            transform: 'rotate(90deg)'
          }
        }))));
      } else {
        second = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "partB",
          style: {
            position: 'absolute',
            zIndex: this.props.zIndex,
            top: yArrowBC - sizeArrowTriangle / 2,
            left: xArrowBC,
            transform: 'rotate(' + angleDegreeBC.toString() + 'deg)',
            width: distanceBC,
            height: this.defineSizeLink() + 'px'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: "arrow2",
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            border: this.defineBorderSize('A') + 'px solid ' + this.defineBorderColor('A'),
            backgroundColor: this.defineBackColor('A'),
            width: distanceBC,
            height: this.defineSizeLink() + 'px'
          }
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          className: "arrowTriangle",
          style: {
            width: '0',
            height: '0',
            borderLeft: this.defineSizeLink() + 'px solid transparent',
            borderRight: this.defineSizeLink() + 'px solid transparent',
            borderBottom: this.defineSizeLink() + 'px solid ' + this.defineBackColor('A'),
            transform: 'rotate(90deg)'
          }
        })));
      }

      if (this.props.isIncurved.value) {
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
          href: linkUrlOrientedLink,
          onClick: this.desactiveLink,
          style: {
            cursor: this.defineCursor()
          },
          target: "_blank",
          rel: "noopener noreferrer"
        }, first, second, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: 'labelMainMetric' + this.props.id,
          style: {
            textDecoration: this.defineTextDecoration(),
            fontStyle: this.defineFontStyle(),
            fontWeight: this.defineFontWeight(),
            position: 'absolute',
            zIndex: 9999,
            top: yC + parseInt(this.props.labelAPositionY, 10) * inverseAxeY - this.labelSynchroY('A'),
            left: xC + parseInt(this.props.labelAPositionX, 10) - this.labelSynchroX('A'),
            backgroundColor: 'white',
            fontSize: this.props.sizePolice,
            color: this.defineColorTextLabel(),
            padding: '0'
          }
        }, this.defineTextObject(this.props.valueMainMetricA)));
      } else {
        var first_1;

        if (valueTooltipMonodirectional) {
          first_1 = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
            content: valueTooltipMonodirectional,
            placement: positionTooltipA
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: "link",
            style: {
              position: 'absolute',
              zIndex: this.props.zIndex,
              top: yArrowAB - sizeArrowTriangle / 2,
              left: xArrowAB,
              transform: 'rotate(' + angleDegreeAB.toString() + 'deg)',
              width: distanceAB
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: "arrow1",
            style: {
              display: 'flex',
              justifyContent: 'center'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            className: "arrowTriangle",
            style: {
              //position: 'absolute',
              width: '0',
              height: '0',
              borderLeft: this.defineSizeLink() + 'px solid transparent',
              borderRight: this.defineSizeLink() + 'px solid transparent',
              borderBottom: this.defineSizeLink() + 'px solid ' + this.defineBackColor('A'),
              transform: 'rotate(270deg)'
            }
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              border: this.defineBorderSize('A') + 'px solid ' + this.defineBorderColor('A'),
              backgroundColor: this.defineBackColor('A'),
              width: distanceAB,
              height: this.defineSizeLink() + 'px'
            }
          }))));
        } else {
          first_1 = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: "link",
            style: {
              position: 'absolute',
              zIndex: this.props.zIndex,
              top: yArrowAB - sizeArrowTriangle / 2,
              left: xArrowAB,
              transform: 'rotate(' + angleDegreeAB.toString() + 'deg)',
              width: distanceAB
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: "arrow1",
            style: {
              display: 'flex',
              justifyContent: 'center'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            className: "arrowTriangle",
            style: {
              width: '0',
              height: '0',
              borderLeft: this.defineSizeLink() + 'px solid transparent',
              borderRight: this.defineSizeLink() + 'px solid transparent',
              borderBottom: this.defineSizeLink() + 'px solid ' + this.defineBackColor('A'),
              transform: 'rotate(270deg)'
            }
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              border: this.defineBorderSize('A') + 'px solid ' + this.defineBorderColor('A'),
              backgroundColor: this.defineBackColor('A'),
              width: distanceAB,
              height: this.defineSizeLink() + 'px'
            }
          })));
        }

        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
          href: linkUrlOrientedLink,
          onClick: this.desactiveLink,
          style: {
            cursor: this.defineCursor()
          },
          target: "_blank",
          rel: "noopener noreferrer"
        }, first_1, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: 'labelMainMetric' + this.props.id,
          style: {
            textDecoration: this.defineTextDecoration(),
            fontStyle: this.defineFontStyle(),
            fontWeight: this.defineFontWeight(),
            position: 'absolute',
            zIndex: 9999,
            top: yMidAB + parseInt(this.props.labelAPositionY, 10) * inverseAxeY - this.labelSynchroY('A'),
            left: xMidAB + parseInt(this.props.labelAPositionX, 10) - this.labelSynchroX('A'),
            backgroundColor: 'white',
            fontSize: this.props.sizePolice,
            color: this.defineColorTextLabel(),
            padding: '0'
          }
        }, this.defineTextObject(this.props.valueMainMetricA)));
      }
    } else if (orientationLink === 'no') {
      if (this.props.isIncurved.value) {
        var first = void 0;

        if (valueTooltipMonodirectional) {
          first = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
            content: valueTooltipMonodirectional,
            placement: positionTooltipA
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: "partA",
            style: {
              position: 'absolute',
              zIndex: this.props.zIndex,
              top: yArrowAC,
              left: xArrowAC,
              transform: 'rotate(' + angleDegreeAC.toString() + 'deg)',
              height: this.defineSizeLink() + 'px',
              width: distanceAC,
              border: this.defineBorderSize('A') + ' solid ' + this.defineBorderColor('A'),
              backgroundColor: this.defineBackColor('A')
            }
          }));
        } else {
          first = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: "partA",
            style: {
              position: 'absolute',
              zIndex: this.props.zIndex,
              top: yArrowAC,
              left: xArrowAC,
              transform: 'rotate(' + angleDegreeAC.toString() + 'deg)',
              height: this.defineSizeLink() + 'px',
              width: distanceAC,
              border: this.defineBorderSize('A') + ' solid ' + this.defineBorderColor('A'),
              backgroundColor: this.defineBackColor('A')
            }
          });
        }

        var second = void 0;

        if (valueTooltipMonodirectional) {
          second = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
            content: valueTooltipMonodirectional,
            placement: positionTooltipA
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: "partB",
            style: {
              position: 'absolute',
              zIndex: this.props.zIndex,
              top: yArrowBC,
              left: xArrowBC,
              transform: 'rotate(' + angleDegreeBC.toString() + 'deg)',
              height: this.defineSizeLink() + 'px',
              width: distanceBC,
              border: this.defineBorderSize('A') + ' solid ' + this.defineBorderColor('A'),
              backgroundColor: this.defineBackColor('A')
            }
          }));
        } else {
          second = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: "partB",
            style: {
              position: 'absolute',
              zIndex: this.props.zIndex,
              top: yArrowBC,
              left: xArrowBC,
              transform: 'rotate(' + angleDegreeBC.toString() + 'deg)',
              height: this.defineSizeLink() + 'px',
              width: distanceBC,
              border: this.defineBorderSize('A') + ' solid ' + this.defineBorderColor('A'),
              backgroundColor: this.defineBackColor('A')
            }
          });
        }

        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
          href: linkUrlOrientedLink,
          onClick: this.desactiveLink,
          style: {
            cursor: this.defineCursor()
          },
          target: "_blank",
          rel: "noopener noreferrer"
        }, first, second, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: 'labelMainMetric' + this.props.id,
          style: {
            textDecoration: this.defineTextDecoration(),
            fontStyle: this.defineFontStyle(),
            fontWeight: this.defineFontWeight(),
            position: 'absolute',
            zIndex: 9999,
            top: yC + parseInt(this.props.labelAPositionY, 10) * inverseAxeY - this.labelSynchroY('A'),
            left: xC + parseInt(this.props.labelAPositionX, 10) - this.labelSynchroX('A'),
            backgroundColor: 'white',
            fontSize: this.props.sizePolice,
            color: this.defineColorTextLabel(),
            padding: '0'
          }
        }, this.defineTextObject(this.props.valueMainMetricA)));
      } else {
        var first = void 0;

        if (valueTooltipMonodirectional) {
          first = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
            content: valueTooltipMonodirectional,
            placement: positionTooltipA
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: "link",
            style: {
              position: 'absolute',
              zIndex: this.props.zIndex,
              top: yArrowAB,
              left: xArrowAB,
              transform: 'rotate(' + angleDegreeAB.toString() + 'deg)',
              width: distanceAB,
              height: this.defineSizeLink() + 'px',
              border: this.defineBorderSize('A') + ' solid ' + this.defineBorderColor('A'),
              backgroundColor: this.defineBackColor('A')
            }
          }));
        } else {
          first = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            id: "link",
            style: {
              position: 'absolute',
              zIndex: this.props.zIndex,
              top: yArrowAB,
              left: xArrowAB,
              transform: 'rotate(' + angleDegreeAB.toString() + 'deg)',
              width: distanceAB,
              height: this.defineSizeLink() + 'px',
              border: this.defineBorderSize('A') + ' solid ' + this.defineBorderColor('A'),
              backgroundColor: this.defineBackColor('A')
            }
          });
        }

        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
          href: linkUrlOrientedLink,
          onClick: this.desactiveLink,
          style: {
            cursor: this.defineCursor()
          },
          target: "_blank",
          rel: "noopener noreferrer"
        }, first, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          id: 'labelMainMetric' + this.props.id,
          style: {
            textDecoration: this.defineTextDecoration(),
            fontStyle: this.defineFontStyle(),
            fontWeight: this.defineFontWeight(),
            position: 'absolute',
            zIndex: 9999,
            top: yMidAB + parseInt(this.props.labelAPositionY, 10) * inverseAxeY - this.labelSynchroY('A'),
            left: xMidAB + parseInt(this.props.labelAPositionX, 10) - this.labelSynchroX('A'),
            backgroundColor: 'white',
            fontSize: this.props.sizePolice,
            color: this.defineColorTextLabel(),
            padding: '0'
          }
        }, this.defineTextObject(this.props.valueMainMetricA)));
      }
    } else {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
    }
  };

  DrawOrientedLink.prototype.defineBackColor = function (link) {
    var _this = this;

    var colorBack = '';
    var seuil = this.props.seuil;
    var valueMainMetric = 0;

    if (link === 'A') {
      valueMainMetric = parseInt(this.props.valueMainMetricA, 10);
    } else {
      valueMainMetric = parseInt(this.props.valueMainMetricB, 10);
    }

    if (this.props.traceBack) {
      if (!this.props.colorMode && this.props.seuil.length > 0) {
        if (seuil[0].backColor !== '') {
          colorBack = seuil[0].backColor;
        } else {
          colorBack = 'black';
        }
      } else {
        colorBack = 'black';
      }
    } else {
      colorBack = 'black';
    }

    var index = 0;

    if (this.props.colorMode && this.props.seuil.length > 0) {
      seuil.forEach(function (level) {
        var lowerLimitMin = 0;

        if (level.lowerLimitMin === '') {
          lowerLimitMin = 0;
        } else {
          lowerLimitMin = parseInt(level.lowerLimitMin.substring(1), 10);
        }

        if (lowerLimitMin === 0) {
          if (valueMainMetric >= lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
            colorBack = level.backColor;
          }
        } else if (_this.props.seuil.length === index + 1) {
          if (valueMainMetric > lowerLimitMin) {
            colorBack = level.backColor;
          }
        } else if (valueMainMetric > lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
          colorBack = level.backColor;
        }

        index++;
      });
    }

    return colorBack;
  };

  DrawOrientedLink.prototype.defineBorderColor = function (link) {
    var _this = this;

    var colorBorder = '';
    var seuil = this.props.seuil;
    var valueMainMetric = 0;

    if (link === 'A') {
      valueMainMetric = parseInt(this.props.valueMainMetricA, 10);
    } else {
      valueMainMetric = parseInt(this.props.valueMainMetricB, 10);
    }

    if (this.props.traceBorder) {
      if (!this.props.colorMode && this.props.seuil.length > 0) {
        if (seuil[0].borderColor !== '') {
          colorBorder = seuil[0].borderColor;
        } else {
          colorBorder = 'black';
        }
      } else {
        colorBorder = 'black';
      }
    } else {
      colorBorder = 'black';
    }

    var index = 0;

    if (this.props.colorMode && this.props.seuil.length > 0) {
      seuil.forEach(function (level) {
        var lowerLimitMin = 0;

        if (level.lowerLimitMin === '') {
          lowerLimitMin = 0;
        } else {
          lowerLimitMin = parseInt(level.lowerLimitMin.substring(1), 10);
        }

        if (lowerLimitMin === 0) {
          if (valueMainMetric >= lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
            colorBorder = level.borderColor;
          }
        } else if (_this.props.seuil.length === index + 1) {
          if (valueMainMetric > lowerLimitMin) {
            colorBorder = level.borderColor;
          }
        } else if (valueMainMetric > lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
          colorBorder = level.borderColor;
        }

        index++;
      });
    }

    return colorBorder;
  };

  DrawOrientedLink.prototype.defineBorderSize = function (link) {
    var _this = this;

    var sizeBorder = '';
    var seuil = this.props.seuil;
    var valueMainMetric = 0;

    if (link === 'A') {
      valueMainMetric = parseInt(this.props.valueMainMetricA, 10);
    } else {
      valueMainMetric = parseInt(this.props.valueMainMetricB, 10);
    }

    if (this.props.traceBorder) {
      if (!this.props.colorMode && this.props.seuil.length > 0) {
        if (seuil[0].sizeBorder !== '') {
          sizeBorder = seuil[0].sizeBorder;
        } else {
          sizeBorder = '0';
        }
      } else {
        sizeBorder = '0';
      }
    } else {
      sizeBorder = '0';
    }

    var index = 0;

    if (this.props.colorMode && this.props.seuil.length > 0) {
      seuil.forEach(function (level) {
        var lowerLimitMin = 0;

        if (level.lowerLimitMin === '') {
          lowerLimitMin = 0;
        } else {
          lowerLimitMin = parseInt(level.lowerLimitMin.substring(1), 10);
        }

        if (lowerLimitMin === 0) {
          if (valueMainMetric >= lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
            sizeBorder = level.sizeBorder;
          }
        } else if (_this.props.seuil.length === index + 1) {
          if (valueMainMetric > lowerLimitMin) {
            sizeBorder = level.sizeBorder;
          }
        } else if (valueMainMetric > lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
          sizeBorder = level.sizeBorder;
        }

        index++;
      });
    }

    return sizeBorder;
  };

  DrawOrientedLink.prototype.render = function () {
    var xCoordinateA = this.synchroLinkX(parseInt(this.props.positionXADefault, 10), 'xA');
    var yCoordinateA = this.synchroLinkY(parseInt(this.props.positionYADefault, 10), 'yA');
    var xCoordinateB = this.synchroLinkX(parseInt(this.props.positionXBDefault, 10), 'xB');
    var yCoordinateB = this.synchroLinkY(parseInt(this.props.positionYBDefault, 10), 'yB');
    var xCoordinateC = this.synchroLinkX(parseInt(this.props.positionXCDefault, 10) || 0, 'xC');
    var yCoordinateC = this.synchroLinkY(parseInt(this.props.positionYCDefault, 10) || 0, 'yC');
    var orientationLink = this.props.orientationLink;
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.drawLink(xCoordinateA, yCoordinateA, xCoordinateB, yCoordinateB, xCoordinateC, yCoordinateC, orientationLink));
  };

  return DrawOrientedLink;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (DrawOrientedLink);

/***/ }),

/***/ "./components/Draw/drawPoint.tsx":
/*!***************************************!*\
  !*** ./components/Draw/drawPoint.tsx ***!
  \***************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);



/**
 * to do
 */

var DrawPoint = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DrawPoint, _super);

  function DrawPoint(props) {
    var _this = _super.call(this, props) || this;

    _this.defineBorderRadius = function () {
      var result = 0;
      var shape = _this.props.shape.value || '';

      if (shape === 'circle') {
        result = 50;
      }

      return result;
    };

    _this.defineRotate = function () {
      var result = 'rotate(0deg)';
      var shape = _this.props.shape.value || '';

      if (shape === 'diamond') {
        result = 'rotate(45deg)';
      }

      return result;
    };

    _this.desactiveLink = function (event) {
      // const inputFollowingLink: any = document.getElementById('followLink');
      // if (inputFollowingLink) {
      //   if (inputFollowingLink.defaultValue === '') {
      //     event.preventDefault();
      //   }
      // } else if (this.props.linkUrl.followLink === '') {
      //   event.preventDefault();
      // }
      if (_this.props.linkUrl.followLink === '') {
        event.preventDefault();
      }
    };

    _this.defineCursor = function () {
      var result = 'pointer'; // const inputFollowingLink: any = document.getElementById('followLink');
      // if (inputFollowingLink) {
      //   if (inputFollowingLink.defaultValue === '') {
      //     result = 'default';
      //   }
      // } else if (this.props.linkUrl.followLink === '') {
      //   result = 'default';
      // }

      if (_this.props.linkUrl.followLink === '') {
        result = 'default';
      }

      return result;
    };

    _this.definePositionLabelX = function (coordinateX) {
      var positionLabel = parseInt(_this.props.labelPositionX, 10);
      var result = 0;

      if (_this.props.drawGraphicMarker.value === 'true') {
        result = coordinateX + positionLabel + parseInt(_this.props.size, 10) + 5; // if (this.props.size.value === 'large') {
        //   result = coordinateX + positionLabel + 18;
        // } else if (this.props.size.value === 'medium') {
        //   result = coordinateX + positionLabel + 14;
        // }
      } else {
        result = coordinateX + positionLabel;
      }

      return result;
    };

    _this.definePositionLabelY = function (coordinateY) {
      var inverseAxeY = -1;
      var positionLabel = parseInt(_this.props.labelPositionY, 10) * inverseAxeY;
      var result = 0;

      if (_this.props.drawGraphicMarker.value === 'true') {
        result = coordinateY + positionLabel + parseInt(_this.props.size, 10) + 5; // if (this.props.size.value === 'large') {
        //   result = coordinateY + positionLabel + 18;
        // } else if (this.props.size.value === 'medium') {
        //   result = coordinateY + positionLabel + 14;
        // }
      } else {
        result = coordinateY + positionLabel;
      }

      return result;
    };

    _this.defineMainMetric = function (mainMetric) {
      var result = '';
      var unit = _this.props.textObject.valueGenerateObjectText.unit;
      var decimal = _this.props.textObject.valueGenerateObjectText.numericFormatElement;
      var roundValue = parseInt(decimal, 10) || 1;

      if (decimal !== '') {
        result = parseFloat(mainMetric).toPrecision(roundValue) + ' ' + unit;
      } else {
        result = mainMetric + ' ' + unit;
      }

      return result;
    };

    _this.defineAuxMetric = function (auxMetric) {
      var result = '';
      var unit = _this.props.textObject.generateAuxiliaryElement.unit;
      var decimal = _this.props.textObject.generateAuxiliaryElement.numericFormatElement;
      var roundValue = parseInt(decimal, 10) || 1;

      if (decimal !== '') {
        result = parseFloat(auxMetric).toPrecision(roundValue) + ' ' + unit;
      } else {
        result = auxMetric + ' ' + unit;
      }

      return result;
    };

    _this.defineTextObject = function (mainMetric) {
      var htmlTextObject = [];
      var htmlMainMetric = [];
      var dislayTextObjectInTooltip = _this.props.textObject.isTextTooltip;
      var textColorTextObject = _this.props.textObject.colorText;
      var backColoTextObject = _this.props.textObject.colorBack;
      var displayMainMetric = _this.props.textObject.generateObjectText;
      var displayMainMetricInTooltip = _this.props.textObject.valueGenerateObjectText.displayObjectInTooltip;
      var addTextColorMainMetric = _this.props.textObject.valueGenerateObjectText.addColorTextElement;
      var addBackColorMainMetric = _this.props.textObject.valueGenerateObjectText.addColorBackElement;
      var textColorMainMetric = _this.props.textObject.valueGenerateObjectText.colorTextElement;
      var backColorMainMetric = _this.props.textObject.valueGenerateObjectText.colorBackElement;
      var legendMainMetric = _this.props.textObject.valueGenerateObjectText.legendElement;
      var styleLabel = {
        color: textColorTextObject,
        backgroundColor: backColoTextObject,
        textAlign: 'center',
        margin: 0,
        padding: '0 5px'
      };
      var styleMainMetric = {
        color: addTextColorMainMetric ? textColorMainMetric : textColorTextObject,
        margin: 0,
        padding: 0,
        whiteSpace: 'nowrap'
      };

      if (!dislayTextObjectInTooltip) {
        htmlTextObject.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: 'contentTextObject1' + _this.props.name,
          style: styleLabel
        }, _this.props.label || _this.props.name.toUpperCase()));
      }

      if (displayMainMetric) {
        if (!displayMainMetricInTooltip) {
          if (legendMainMetric) {
            htmlMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: 'contentTextObject2' + _this.props.name,
              style: styleMainMetric
            }, legendMainMetric));
          } // Condition Display NaN none Point


          htmlMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: 'contentTextObject3' + _this.props.name,
            style: styleMainMetric
          }, !isNaN(parseFloat(_this.defineMainMetric(mainMetric))) && _this.defineMainMetric(mainMetric)));
        }
      }

      var styleMainDiv = {
        backgroundColor: backColoTextObject,
        border: '1px solid black'
      };

      if (!displayMainMetric || displayMainMetric && displayMainMetricInTooltip) {
        styleMainDiv = {
          backgroundColor: backColoTextObject
        };
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: styleMainDiv
      }, htmlTextObject, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          backgroundColor: addBackColorMainMetric ? backColorMainMetric : backColoTextObject,
          padding: '0 5px'
        }
      }, htmlMainMetric));
    };

    _this.defineHtmlLinkTooltip = function () {
      var result = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);

      if (_this.props.linkUrl.hoveringTooltipText !== '') {
        result = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
          style: {
            fontFamily: _this.props.police,
            fontSize: '11px',
            marginBottom: '0px',
            textAlign: 'center'
          },
          href: _this.props.linkUrl.hoveringTooltipLink,
          target: "_blank",
          rel: "noopener noreferrer"
        }, _this.props.linkUrl.hoveringTooltipText);
      }

      return result;
    };

    _this.defineTextDecoration = function () {
      var mainStyle = _this.props.textObject.style;
      var result = '';

      if (mainStyle.underline) {
        result = 'underline';
      } else {
        if (_this.props.options.display.style.underline) {
          result = 'underline';
        } else {
          result = 'none';
        }
      }

      return result;
    };

    _this.defineFontStyle = function () {
      var mainStyle = _this.props.textObject.style;
      var result = '';

      if (mainStyle.italic) {
        result = 'italic';
      } else {
        if (_this.props.options.display.style.italic) {
          result = 'italic';
        } else {
          result = 'normal';
        }
      }

      return result;
    };

    _this.defineFontWeight = function () {
      var mainStyle = _this.props.textObject.style;
      var result = '';

      if (mainStyle.bold) {
        result = 'bold';
      } else {
        if (_this.props.options.display.style.bold) {
          result = 'bold';
        } else {
          result = 'normal';
        }
      }

      return result;
    };

    _this.state = {};
    return _this;
  }
  /**
   * to do
   * @param coordinateX
   *
   */


  DrawPoint.prototype.defineLimitX = function (coordinateX) {
    var result = coordinateX;
    var xMin = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMin, 10);
    var xMax = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMax, 10);

    if (coordinateX < xMin) {
      result = xMin;
    } else if (coordinateX > xMax) {
      result = xMax;
    }

    return result;
  };
  /**
   * to do
   * @param coordinateY
   *
   */


  DrawPoint.prototype.defineLimitY = function (coordinateY) {
    var result = coordinateY;
    var yMin = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMin, 10);
    var yMax = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMax, 10);

    if (coordinateY < yMin) {
      result = yMin;
    } else if (coordinateY > yMax) {
      result = yMax;
    }

    return result;
  };
  /**
   * to do
   * @param defineCenter
   * @param sizeGraphicMarkerPx
   * @param shapeGraphicMarker
   */


  DrawPoint.prototype.definePositionX = function (positionX, initialSpace, size, shape) {
    var _this = this;

    var xMin = parseInt(initialSpace.xMin, 10);
    var xMax = parseInt(initialSpace.xMax, 10);
    var widthInitialSpace = xMax - xMin;
    var ratioX = parseInt(this.props.positionXDefault, 10) / this.props.widthImage; // define value to display in input positionShapeX

    var x = Math.round(xMin + widthInitialSpace * ratioX); // saving data new positionShapeX

    var newArrayPoint = this.props.options.arrayPoints;
    newArrayPoint.forEach(function (point) {
      if (point.name === _this.props.name) {
        point.positionShapeX = x.toString();
      }
    });
    this.props.options.arrayPoints = newArrayPoint; // define limit x in fonction of values xMin and xMax of initialSpace

    var xLimited = this.defineLimitX(x); // define display x

    var result = (xLimited - xMin) / widthInitialSpace * this.props.widthImage; // return result and center display of point in fonction of sizePoint and borderPoint

    return result - (size + parseInt(this.defineBorderSize(), 10));
  };
  /**
   * to do
   * @param defineCenter
   * @param sizeGraphicMarkerPx
   * @param shapeGraphicMarker
   */


  DrawPoint.prototype.definePositionY = function (positionY, initialSpace, size, shapeGraphicMarker) {
    var _this = this;

    var yMin = parseInt(initialSpace.yMin, 10);
    var yMax = parseInt(initialSpace.yMax, 10);
    var heightInitialSpace = yMax - yMin;
    var ratioY = parseInt(this.props.positionYDefault, 10) / this.props.heightImage; // define value to display in input positionShapeY

    var y = Math.round(yMin + heightInitialSpace * ratioY); // saving data new positionShapeY

    var newArrayPoint = this.props.options.arrayPoints;
    newArrayPoint.forEach(function (point) {
      if (point.name === _this.props.name) {
        point.positionShapeY = y.toString();
      }
    });
    this.props.options.arrayPoints = newArrayPoint; // define limit y in fonction of values yMin and yMax of initialSpace

    var yLimited = this.defineLimitY(y); // define display y

    var result = (yMin + heightInitialSpace - yLimited) / heightInitialSpace * this.props.heightImage;
    return result - (size + parseInt(this.defineBorderSize(), 10));
  };
  /**
   * to do
   * @param sizeGraphicMarker
   * @param shapeGraphicMarker
   */


  DrawPoint.prototype.defineSizeGraphicMarkerPx = function (size, shape) {
    if (this.props.shape.value === 'none') {
      return 0;
    } else {
      // if (size === 'small') {
      //   return 4;
      // } else if (size === 'medium') {
      //   return 6;
      // } else if (size === 'large') {
      //   return 8;
      // } else {
      //   return 0;
      // }
      return parseInt(size, 10) / 2;
    }
  };
  /**
   * to do
   * @param positionX
   * @param positionY
   * @param color
   * @param sizeGraphicMarkerPx
   * @param shapeGraphicMarker
   */


  DrawPoint.prototype.drawPoint = function (drawGraphicMarker, size, positionShapeX, positionShapeY) {
    var valueToolTip = this.defineContentTooltip('point');
    var linkUrlPoint = this.props.linkUrl.followLink;
    var borderRadius = this.defineBorderRadius() + 'px';
    var rotate = this.defineRotate();
    var positionTooltip = '';

    if (this.props.tooltipPosition.value) {
      positionTooltip = this.props.tooltipPosition.value.toLowerCase();
    }

    if (drawGraphicMarker === 'true') {
      if (this.props.buttonAddLinkIsActive || this.props.buttonAddIncurvedLinkIsActive) {
        if (valueToolTip === null) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              border: this.defineBorderSize() + 'px solid ' + this.defineBorderColor(),
              backgroundColor: this.defineBackgroundColor(),
              borderRadius: borderRadius,
              padding: size + 'px',
              position: 'absolute',
              zIndex: 1000,
              left: positionShapeX,
              top: positionShapeY,
              transform: rotate
            },
            id: this.props.idPoint
          });
        } else {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
            key: 'tooltip' + this.props.name,
            content: valueToolTip,
            placement: positionTooltip
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              border: this.defineBorderSize() + 'px solid ' + this.defineBorderColor(),
              backgroundColor: this.defineBackgroundColor(),
              borderRadius: borderRadius,
              padding: size + 'px',
              position: 'absolute',
              zIndex: 1000,
              left: positionShapeX,
              top: positionShapeY,
              transform: rotate
            },
            id: this.props.idPoint
          }));
        }
      } else {
        if (valueToolTip === null) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
            href: linkUrlPoint,
            onClick: this.desactiveLink,
            target: "_blank",
            rel: "noopener noreferrer",
            style: {
              border: this.defineBorderSize() + 'px solid ' + this.defineBorderColor(),
              backgroundColor: this.defineBackgroundColor(),
              borderRadius: borderRadius,
              padding: size + 'px',
              position: 'absolute',
              zIndex: 1000,
              left: positionShapeX,
              top: positionShapeY,
              transform: rotate,
              cursor: this.defineCursor()
            },
            id: this.props.idPoint
          }));
        } else {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
            key: 'tooltip' + this.props.name,
            content: valueToolTip,
            placement: positionTooltip
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
            href: linkUrlPoint,
            onClick: this.desactiveLink,
            target: "_blank",
            rel: "noopener noreferrer",
            style: {
              border: this.defineBorderSize() + 'px solid ' + this.defineBorderColor(),
              backgroundColor: this.defineBackgroundColor(),
              borderRadius: borderRadius,
              padding: size + 'px',
              position: 'absolute',
              zIndex: 1000,
              left: positionShapeX,
              top: positionShapeY,
              transform: rotate,
              cursor: this.defineCursor()
            },
            id: this.props.idPoint
          }));
        }
      }
    } else {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
    }
  };

  DrawPoint.prototype.displayLabel = function (label, name, positionX, positionY, police) {
    var valueToolTip = this.defineContentTooltip('label');
    var positionTooltip = '';

    if (this.props.tooltipPosition.value) {
      positionTooltip = this.props.tooltipPosition.value.toLowerCase();
    }

    if (valueToolTip === null) {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          textDecoration: this.defineTextDecoration(),
          fontStyle: this.defineFontStyle(),
          fontWeight: this.defineFontWeight(),
          fontSize: this.props.sizePolice,
          fontFamily: police,
          color: this.props.textObject.colorText || 'black',
          position: 'absolute',
          zIndex: 1000,
          top: this.definePositionLabelY(positionY),
          left: this.definePositionLabelX(positionX)
        }
      }, this.defineTextObject(this.props.valueMainMetric));
    } else {
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
        key: 'tooltipLabel' + this.props.name,
        content: valueToolTip,
        placement: positionTooltip
      }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          textDecoration: this.defineTextDecoration(),
          fontStyle: this.defineFontStyle(),
          fontWeight: this.defineFontWeight(),
          fontSize: this.props.sizePolice,
          fontFamily: police,
          color: this.props.textObject.colorText || 'black',
          position: 'absolute',
          zIndex: 1000,
          top: this.definePositionLabelY(positionY),
          left: this.definePositionLabelX(positionX)
        }
      }, this.defineTextObject(this.props.valueMainMetric)));
    }
  };

  DrawPoint.prototype.defineContentTooltip = function (localisation) {
    var _this = this;

    var contentTooltip = [];
    var contentTooltipMainMetric = [];
    var contentTooltipAuxMetric = [];
    var contentTooltipAssociateLink = [];
    var contentTooltipMetadata = [];
    var arrayOrientedLinksIn = this.props.associateOrientedLinkIn;
    var arrayOrientedLinksOut = this.props.associateOrientedLinkOut;
    var refMainMetric = this.props.refMainMetric;
    var dislayTextObjectInTooltip = this.props.textObject.isTextTooltip;
    var textColorTextObject = this.props.textObject.colorText;
    var backColoTextObject = this.props.textObject.colorBack;
    var displayMainMetric = this.props.textObject.generateObjectText;
    var displayMainMetricInTooltip = this.props.textObject.valueGenerateObjectText.displayObjectInTooltip;
    var addTextColorMainMetric = this.props.textObject.valueGenerateObjectText.addColorTextElement;
    var addBackColorMainMetric = this.props.textObject.valueGenerateObjectText.addColorBackElement;
    var textColorMainMetric = this.props.textObject.valueGenerateObjectText.colorTextElement;
    var backColorMainMetric = this.props.textObject.valueGenerateObjectText.colorBackElement;
    var legendMainMetric = this.props.textObject.valueGenerateObjectText.legendElement;
    var displayAuxMetricInTooltip = this.props.textObject.generateAuxiliaryElement.displayObjectInTooltip;
    var addTextColorAuxMetric = this.props.textObject.generateAuxiliaryElement.addColorTextElement;
    var addBackColorAuxMetric = this.props.textObject.generateAuxiliaryElement.addColorBackElement;
    var textColorAuxMetric = this.props.textObject.generateAuxiliaryElement.colorTextElement;
    var backColorAuxMetric = this.props.textObject.generateAuxiliaryElement.colorBackElement;
    var legendAuxMetric = this.props.textObject.generateAuxiliaryElement.legendElement;
    var styleMainTitle = {
      fontFamily: this.props.police,
      fontSize: '11px',
      marginBottom: '0px',
      textAlign: 'center',
      color: textColorTextObject,
      backgroundColor: backColoTextObject
    };
    var styleTitleMainMetric = {
      fontFamily: this.props.police,
      fontSize: '10px',
      marginTop: '5px',
      marginBottom: '0px',
      color: addTextColorMainMetric ? textColorMainMetric : textColorTextObject
    };
    var styleTitleAuxMetric = {
      fontFamily: this.props.police,
      fontSize: '10px',
      marginTop: '5px',
      marginBottom: '0px',
      color: addTextColorAuxMetric ? textColorAuxMetric : textColorTextObject
    };
    var styleTitle2AuxMetric = {
      fontFamily: this.props.police,
      fontSize: '10px',
      marginTop: '5px',
      marginLeft: '5px',
      marginBottom: '0px',
      color: addTextColorAuxMetric ? textColorAuxMetric : textColorTextObject
    };
    var styleTitleMetaData = {
      fontFamily: this.props.police,
      fontSize: '10px',
      marginTop: '5px',
      marginBottom: '0px',
      color: 'white'
    };
    var styleContentMainMetrics = {
      fontFamily: this.props.police,
      fontSize: '9px',
      marginLeft: '10px',
      marginBottom: '0px',
      color: addTextColorMainMetric ? textColorMainMetric : textColorTextObject
    };
    var styleContentAuxMetrics = {
      fontFamily: this.props.police,
      fontSize: '9px',
      marginLeft: '10px',
      marginBottom: '0px',
      color: addTextColorAuxMetric ? textColorAuxMetric : textColorTextObject
    };
    var styleTitleAssociateLink = {
      fontFamily: this.props.police,
      fontSize: '10px',
      marginTop: '5px',
      marginBottom: '0px'
    };
    var styleContentAssociateLink = {
      fontFamily: this.props.police,
      fontSize: '9px',
      marginLeft: '10px',
      marginBottom: '0px'
    };

    if (dislayTextObjectInTooltip) {
      contentTooltip.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
        key: localisation + 'ContentTooltip1' + this.props.name,
        style: styleMainTitle
      }, this.props.label || this.props.name.toUpperCase()));
    }

    if (displayMainMetric && displayMainMetricInTooltip) {
      if (legendMainMetric) {
        contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: localisation + 'ContentTooltip2' + this.props.name,
          style: styleTitleMainMetric
        }, legendMainMetric));
      }

      contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
        key: localisation + 'ContentTooltip3' + this.props.name,
        style: styleTitleMainMetric
      }, "Main Metric"));
      contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
        key: localisation + 'ContentTooltip4' + this.props.name,
        style: styleContentMainMetrics
      }, "- Reference : ", refMainMetric));
      contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
        key: localisation + 'ContentTooltip5' + this.props.name,
        style: styleContentMainMetrics
      }, "- Value : ", this.defineMainMetric(this.props.valueMainMetric)));
    }

    if (displayAuxMetricInTooltip) {
      if (legendAuxMetric) {
        contentTooltipMainMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: localisation + 'ContentTooltip6' + this.props.name,
          style: styleTitleAuxMetric
        }, legendAuxMetric));
      }

      if (this.props.auxiliaryMetrics.length > 0) {
        contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: localisation + 'ContentTooltip7' + this.props.name,
          style: styleTitleAuxMetric
        }, "Auxiliary Metric"));
        var index_1 = 1;
        this.props.auxiliaryMetrics.forEach(function (metric) {
          contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: index_1.toString() + localisation + 'ContentTooltip8' + _this.props.name,
            style: styleTitle2AuxMetric
          }, "+ Metric ", index_1));
          contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: index_1.toString() + localisation + 'ContentTooltip9' + _this.props.name,
            style: styleContentAuxMetrics
          }, "- Reference : ", metric.refId));
          contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: index_1.toString() + localisation + 'ContentTooltip10' + _this.props.name,
            style: styleContentAuxMetrics
          }, "- Value :", ' ', !isNaN(parseFloat(_this.defineAuxMetric(_this.props.valuesAuxiliaryMetrics[index_1 - 1]))) && _this.defineAuxMetric(_this.props.valuesAuxiliaryMetrics[index_1 - 1])));
          contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: index_1.toString() + localisation + 'ContentTooltip11' + _this.props.name,
            style: styleContentAuxMetrics
          }, "- Key : ", metric.key));
          contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: index_1.toString() + localisation + 'ContentTooltip12' + _this.props.name,
            style: styleContentAuxMetrics
          }, "- KeyValue : ", metric.keyValue));
          contentTooltipAuxMetric.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: index_1.toString() + localisation + 'ContentTooltip13' + _this.props.name,
            style: styleContentAuxMetrics
          }, "- Type : ", metric.manageValue));
          index_1++;
        });
      }
    }

    if (arrayOrientedLinksIn.length !== 0) {
      contentTooltipAssociateLink.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
        key: localisation + 'ContentTooltip14' + this.props.name,
        style: styleTitleAssociateLink
      }, "Associate Link In :"));
      arrayOrientedLinksIn.forEach(function (orientedLinkIn) {
        var nameOrientedLink = orientedLinkIn.label || orientedLinkIn.name;
        contentTooltipAssociateLink.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: localisation + 'ContentTooltip15' + _this.props.name + nameOrientedLink,
          style: styleContentAssociateLink
        }, "- ", nameOrientedLink));
      });
    }

    if (arrayOrientedLinksOut.length !== 0) {
      contentTooltipAssociateLink.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
        key: localisation + 'ContentTooltip16' + this.props.name,
        style: styleTitleAssociateLink
      }, "Associate Link Out :"));
      arrayOrientedLinksOut.forEach(function (orientedLinkOut) {
        var nameOrientedLink = orientedLinkOut.label || orientedLinkOut.name;
        contentTooltipAssociateLink.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: localisation + 'ContentTooltip17' + _this.props.name + nameOrientedLink,
          style: styleContentAssociateLink
        }, "- ", nameOrientedLink));
      });
    }

    if (this.props.metaData.length !== 0) {
      contentTooltipMetadata.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
        key: localisation + 'ContentTooltip18' + this.props.name,
        style: styleTitleMetaData
      }, "Metadata"));
      this.props.metaData.forEach(function (oneMetaData, index) {
        var styleContentMetaData = {
          color: oneMetaData.obj.colorText,
          backgroundColor: oneMetaData.obj.colorBack,
          fontWeight: oneMetaData.obj.style.bold ? 'bold' : 'normal',
          fontStyle: oneMetaData.obj.style.italic ? 'italic' : 'normal',
          textDecoration: oneMetaData.obj.style.underline ? 'underline' : 'none',
          fontFamily: _this.props.police,
          fontSize: '9px',
          marginLeft: '10px',
          marginBottom: '0px'
        };
        contentTooltipMetadata.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: localisation + index + 'ContentTooltip19' + _this.props.name,
          style: styleContentMetaData
        }, "- ", oneMetaData.meta));
      });
    }

    if (contentTooltip.length === 0 && contentTooltipMainMetric.length === 0 && contentTooltipAssociateLink.length === 0 && contentTooltipMetadata.length === 0 && !this.props.linkUrl.hoveringTooltipText) {
      return null;
    }

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        border: '1px solid black',
        padding: 0
      }
    }, contentTooltip, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        backgroundColor: addBackColorMainMetric ? backColorMainMetric : backColoTextObject,
        padding: '0 5px'
      }
    }, contentTooltipMainMetric), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        backgroundColor: addBackColorAuxMetric ? backColorAuxMetric : backColoTextObject,
        padding: '0 5px'
      }
    }, contentTooltipAuxMetric), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        padding: '0 5px'
      }
    }, contentTooltipMetadata), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        padding: '0 5px'
      }
    }, contentTooltipAssociateLink), this.defineHtmlLinkTooltip()));
  };

  DrawPoint.prototype.defineBackgroundColor = function () {
    var _this = this;

    var colorBackground = '';

    if (!this.props.colorMode && this.props.seuil.length > 0) {
      if (this.props.seuil[0].backColor !== '') {
        colorBackground = this.props.seuil[0].backColor;
      } else {
        colorBackground = 'black';
      }
    } else {
      colorBackground = 'black';
    }

    var valueMainMetric = parseInt(this.props.valueMainMetric, 10);
    var index = 0;

    if (this.props.traceBack) {
      if (this.props.colorMode && this.props.seuil.length > 0) {
        this.props.seuil.forEach(function (level) {
          var lowerLimitMin = 0;

          if (level.lowerLimitMin === '') {
            lowerLimitMin = 0;
          } else {
            lowerLimitMin = parseInt(level.lowerLimitMin.substring(1), 10);
          }

          if (lowerLimitMin === 0) {
            if (valueMainMetric >= lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
              colorBackground = level.backColor;
            }
          } else if (_this.props.seuil.length === index + 1) {
            if (valueMainMetric > lowerLimitMin) {
              colorBackground = level.backColor;
            }
          } else if (valueMainMetric > lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
            colorBackground = level.backColor;
          }

          index++;
        });
      }
    }

    return colorBackground;
  };

  DrawPoint.prototype.defineBorderColor = function () {
    var _this = this;

    var colorBorder = '';

    if (!this.props.colorMode && this.props.seuil.length > 0) {
      if (this.props.seuil[0].borderColor !== '') {
        colorBorder = this.props.seuil[0].borderColor;
      } else {
        colorBorder = 'black';
      }
    } else {
      colorBorder = 'black';
    }

    var valueMainMetric = parseInt(this.props.valueMainMetric, 10);
    var index = 0;

    if (this.props.traceBorder) {
      if (this.props.colorMode && this.props.seuil.length > 0) {
        this.props.seuil.forEach(function (level) {
          var lowerLimitMin = 0;

          if (level.lowerLimitMin === '') {
            lowerLimitMin = 0;
          } else {
            lowerLimitMin = parseInt(level.lowerLimitMin.substring(1), 10);
          }

          if (lowerLimitMin === 0) {
            if (valueMainMetric >= lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
              colorBorder = level.borderColor;
            }
          } else if (_this.props.seuil.length === index + 1) {
            if (valueMainMetric > lowerLimitMin) {
              colorBorder = level.borderColor;
            }
          } else if (valueMainMetric > lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
            colorBorder = level.borderColor;
          }

          index++;
        });
      }
    }

    return colorBorder;
  };

  DrawPoint.prototype.defineBorderSize = function () {
    var _this = this;

    var sizeBorder = '';

    if (!this.props.colorMode && this.props.seuil.length > 0) {
      sizeBorder = this.props.seuil[0].sizeBorder;
    } else {
      sizeBorder = '1';
    }

    var valueMainMetric = parseInt(this.props.valueMainMetric, 10);
    var index = 0;

    if (this.props.traceBorder) {
      if (this.props.colorMode && this.props.seuil.length > 0) {
        this.props.seuil.forEach(function (level) {
          var lowerLimitMin = 0;

          if (level.lowerLimitMin === '') {
            lowerLimitMin = 0;
          } else {
            lowerLimitMin = parseInt(level.lowerLimitMin.substring(1), 10);
          }

          if (lowerLimitMin === 0) {
            if (valueMainMetric >= lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
              sizeBorder = level.sizeBorder;
            }
          } else if (_this.props.seuil.length === index + 1) {
            if (valueMainMetric > lowerLimitMin) {
              sizeBorder = level.sizeBorder;
            }
          } else if (valueMainMetric > lowerLimitMin && valueMainMetric <= parseInt(level.lowerLimitMax, 10)) {
            sizeBorder = level.sizeBorder;
          }

          index++;
        });
      }
    }

    return sizeBorder;
  };
  /**
   * render
   */


  DrawPoint.prototype.render = function () {
    var initialSpace = this.props.options.coordinateSpaceInitial.coordinate;
    var shape = this.props.shape.value || '';
    var size = this.defineSizeGraphicMarkerPx(this.props.size || '', shape);
    var valuePositionX = parseInt(this.props.positionShapeX, 10) || 0;
    var valuePositionY = parseInt(this.props.positionShapeY, 10) || 0;
    var positionShapeX = this.definePositionX(valuePositionX, initialSpace, size, shape);
    var positionShapeY = this.definePositionY(valuePositionY, initialSpace, size, shape);
    var label = this.props.label;
    var name = this.props.name;
    var drawGraphicMarker = this.props.drawGraphicMarker.value || '';
    var police = this.props.police;
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      key: this.props.name,
      style: {
        cursor: 'pointer'
      }
    }, this.displayLabel(label, name, positionShapeX, positionShapeY, police), this.drawPoint(drawGraphicMarker, size, positionShapeX, positionShapeY));
  };

  return DrawPoint;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (DrawPoint);

/***/ }),

/***/ "./components/Draw/drawRectangle.tsx":
/*!*******************************************!*\
  !*** ./components/Draw/drawRectangle.tsx ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var Functions_isNumFloat__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! Functions/isNumFloat */ "./Functions/isNumFloat.tsx");
/* harmony import */ var _drawRectangleExtend__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./drawRectangleExtend */ "./components/Draw/drawRectangleExtend.tsx");




/**
 * Draw inititial viewing space rectangle
 */

var DrawRectangle = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DrawRectangle, _super);

  function DrawRectangle(props) {
    var _this = _super.call(this, props) || this;
    /**
     * Transform coordinate percent for css
     * @param {number} size value of coordinate
     * @param {boolean} isMax true if x or y is max value
     * @returns coordinate to percent
     */


    _this.transformCoordonneesToPx = function (size, isMax, position) {
      /**
       *
       * V1 -100-100
       *
       */
      // if (size > 100) {
      //   size = 100;
      // } else if (size < 0 && size < -100) {
      //   size = -100;
      // }
      // if (size >= 0) {
      //   size /= 2;
      //   size = isMax ? 50 - size : 50 + size;
      // } else {
      //   size *= -1;
      //   size /= 2;
      //   size = 50 - size;
      // }
      // return size;

      /**
       *
       * Correctif client 0-100
       *
       */
      var result = 0; // if (!this.props.options.coordinateSpaceInitial.defaultReferentiel) {
      //   if (size > 100) {
      //     size = 100;
      //   } else if (size < 0 && size < -100) {
      //     size = -100;
      //   }
      //   if (size >= 0) {
      //     size /= 2;
      //     size = isMax ? 50 - size : 50 + size;
      //   } else {
      //     size *= -1;
      //     size /= 2;
      //     size = 50 - size;
      //   }
      //   result = size;
      // } else {
      //   if (position === 1) {
      //     result = size;
      //   } else if (position === 2) {
      //     result = 100 - size;
      //   } else if (position === 3) {
      //     result = size;
      //   } else if (position === 4) {
      //     result = 100 - size;
      //   }
      // }

      return result;
    };

    _this.limitValueBorder = function (value, position) {
      var widthBackground = parseInt(_this.props.options.baseMap.width, 10);
      var heigthBackground = parseInt(_this.props.options.baseMap.height, 10);
      var result = value;

      if (position === 1 || position === 2) {
        //xMin + xMax
        if (value > widthBackground) {
          result = widthBackground;
        }
      } else if (position === 3 || position === 4) {
        //yMin + yMax
        if (value > heigthBackground) {
          result = heigthBackground;
        }
      }

      return result;
    };

    _this.getPositionBorder = function (value, position) {
      // const widthBackground = parseInt(this.props.options.baseMap.width, 10);
      // const heigthBackground = parseInt(this.props.options.baseMap.height, 10);
      // const xMinInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMin, 10);
      // const xMaxInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.xMax, 10);
      // const yMinInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMin, 10);
      // const yMaxInitialSpace = parseInt(this.props.options.coordinateSpaceInitial.coordinate.yMax, 10);
      // const widthInitialSpace = xMaxInitialSpace - xMinInitialSpace;
      // const heightInitialSpace = yMaxInitialSpace - yMinInitialSpace;
      var result = 0; // if (position === 1) {
      //   //xMin
      //   if (value < 0) {
      //     result = 0;
      //   } else if (xMaxInitialSpace > widthBackground) {
      //     result = (value / xMaxInitialSpace) * widthBackground;
      //   } else {
      //     result = value;
      //   }
      // } else if (position === 2) {
      //   //xMax
      //   if (value > widthBackground) {
      //     result = 0;
      //   } else {
      //     result = widthBackground - value;
      //   }
      // } else if (position === 3) {
      //   //yMax
      //   if (value > heigthBackground) {
      //     result = 0;
      //   } else {
      //     result = heigthBackground - value;
      //   }
      // } else if (position === 4) {
      //   //yMin
      //   if (value < 0) {
      //     result = 0;
      //   } else if (yMaxInitialSpace > heigthBackground) {
      //     result = (value / yMaxInitialSpace) * heigthBackground;
      //   } else {
      //     result = value;
      //   }
      // }

      return result;
    };

    _this.fillCoordinate = function () {
      var options = _this.props.options;
      var xMinInitialSpace = parseInt(options.coordinateSpaceInitial.coordinate.xMin, 10);
      var xMaxInitialSpace = parseInt(options.coordinateSpaceInitial.coordinate.xMax, 10);
      var yMinInitialSpace = parseInt(options.coordinateSpaceInitial.coordinate.yMin, 10);
      var yMaxInitialSpace = parseInt(options.coordinateSpaceInitial.coordinate.yMax, 10);
      var mapItems;
      mapItems = options.regionCoordinateSpace.map(function (line, index) {
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_drawRectangleExtend__WEBPACK_IMPORTED_MODULE_3__["default"], {
          key: 'drawRectangleExtend' + index.toString(),
          uneCoor: line,
          useLimit: false,
          limit: options.coordinateSpaceInitial.coordinate,
          onOptionsChange: _this.props.onOptionsChange,
          options: _this.props.options,
          data: _this.props.data,
          id: 'region' + line.id.toString(),
          //isEnabled={this.props.isEnabled}
          buttonAddLinkIsActive: _this.props.buttonAddLinkIsActive,
          buttonAddIncurvedLinkIsActive: _this.props.buttonAddIncurvedLinkIsActive,
          widthInitialSpaceDefault: (xMaxInitialSpace - xMinInitialSpace).toString(),
          heightInitialSpaceDefault: (yMaxInitialSpace - yMinInitialSpace).toString()
        });
      });
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, mapItems);
    };
    /** creaate rectrangle */


    _this.createRectangle = function () {
      var line = _this.props.coordinateInitial.coordinate;
      var pLeft;
      var pRight;
      var pTop;
      var pBottom;
      var xMin = 0;
      var xMax = 0;
      var yMin = 0;
      var yMax = 0;
      var pBorder = _this.props.coordinateInitial.displayArea ? '3px solid ' + _this.props.color : '';
      xMin = Object(Functions_isNumFloat__WEBPACK_IMPORTED_MODULE_2__["isNumFloat"])(line.xMin) ? parseInt(line.xMin, 10) : 0;
      xMax = Object(Functions_isNumFloat__WEBPACK_IMPORTED_MODULE_2__["isNumFloat"])(line.xMax) ? parseInt(line.xMax, 10) : 0;
      yMin = Object(Functions_isNumFloat__WEBPACK_IMPORTED_MODULE_2__["isNumFloat"])(line.yMin) ? parseInt(line.yMin, 10) : 0;
      yMax = Object(Functions_isNumFloat__WEBPACK_IMPORTED_MODULE_2__["isNumFloat"])(line.yMax) ? parseInt(line.yMax, 10) : 0; // pLeft = this.transformCoordonneesToPx(xMin, false, 1).toString() + '%';
      // pRight = this.transformCoordonneesToPx(xMax, true, 2).toString() + '%';
      // pBottom = this.transformCoordonneesToPx(yMin, false, 3).toString() + '%';
      // pTop = this.transformCoordonneesToPx(yMax, true, 4).toString() + '%';

      pLeft = _this.getPositionBorder(xMin, 1).toString() + 'px';
      pRight = _this.getPositionBorder(xMax, 2).toString() + 'px';
      pTop = _this.getPositionBorder(yMax, 3).toString() + 'px';
      pBottom = _this.getPositionBorder(yMin, 4).toString() + 'px'; // if (xMax >= 0) {
      //   pLeft = this.transformCoordonneesToPx(xMin, false, 1).toString() + 'px';
      //   pRight = this.transformCoordonneesToPx(xMax, true, 2).toString() + 'px';
      // } else {
      //   xMin = xMin * -1;
      //   pRight = this.transformCoordonneesToPx(xMin, false, 1).toString() + 'px';
      //   pLeft = this.transformCoordonneesToPx(xMax, true, 2).toString() + 'px';
      // }
      // if (yMax >= 0) {
      //   pBottom = this.transformCoordonneesToPx(yMin, false, 3).toString() + 'px';
      //   pTop = this.transformCoordonneesToPx(yMax, true, 4).toString() + 'px';
      // } else {
      //   yMin = yMin * -1;
      //   pTop = this.transformCoordonneesToPx(yMin, false, 3).toString() + 'px';
      //   pBottom = this.transformCoordonneesToPx(yMax, true, 4).toString() + 'px';
      // }

      var data = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          border: pBorder,
          bottom: pBottom,
          left: pLeft,
          position: 'absolute',
          right: pRight,
          top: pTop
        },
        id: _this.props.id
      });

      _this.setState({
        resultHTML: data
      });
    };
    /** create rectangle when component mount */


    _this.componentDidMount = function () {
      _this.createRectangle();
    };

    _this.state = {
      resultHTML: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null)
    };
    return _this;
  }
  /** update state when props coordinateInitial change */


  DrawRectangle.prototype.componentDidUpdate = function (prevProps) {
    if (prevProps !== this.props) {
      this.createRectangle();
    }
  };
  /**
   * render
   */


  DrawRectangle.prototype.render = function () {
    var test = {
      position: 'absolute',
      textAlign: 'center',
      height: this.props.options.baseMap.height + 'px',
      width: this.props.options.baseMap.width + 'px'
    };
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: test
    }, this.state.resultHTML);
  };

  return DrawRectangle;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (DrawRectangle);

/***/ }),

/***/ "./components/Draw/drawRectangleExtend.tsx":
/*!*************************************************!*\
  !*** ./components/Draw/drawRectangleExtend.tsx ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var Functions_getLowerLimit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Functions/getLowerLimit */ "./Functions/getLowerLimit.tsx");
/* harmony import */ var Functions_getResultQuery__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Functions/getResultQuery */ "./Functions/getResultQuery.tsx");
/* harmony import */ var Functions_parseColor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Functions/parseColor */ "./Functions/parseColor.tsx");
/* harmony import */ var Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! Functions/fetchMetrics */ "./Functions/fetchMetrics.tsx");

/* eslint-disable prettier/prettier */


 //import { calculRealCoordinate } from 'Functions/otherFunction';





/**
 * Draw rectangle
 */

var DrawRectangleExtend = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(DrawRectangleExtend, _super);

  function DrawRectangleExtend(props) {
    var _this = _super.call(this, props) || this;
    /**
     * Edit color Zone in SVG
     * @param {string} id id is equal to zone for change color in Svg
     * @param {string} color define the color for Svg zone
     */


    _this.editColorSvgZone = function (id, color, border, sizeBorder) {
      var colorSVG = Object(Functions_parseColor__WEBPACK_IMPORTED_MODULE_5__["parseColor"])(color);
      var colorBorderSVG = Object(Functions_parseColor__WEBPACK_IMPORTED_MODULE_5__["parseColor"])(border);
      var changeColorElement = document.getElementById(id);

      if (changeColorElement) {
        changeColorElement.style.fill = colorSVG.color;
        changeColorElement.style.fillOpacity = colorSVG.transparency;
        changeColorElement.style.stroke = colorBorderSVG.color;
        changeColorElement.style.strokeOpacity = colorBorderSVG.transparency;
        changeColorElement.style.strokeWidth = sizeBorder;
      }
    };

    _this.generateValueMetricElement = function (region, valueQuery) {
      var converValueQuery = 'NaN';
      var roundMetrics = region.textObj.valueGenerateObjectText ? parseInt(region.textObj.valueGenerateObjectText.numericFormatElement, 10) : 1;

      if (valueQuery && region.textObj.valueGenerateObjectText && region.textObj.valueGenerateObjectText.numericFormatElement !== '' && roundMetrics) {
        converValueQuery = (valueQuery || 0).toPrecision(roundMetrics).toString();
      } else if (valueQuery) {
        converValueQuery = valueQuery.toString();
      } // (Math.round(valueQuery * roundMetrics + Number.EPSILON) / roundMetrics).toString()


      var value = converValueQuery;

      if (region.textObj.valueGenerateObjectText && converValueQuery !== 'NaN') {
        value = region.textObj.valueGenerateObjectText.legendElement + ' ' + converValueQuery + ' ' + region.textObj.valueGenerateObjectText.unit;
      }

      if (value === 'NaN') {
        return '';
      }

      return value;
    };
    /** fill state for tooltip, color zone and calc round query */


    _this.setStateTooltip = function (lowerLimit, region, valueQuery //link: boolean
    // ): Tooltip => {
    ) {
      var styleTooltip = {
        color: region.textObj.colorText,
        backgroundColor: region.textObj.colorBack
      };
      var styleMetrics = {
        color: region.textObj.valueGenerateObjectText ? region.textObj.valueGenerateObjectText.colorTextElement : 'white',
        backgroundColor: region.textObj.valueGenerateObjectText ? region.textObj.valueGenerateObjectText.colorBackElement : 'black'
      };

      var valueQueryResult = _this.generateValueMetricElement(region, valueQuery);

      var valueMetaData = _this.displayValuesMetaData();

      var tooltipValue = null; // valueQueryResult !== '' ? (
      //   <div>
      //     <div style={styleTooltip}>
      //       {/* {link && <a href={region.linkURL.hoveringTooltipLink}>{region.linkURL.hoveringTooltipText}</a>} */}
      //       <a href={region.linkURL.hoveringTooltipLink}>{region.linkURL.hoveringTooltipText}</a>
      //       {region.textObj.isTextTooltip && <p>{region.label}</p>}
      //     </div>
      //     <div style={styleMetrics}>
      //       {region.textObj.generateObjectText &&
      //         region.textObj.valueGenerateObjectText &&
      //         region.textObj.valueGenerateObjectText.displayObjectInTooltip && <p>{valueQueryResult}</p>}
      //     </div>
      //     <div>{this.displayValuesAuxMetrics()}</div>
      //     <div>{this.displayValuesMetaData()}</div>
      //   </div>
      // ) : null;

      if (valueQueryResult !== '' && region.textObj.valueGenerateObjectText.displayObjectInTooltip || region.metrics.length !== 0 || valueMetaData !== null || _this.props.uneCoor.linkURL.hoveringTooltipText) {
        tooltipValue = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: styleTooltip
        }, region.textObj.isTextTooltip && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", null, region.label)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: styleMetrics
        }, region.textObj.generateObjectText && region.textObj.valueGenerateObjectText && region.textObj.valueGenerateObjectText.displayObjectInTooltip && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", null, valueQueryResult)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, _this.displayValuesAuxMetrics()), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, valueMetaData), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
          href: region.linkURL.hoveringTooltipLink
        }, region.linkURL.hoveringTooltipText));
      }

      return {
        tooltipValue: tooltipValue,
        backgroundColor: lowerLimit.colorBack,
        borderColor: lowerLimit.colorBorder,
        sizeBorder: lowerLimit.sizeBorder,
        valueQuery: valueQueryResult
      };
    };

    _this.desactiveLink = function (event) {
      // const inputFollowingLink: any = document.getElementById('followLink');
      // if (inputFollowingLink) {
      //   if (inputFollowingLink.defaultValue === '') {
      //     event.preventDefault();
      //   }
      // } else if (this.props.uneCoor.linkURL.followLink === '') {
      //   event.preventDefault();
      // }
      if (_this.props.uneCoor.linkURL.followLink === '') {
        event.preventDefault();
      }
    };

    _this.defineCursor = function () {
      var result = 'pointer'; // const inputFollowingLink: any = document.getElementById('followLink');
      // if (inputFollowingLink) {
      //   if (inputFollowingLink.defaultValue === '') {
      //     result = 'default';
      //   }
      // } else if (this.props.uneCoor.linkURL.followLink === '') {
      //   result = 'default';
      // }

      if (_this.props.uneCoor.linkURL.followLink === '') {
        result = 'default';
      }

      return result;
    };

    _this.displayValueQuery = function (region) {
      if (region.textObj.generateObjectText && region.textObj.valueGenerateObjectText && !region.textObj.valueGenerateObjectText.displayObjectInTooltip) {
        return true;
      }

      return false;
    };

    _this.getPositionTextObjectRegionSVG = function (idSVG) {
      var coor = {
        top: '0',
        bottom: '0',
        left: '0',
        right: '0'
      };
      var elementSVG;

      if (_this.props.options.baseMap.isUploaded) {
        elementSVG = document.getElementById(idSVG);
      } else {
        elementSVG = document.getElementById('oct' + idSVG);
      }

      if (elementSVG) {
        var xSVG = 0;
        var ySVG = 0;
        var widthSVG = 0;
        var heightSVG = 0;
        var top_1 = '';
        var left = '';

        if (elementSVG.localName === 'path') {
          var allValues = elementSVG.attributes['d'].nodeValue;
          var arrayAllValues = allValues.split(' ');
          var iX = -2;
          var xMin = 1000000;
          var xMax = 0;
          var iY = -1;
          var yMin = 1000000;
          var yMax = 0;

          for (var i = 0; i < arrayAllValues.length; i++) {
            var valueToCheck = parseInt(arrayAllValues[i], 10);

            if (i === iX + 3) {
              if (valueToCheck < xMin) {
                xMin = valueToCheck;
              }

              if (valueToCheck > xMax) {
                xMax = valueToCheck;
              }

              iX = i;
            }

            if (i === iY + 3) {
              if (valueToCheck < yMin) {
                yMin = valueToCheck;
              }

              if (valueToCheck > yMax) {
                yMax = valueToCheck;
              }

              iY = i;
            }
          }

          left = xMax.toString();
          top_1 = yMax.toString();
        } else if (elementSVG.localName === 'ellipse') {
          xSVG = parseInt(elementSVG.attributes['cx'].nodeValue, 10);
          ySVG = parseInt(elementSVG.attributes['cy'].nodeValue, 10);
          var rX = parseInt(elementSVG.attributes['rx'].nodeValue, 10) * 2; //const rY = parseInt(elementSVG.attributes['ry'].nodeValue, 10) * 2;

          left = (xSVG + rX).toString();
          top_1 = ySVG.toString();
        } else if (elementSVG.localName === 'rect') {
          xSVG = parseInt(elementSVG.attributes['x'].nodeValue, 10);
          ySVG = parseInt(elementSVG.attributes['y'].nodeValue, 10);
          widthSVG = parseInt(elementSVG.attributes['width'].nodeValue, 10);
          heightSVG = parseInt(elementSVG.attributes['height'].nodeValue, 10);
          left = (xSVG + widthSVG).toString();
          top_1 = (ySVG + heightSVG).toString();
        }

        coor.top = (parseInt(top_1, 10) + parseInt(_this.props.uneCoor.positionParameter.labelAPositionY, 10) * -1).toString();
        coor.left = (parseInt(left, 10) + parseInt(_this.props.uneCoor.positionParameter.labelAPositionX, 10)).toString();
      }

      return coor;
    };
    /** generate tooltip for metrics and apply color with lower limit */


    _this.generateTooltipAndEditColor = function (region, valueQuery) {
      var stateIsFill = false;
      var lowerLimit = Object(Functions_getLowerLimit__WEBPACK_IMPORTED_MODULE_3__["getLowerLimit"])(region, valueQuery);

      if (region.mode) {
        _this.editColorSvgZone(region.idSVG, lowerLimit.colorBack, lowerLimit.colorBorder, lowerLimit.sizeBorder.toString());
      } // const resultTooltip: Tooltip = this.setStateTooltip(lowerLimit, region, valueQuery, this.props.isEnabled);
      // const resultTooltip: Tooltip = this.setStateTooltip(lowerLimit, region, valueQuery);


      var resultTooltip = _this.setStateTooltip(lowerLimit, region, valueQuery); //if (valueQuery) {
      //if (region.mode && ((!region.textObj.isTextTooltip) || this.displayValueQuery(region))) {


      if (region.mode) {
        //const coordinateWrite: Coord4DInt | null = searchMinMaxIdSVG(region.idSVG);
        var coordinateTextObject = _this.getPositionTextObjectRegionSVG(region.idSVG); //if (coordinateWrite) {


        stateIsFill = true;
        var style = region.textObj.style;
        var styleWrite = {
          width: 'auto',
          position: 'absolute',
          zIndex: 999,
          // left: coordinateWrite.xMax - (coordinateWrite.xMax - coordinateWrite.xMin),
          // top: coordinateWrite.yMax,
          left: coordinateTextObject.left + 'px',
          top: coordinateTextObject.top + 'px',
          border: '1px solid black'
        };
        var styleLabelTooltipSVG = {
          textDecoration: _this.defineTextDecoration(style),
          fontStyle: _this.defineFontStyle(style),
          fontWeight: _this.defineFontWeight(style),
          fontSize: _this.props.options.display.size,
          fontFamily: _this.props.options.display.police,
          color: region.textObj.colorText,
          backgroundColor: region.textObj.colorBack,
          margin: 0,
          padding: '5px 5px 0 5px'
        };
        var styleMainMetricTooltipSVG = {
          textDecoration: _this.defineTextDecoration(style),
          fontStyle: _this.defineFontStyle(style),
          fontWeight: _this.defineFontWeight(style),
          color: region.textObj.valueGenerateObjectText.addColorTextElement ? region.textObj.valueGenerateObjectText.colorTextElement : 'white',
          backgroundColor: region.textObj.valueGenerateObjectText.addColorBackElement ? region.textObj.valueGenerateObjectText.colorBackElement : 'black',
          fontSize: _this.props.options.display.size,
          fontFamily: _this.props.options.display.police,
          margin: 0,
          padding: '5px 5px 0 5px'
        };
        var htmlResult = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: styleWrite
        }, !region.textObj.isTextTooltip && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          style: styleLabelTooltipSVG
        }, region.label), region.textObj.generateObjectText && !region.textObj.valueGenerateObjectText.displayObjectInTooltip && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          style: styleMainMetricTooltipSVG
        }, _this.displayValueQuery(region) && resultTooltip.valueQuery));

        if (region.textObj.isTextTooltip && region.textObj.valueGenerateObjectText.displayObjectInTooltip) {
          htmlResult = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
        }

        _this.setState({
          htmlResult: htmlResult,
          tooltipValue: resultTooltip.tooltipValue,
          backgroundColor: resultTooltip.backgroundColor,
          borderColor: resultTooltip.borderColor,
          sizeBorder: resultTooltip.sizeBorder,
          valueQuery: resultTooltip.valueQuery
        }); //}
        //}

      }

      if (!stateIsFill) {
        _this.setState({
          tooltipValue: resultTooltip.tooltipValue,
          backgroundColor: resultTooltip.backgroundColor,
          borderColor: resultTooltip.borderColor,
          sizeBorder: resultTooltip.sizeBorder,
          valueQuery: resultTooltip.valueQuery
        });
      }
    };
    /** get data metrics and fill state */


    _this.reqMetrics = function () {
      var region = _this.props.uneCoor;
      Object(Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_6__["reqMetricRegion"])(region, _this.props);

      if (region.mainMetric.returnQuery && region.mainMetric.returnQuery.length > 0) {
        var cnt = Object(Functions_getResultQuery__WEBPACK_IMPORTED_MODULE_4__["getResultQuery"])(region.mainMetric);

        _this.generateTooltipAndEditColor(region, cnt);
      } else {
        _this.generateTooltipAndEditColor(region, null);
      }
    };

    _this.getValuesAuxiliaryMetrics = function () {
      var region = _this.props.uneCoor;
      Object(Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_6__["reqMetricAuxRegion"])(region, _this.props);
      var mainMetric = region.mainMetric;
      var auxiliaryMetrics = region.metrics;
      var valueAuxiliaryMetric = []; //const countMetrics: number = auxiliaryMetrics.length;

      auxiliaryMetrics.forEach(function (metric) {
        var _a;

        var countTotalValues = 0;
        var resultTotalValues = 0;
        var result = '';

        if (metric.returnQuery && metric.returnQuery.length > 0) {
          var numberLoop = ((_a = metric.returnQuery) === null || _a === void 0 ? void 0 : _a.length) || 0;

          if (metric.key !== '' && metric.keyValue !== '') {
            for (var i = 0; i < numberLoop; i++) {
              var line = metric.returnQuery[i];

              if (line.fields[0].labels) {
                if (mainMetric.refId !== '') {
                  if (line.fields[0].labels[mainMetric.key] === mainMetric.keyValue || mainMetric.key === '' && mainMetric.keyValue === '') {
                    if (line.fields[0].labels[metric.key] === metric.keyValue) {
                      var countValues = line.fields[0].values.length;

                      for (var i_1 = 0; i_1 < countValues; i_1++) {
                        if (line.fields[0].values.get(i_1)) {
                          resultTotalValues += line.fields[0].values.get(i_1);
                          countTotalValues++;
                        }
                      }
                    }
                  }
                }
              }
            }
          } else {
            for (var i = 0; i < numberLoop; i++) {
              var line = metric.returnQuery[i];

              if (line.fields[0].labels) {
                if (mainMetric.refId) {
                  if (line.fields[0].labels[mainMetric.key] === mainMetric.keyValue || mainMetric.key === '' && mainMetric.keyValue === '') {
                    var countValues = line.fields[0].values.length;

                    for (var i_2 = 0; i_2 < countValues; i_2++) {
                      if (line.fields[0].values.get(i_2)) {
                        resultTotalValues += line.fields[0].values.get(i_2);
                        countTotalValues++;
                      }
                    }
                  }
                }
              }
            }
          }

          if (metric.manageValue === 'avg') {
            result = (resultTotalValues / countTotalValues).toString();
          } else if (metric.manageValue === 'sum') {
            result = resultTotalValues.toString();
          } else if (metric.manageValue === 'err') {
            if (countTotalValues > 1) {
              result = 'error';
            } else {
              result = resultTotalValues.toString();
            }
          }
        }

        if (result !== '') {
          valueAuxiliaryMetric.push(result);
        }
      });
      return valueAuxiliaryMetric;
    };

    _this.getConvertValueAuxMetrics = function (valueBrut) {
      var result = '';
      var region = _this.props.uneCoor; //const roundValue: string = region.textObj.generateAuxiliaryElement.numericFormatElement;

      var roundValue = parseInt(region.textObj.generateAuxiliaryElement.numericFormatElement, 10) || 1;
      var unit = region.textObj.generateAuxiliaryElement.unit; //if (roundValue !== '') {

      result = parseFloat(valueBrut).toPrecision(roundValue).toString(); // } else {
      //   result = valueBrut;
      // }

      return result + ' ' + unit;
    };

    _this.displayValuesAuxMetrics = function () {
      var e_1, _a;

      var html = [];
      var region = _this.props.uneCoor;

      var valuesAuxMetrics = _this.getValuesAuxiliaryMetrics();

      var auxMetrics = region.metrics;
      var addColorText = region.textObj.generateAuxiliaryElement.addColorTextElement;
      var addColorBack = region.textObj.generateAuxiliaryElement.addColorBackElement;
      var legend = region.textObj.generateAuxiliaryElement.legendElement;
      var colorText = '';
      var colorBack = '';

      if (addColorText) {
        colorText = region.textObj.generateAuxiliaryElement.colorTextElement;
      } else {
        colorText = 'white';
      }

      if (addColorBack) {
        colorBack = region.textObj.generateAuxiliaryElement.colorBackElement;
      } else {
        colorBack = 'black';
      }

      var styleTitle = {
        fontFamily: _this.props.options.display.police,
        fontSize: '10px',
        marginTop: '5px',
        marginBottom: '0px',
        color: colorText
      };
      var styleTitle2 = {
        fontFamily: _this.props.options.display.police,
        fontSize: '10px',
        marginTop: '5px',
        marginLeft: '5px',
        marginBottom: '0px',
        color: colorText
      };
      var styleContent = {
        fontFamily: _this.props.options.display.police,
        fontSize: '9px',
        marginLeft: '10px',
        marginBottom: '0px',
        color: colorText
      };

      if (auxMetrics.length > 0) {
        html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: 'region' + region.id + 'contentToolTip1',
          style: styleTitle
        }, "Auxiliary Metric"));
        html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: 'region' + region.id + 'contentToolTip2',
          style: styleTitle
        }, legend));
        var index = 1;

        try {
          for (var auxMetrics_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(auxMetrics), auxMetrics_1_1 = auxMetrics_1.next(); !auxMetrics_1_1.done; auxMetrics_1_1 = auxMetrics_1.next()) {
            var metric = auxMetrics_1_1.value;

            var valueAuxMetric = _this.getConvertValueAuxMetrics(valuesAuxMetrics[index - 1]);

            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.id + 'contentToolTip3',
              style: styleTitle2
            }, "+ Metric ", index));
            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.id + 'contentToolTip4',
              style: styleContent
            }, "- Reference : ", metric.refId));
            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.id + 'contentToolTip5',
              style: styleContent
            }, "- Value : ", !isNaN(parseFloat(valueAuxMetric)) && valueAuxMetric));
            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.id + 'contentToolTip6',
              style: styleContent
            }, "- Key : ", metric.key));
            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.id + 'contentToolTip7',
              style: styleContent
            }, "- KeyValue : ", metric.keyValue));
            html.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
              key: index + 'region' + region.id + 'contentToolTip8',
              style: styleContent
            }, "- Type : ", metric.manageValue));
            index++;
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (auxMetrics_1_1 && !auxMetrics_1_1.done && (_a = auxMetrics_1["return"])) _a.call(auxMetrics_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
        style: {
          backgroundColor: colorBack
        }
      }, html);
    };

    _this.displayValuesMetaData = function () {
      var styleTitleMetaData = {
        fontFamily: _this.props.options.display.police,
        fontSize: '10px',
        marginTop: '5px',
        marginBottom: '0px',
        color: 'white'
      };
      var result = [];

      if (_this.props.uneCoor.meta.length !== 0) {
        result.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
          key: 'region' + _this.props.uneCoor.id + 'ContentTooltip9' + _this.props.uneCoor.label,
          style: styleTitleMetaData
        }, "Metadata"));

        _this.props.uneCoor.meta.forEach(function (oneMetaData, index) {
          var styleContentMetaData = {
            color: oneMetaData.obj.colorText,
            backgroundColor: oneMetaData.obj.colorBack,
            fontWeight: oneMetaData.obj.style.bold ? 'bold' : 'normal',
            fontStyle: oneMetaData.obj.style.italic ? 'italic' : 'normal',
            textDecoration: oneMetaData.obj.style.underline ? 'underline' : 'none',
            fontFamily: _this.props.options.display.police,
            fontSize: '9px',
            marginLeft: '10px',
            marginBottom: '0px'
          };
          result.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
            key: index + 'region' + _this.props.uneCoor.id + 'ContentTooltip10' + _this.props.uneCoor.label,
            style: styleContentMetaData
          }, "- ", oneMetaData.meta));
        });
      } else {
        return null;
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, result);
    };

    _this.getCoordinatePxAdaptToInitialSpace = function (region, // coorRegion: Coord4D,
    coorRegionDefault) {
      var widthBackground = parseInt(_this.props.options.baseMap.width, 10);
      var heightBackground = parseInt(_this.props.options.baseMap.height, 10);
      var initialSpace = _this.props.options.coordinateSpaceInitial.coordinate;
      var xMin = parseInt(initialSpace.xMin, 10);
      var xMax = parseInt(initialSpace.xMax, 10);
      var yMin = parseInt(initialSpace.yMin, 10);
      var yMax = parseInt(initialSpace.yMax, 10);
      var widthInitialSpace = xMax - xMin;
      var heightInitialSpace = yMax - yMin;
      var leftPx = 0;
      var rightPx = 0;
      var topPx = 0;
      var bottomPx = 0;
      var ratioLeft = parseInt(coorRegionDefault.xMin, 10) / widthBackground;
      var ratioRight = (widthBackground - parseInt(coorRegionDefault.xMax, 10)) / widthBackground;
      var ratioTop = (heightBackground - parseInt(coorRegionDefault.yMax, 10)) / heightBackground;
      var ratioBottom = parseInt(coorRegionDefault.yMin, 10) / heightBackground;
      leftPx = Math.round(_this.defineLimitX(xMin + widthInitialSpace * ratioLeft));
      rightPx = Math.round(_this.defineLimitX(widthInitialSpace * ratioRight + (widthBackground - xMax)));
      topPx = Math.round(_this.defineLimitY(heightInitialSpace * ratioTop + (heightBackground - yMax)));
      bottomPx = Math.round(_this.defineLimitY(yMin + heightInitialSpace * ratioBottom));
      var newArrayRegion = _this.props.options.regionCoordinateSpace;
      newArrayRegion.forEach(function (currentRegion) {
        if (currentRegion.id === region.id) {
          currentRegion.coords.xMin = leftPx.toString();
          currentRegion.coords.xMax = (widthBackground - rightPx).toString();
          currentRegion.coords.yMin = bottomPx.toString();
          currentRegion.coords.yMax = (heightBackground - topPx).toString();
        }
      });
      _this.props.options.regionCoordinateSpace = newArrayRegion;
      var leftToDraw = (leftPx - xMin) / widthInitialSpace * widthBackground;
      var rightToDraw = (rightPx - (widthBackground - xMax)) / widthInitialSpace * widthBackground;
      var topToDraw = (topPx - (heightBackground - yMax)) / heightInitialSpace * heightBackground;
      var bottomToDraw = (bottomPx - yMin) / heightInitialSpace * heightBackground;
      var result = {
        top: topToDraw.toString() + 'px',
        bottom: bottomToDraw.toString() + 'px',
        left: leftToDraw.toString() + 'px',
        right: rightToDraw.toString() + 'px'
      };
      return result;
    };
    /** final region zone . Call function after reqMetrics*/


    _this.renduFinal = function () {
      if (_this.props.uneCoor.mode) {
        return;
      }

      var region = _this.props.uneCoor;

      var pBorder = _this.state.sizeBorder.toString() + 'px solid ' + _this.state.borderColor;

      var backColor = region.textObj.colorBack;
      var textColor = region.textObj.colorText; //const coorHTML: CoorHTML = calculRealCoordinate(region, this.props.useLimit, this.props.limit);

      var coorHTML = _this.getCoordinatePxAdaptToInitialSpace(region, region.coordsDefault // region.coords,
      // parseInt(region.widthInitialSpaceDefault, 10),
      // parseInt(region.heightInitialSpaceDefault, 10)
      );

      var style = region.textObj.style;
      var valueCursor = 'default';

      if (_this.props.buttonAddLinkIsActive || _this.props.buttonAddIncurvedLinkIsActive) {
        valueCursor = 'pointer';
      }

      var styleDiv = {
        position: 'absolute',
        border: pBorder,
        top: coorHTML.top,
        bottom: coorHTML.bottom,
        left: coorHTML.left,
        right: coorHTML.right,
        zIndex: 999,
        justifyContent: 'center',
        background: 'url(' + region.img + ') no-repeat center center',
        backgroundColor: _this.state.backgroundColor,
        backgroundSize: 'contain',
        cursor: valueCursor
      };
      var styleTextDiv = {
        backgroundColor: backColor,
        textDecoration: _this.defineTextDecoration(style),
        fontStyle: _this.defineFontStyle(style),
        fontWeight: _this.defineFontWeight(style),
        textAlign: 'center',
        //verticalAlign: 'middle',
        color: textColor,
        marginTop: parseInt(region.positionParameter.labelAPositionY, 10) * -1 + 'px',
        marginLeft: region.positionParameter.labelAPositionX + 'px'
      };
      var styleMetricsDiv = {
        textDecoration: _this.defineTextDecoration(style),
        fontStyle: _this.defineFontStyle(style),
        fontWeight: _this.defineFontWeight(style),
        backgroundColor: region.textObj.valueGenerateObjectText ? region.textObj.valueGenerateObjectText.colorBackElement : 'black',
        color: region.textObj.valueGenerateObjectText ? region.textObj.valueGenerateObjectText.colorTextElement : 'white',
        textAlign: 'center'
      };
      var positionTooltip = '';

      if (region.positionParameter.tooltipPositionA.value) {
        positionTooltip = region.positionParameter.tooltipPositionA.value.toLowerCase();
      }

      var value;

      if (_this.props.buttonAddLinkIsActive || _this.props.buttonAddIncurvedLinkIsActive) {
        value = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: styleDiv,
          id: _this.props.id
        }, (!region.textObj.isTextTooltip || region.textObj.generateObjectText) && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: styleTextDiv
        }, !region.textObj.isTextTooltip && region.label), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: styleMetricsDiv
        }, region.textObj.generateObjectText && !region.textObj.valueGenerateObjectText.displayObjectInTooltip && _this.state.valueQuery)));

        if (region.textObj.isTextTooltip || region.textObj.generateObjectText && region.textObj.valueGenerateObjectText.displayObjectInTooltip || region.textObj.generateAuxiliaryElement.displayObjectInTooltip || region.meta.length !== 0) {
          // if (this.state.tooltipValue) {
          //   value = <Tooltip content={this.state.tooltipValue}>{value}</Tooltip>;
          // } else {
          //   <div>{value}</div>;
          // }
          if (_this.state.tooltipValue === null) {
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, value);
          } else {
            value = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
              placement: positionTooltip,
              content: _this.state.tooltipValue
            }, value);
          }
        }
      } else {
        value = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: styleDiv,
          id: _this.props.id
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", {
          href: region.linkURL.followLink,
          onClick: _this.desactiveLink,
          style: {
            cursor: _this.defineCursor()
          },
          target: "_blank",
          rel: "noopener noreferrer"
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            height: '100%',
            width: '100%'
          }
        }, (!region.textObj.isTextTooltip || region.textObj.generateObjectText) && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: styleTextDiv
        }, !region.textObj.isTextTooltip && region.label), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: styleMetricsDiv
        }, region.textObj.generateObjectText && !region.textObj.valueGenerateObjectText.displayObjectInTooltip && _this.state.valueQuery)))));

        if (region.textObj.isTextTooltip || region.textObj.generateObjectText && region.textObj.valueGenerateObjectText.displayObjectInTooltip || region.textObj.generateAuxiliaryElement.displayObjectInTooltip || region.meta.length !== 0) {
          // if (this.state.tooltipValue) {
          //   value = <Tooltip content={this.state.tooltipValue}>{value}</Tooltip>;
          // } else {
          //   <div>{value}</div>;
          // }
          if (_this.state.tooltipValue === null) {
            react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, value);
          } else {
            value = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Tooltip"], {
              placement: positionTooltip,
              content: _this.state.tooltipValue
            }, value);
          }
        }
      } // if (!this.props.isEnabled && region.linkURL.followLink !== '') {
      //   value = (
      //     <div style={styleDiv} id={this.props.id}>
      //       <a href={region.linkURL.followLink}>
      //         <div style={{height: '100%', width: '100%'}} >
      //           {(!region.textObj.isTextTooltip || region.textObj.generateObjectText) && (
      //             <div>
      //               <div style={styleTextDiv}>{!region.textObj.isTextTooltip && region.label}</div>
      //               <div style={styleMetricsDiv}>
      //                 {region.textObj.generateObjectText && !region.textObj.valueGenerateObjectText.displayObjectInTooltip && this.state.valueQuery}
      //               </div>
      //             </div>
      //           )}
      //         </div>
      //       </a>
      //     </div>
      //   );
      //   if (region.textObj.isTextTooltip || (region.textObj.generateObjectText && region.textObj.valueGenerateObjectText.displayObjectInTooltip) || region.textObj.generateAuxiliaryElement.displayObjectInTooltip) {
      //     value = <Tooltip content={this.state.tooltipValue}>{value}</Tooltip>;
      //   }
      // } else {
      //   value = (
      //     <div style={styleDiv} id={this.props.id}>
      //       {(!region.textObj.isTextTooltip || region.textObj.generateObjectText) && (
      //         <div>
      //           <div style={styleTextDiv}>{!region.textObj.isTextTooltip && region.label}</div>
      //           <div style={styleMetricsDiv}>
      //             {region.textObj.generateObjectText && !region.textObj.valueGenerateObjectText.displayObjectInTooltip && this.state.valueQuery}
      //           </div>
      //         </div>
      //       )}
      //     </div>
      //   );
      //   if (region.textObj.isTextTooltip || (region.textObj.generateObjectText && region.textObj.valueGenerateObjectText.displayObjectInTooltip) || region.textObj.generateAuxiliaryElement.displayObjectInTooltip) {
      //     value = <Tooltip content={this.state.tooltipValue}>{value}</Tooltip>;
      //   }
      // }


      _this.setState({
        htmlResult: value
      });
    };
    /** fill state to display data in html */


    _this.fillState = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var _this = this;

        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , Promise.resolve('Success').then(function () {
                _this.reqMetrics();
              })];

            case 1:
              _a.sent();

              return [4
              /*yield*/
              , Promise.resolve('Success').then(function () {
                _this.renduFinal();
              })];

            case 2:
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.defineTextDecoration = function (mainStyle) {
      var result = '';

      if (mainStyle.underline) {
        result = 'underline';
      } else {
        if (_this.props.options.display.style.underline) {
          result = 'underline';
        } else {
          result = 'none';
        }
      }

      return result;
    };

    _this.defineFontStyle = function (mainStyle) {
      var result = '';

      if (mainStyle.italic) {
        result = 'italic';
      } else {
        if (_this.props.options.display.style.italic) {
          result = 'italic';
        } else {
          result = 'normal';
        }
      }

      return result;
    };

    _this.defineFontWeight = function (mainStyle) {
      var result = '';

      if (mainStyle.bold) {
        result = 'bold';
      } else {
        if (_this.props.options.display.style.bold) {
          result = 'bold';
        } else {
          result = 'normal';
        }
      }

      return result;
    };
    /** load prometheus value */


    _this.componentDidMount = function () {
      _this.fillState();
    };

    _this.state = {
      tooltipValue: null,
      backgroundColor: 'rgba(255, 255, 255, 0)',
      borderColor: 'rgba(255, 255, 255, 0)',
      sizeBorder: 1,
      htmlResult: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null),
      valueQuery: ''
    };
    return _this;
  }
  /**
   * to do
   * @param coordinateX
   *
   */


  DrawRectangleExtend.prototype.defineLimitX = function (coordinateX) {
    var result = coordinateX; // if (this.props.options.coordinateSpaceInitial.defaultReferentiel) {
    //   if (coordinateX > 100) {
    //     result = 100;
    //   }
    //   if (coordinateX < 0) {
    //     result = 0;
    //   }
    // } else {
    //   if (coordinateX > 100) {
    //     result = 100;
    //   }
    //   if (coordinateX < -100) {
    //     result = -100;
    //   }
    // }

    return result;
  };
  /**
   * to do
   * @param coordinateY
   *
   */


  DrawRectangleExtend.prototype.defineLimitY = function (coordinateY) {
    var result = coordinateY; // if (this.props.options.coordinateSpaceInitial.defaultReferentiel) {
    //   if (coordinateY > 100) {
    //     result = 100;
    //   }
    //   if (coordinateY < 0) {
    //     result = 0;
    //   }
    // } else {
    //   if (coordinateY > 100) {
    //     result = 100;
    //   }
    //   if (coordinateY < -100) {
    //     result = -100;
    //   }
    // }

    return result;
  };
  /**
   * update props
   * @param prevProps
   */


  DrawRectangleExtend.prototype.componentDidUpdate = function (prevProps) {
    if (prevProps !== this.props) {
      this.fillState();
    }
  };
  /** render */


  DrawRectangleExtend.prototype.render = function () {
    return this.state.htmlResult;
  };

  return DrawRectangleExtend;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (DrawRectangleExtend);

/***/ }),

/***/ "./components/Parametrage/VariableColor.tsx":
/*!**************************************************!*\
  !*** ./components/Parametrage/VariableColor.tsx ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var Models_ArrayInputClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Models/ArrayInputClass */ "./Models/ArrayInputClass.tsx");
/* harmony import */ var Models_InputClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Models/InputClass */ "./Models/InputClass.tsx");
/* harmony import */ var Models_LowerLimitClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Models/LowerLimitClass */ "./Models/LowerLimitClass.tsx");
/* harmony import */ var Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! Functions/Input/inputSeriesColorPicker */ "./Functions/Input/inputSeriesColorPicker.tsx");
/* harmony import */ var Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! Functions/Input/inputText */ "./Functions/Input/inputText.tsx");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }









/**
 * edit colors in variable mode
 */

var VariableColor = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(VariableColor, _super);

  function VariableColor(props) {
    var _this = _super.call(this, props) || this;
    /**
     * set state for arrayInputClass with Promise
     */


    _this.setStateAsyncArrayInputClass = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /**
     * set state for seuil with Promise
     */


    _this.setStateAsyncLowerLimit = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /**
     * set state for index with Promise
     */


    _this.setStateAsyncIndex = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /**
     * set state for nbVariation with Promise
     */


    _this.setStateAsyncNbVariation = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /**
     * send data to parent
     */


    _this.callBack = function () {
      _this.fillVarInput();

      _this.props.lowerLimitCallBack(_this.state.lowerLimit);
    };
    /** old function */


    _this.saveData = function () {// const { onOptionsChange } = this.props;
      // console.table(this.state.seuil);
      // onOptionsChange({
      // 	...this.props.options,
      // 	seuil: this.state.seuil,
      // });
    };
    /**
     * add new seuil
     * @param idx index for id
     */


    _this.addInput = function (idx, newLowerLimit) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncArrayInputClass({
                arrayInputClass: this.state.arrayInputClass.slice().concat(new Models_ArrayInputClass__WEBPACK_IMPORTED_MODULE_3__["ArrayInputClass"](idx, [new Models_InputClass__WEBPACK_IMPORTED_MODULE_4__["InputClass"]('gestCouleurMin' + idx.toString(), 'Seuil min', 'lowerLimitMin', 'text', false, 'Seuil min', undefined), new Models_InputClass__WEBPACK_IMPORTED_MODULE_4__["InputClass"]('gestCouleurMax' + idx.toString(), 'Seuil max', 'lowerLimitMax', 'text', false, 'Seuil max', undefined)]))
              })];

            case 1:
              _a.sent();

              return [4
              /*yield*/
              , this.setStateAsyncLowerLimit({
                lowerLimit: this.state.lowerLimit.concat(newLowerLimit)
              })];

            case 2:
              _a.sent();

              return [4
              /*yield*/
              , this.setStateAsyncIndex({
                index: idx + 1
              })];

            case 3:
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * call function with value input change
     * @param event event input
     * @param idInput id input
     * @param idLine index array
     */


    _this.handleValueChange = function (event, idInput, idLine) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var cpy;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              cpy = this.state.lowerLimit.slice();

              if (idInput === 'lowerLimitMin') {
                cpy[idLine].lowerLimitMin = event;
              } else {
                cpy[idLine].lowerLimitMax = event;

                if (cpy.length > idLine + 1) {
                  cpy[idLine + 1].lowerLimitMin = '>' + event;
                }
              }

              return [4
              /*yield*/
              , this.setStateAsyncLowerLimit({
                lowerLimit: cpy
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * call function when colorFond value change
     * @param key line index to modify
     * @param color the new color to add
     */


    _this.onChangeColorFond = function (key, color) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var cpy;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              cpy = this.state.lowerLimit;
              cpy[key].backColor = color;
              return [4
              /*yield*/
              , this.setStateAsyncLowerLimit({
                lowerLimit: cpy
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * call fonction when colorContour change
     * @param key line index to modify
     * @param color the new color to add
     */


    _this.onChangeColorContour = function (key, color) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var cpy;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              cpy = this.state.lowerLimit;
              cpy[key].borderColor = color;
              return [4
              /*yield*/
              , this.setStateAsyncLowerLimit({
                lowerLimit: cpy
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * call function when sizeBorder value change
     * @param key line index to modify
     * @param size the new size to add
     */


    _this.onChangeSzContour = function (key, size) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var cpy;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              cpy = this.state.lowerLimit;
              cpy[key].sizeBorder = size;
              return [4
              /*yield*/
              , this.setStateAsyncLowerLimit({
                lowerLimit: cpy
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * insert color picker
     * @param keyInt index to edit line
     * @returns JSX.Element
     */


    _this.addButtonColor = function (keyInt) {
      var key = keyInt.toString();
      var couleur = [];

      var l10n = __webpack_require__(/*! Localization/en.json */ "./Localization/en.json");

      if (_this.props.traceBack) {
        var keyFondColorPicker = key + 'FondcolorPicker';
        couleur.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_6__["default"], {
          key: keyFondColorPicker,
          color: _this.state.lowerLimit[keyInt].backColor,
          keyInt: keyInt,
          text: l10n.colorVariable.switchBackgroundColor,
          _onChange: _this.onChangeColorFond
        }));
      }

      if (_this.props.traceBorder) {
        var keyContourDiv = key + 'ContourDiv';
        var nameInputSize = '';

        if (_this.props.isLink) {
          nameInputSize = 'Size';
        } else {
          nameInputSize = l10n.colorVariable.thicknessOutline;
        }

        couleur.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: keyContourDiv
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_6__["default"], {
          color: _this.state.lowerLimit[keyInt].borderColor,
          keyInt: keyInt,
          text: l10n.colorVariable.switchOutlineColor,
          _onChange: _this.onChangeColorContour
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          labelWidth: 15,
          label: nameInputSize,
          name: "epaisseurContour",
          placeholder: l10n.colorVariable.thicknessOutline,
          value: _this.state.lowerLimit[keyInt].sizeBorder,
          onChange: function onChange(event) {
            return _this.onChangeSzContour(keyInt, event.currentTarget.value);
          }
        })));
      }

      return couleur;
    };
    /**
     * call fonction when edit nbVariation
     */


    _this.onChangeVariation = function (event) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncNbVariation({
                nbVariation: event.currentTarget.value
              })];

            case 1:
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** generate array input */


    _this.test = function (newSeuil) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var arrayInput, idx, pSeuil, newSeuil_1, newSeuil_1_1, line;

        var e_1, _a;

        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_b) {
          switch (_b.label) {
            case 0:
              arrayInput = this.state.arrayInputClass.slice();
              idx = this.state.index;
              pSeuil = this.state.lowerLimit;

              try {
                for (newSeuil_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(newSeuil), newSeuil_1_1 = newSeuil_1.next(); !newSeuil_1_1.done; newSeuil_1_1 = newSeuil_1.next()) {
                  line = newSeuil_1_1.value;
                  arrayInput.push(new Models_ArrayInputClass__WEBPACK_IMPORTED_MODULE_3__["ArrayInputClass"](idx, [new Models_InputClass__WEBPACK_IMPORTED_MODULE_4__["InputClass"]('gestCouleurMin' + idx.toString(), 'Seuil min', 'lowerLimitMin', 'text', false, 'Seuil min', undefined), new Models_InputClass__WEBPACK_IMPORTED_MODULE_4__["InputClass"]('gestCouleurMax' + idx.toString(), 'Seuil max', 'lowerLimitMax', 'text', false, 'Seuil max', undefined)]));
                  idx++;
                  pSeuil.push(line);
                }
              } catch (e_1_1) {
                e_1 = {
                  error: e_1_1
                };
              } finally {
                try {
                  if (newSeuil_1_1 && !newSeuil_1_1.done && (_a = newSeuil_1["return"])) _a.call(newSeuil_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }

              return [4
              /*yield*/
              , this.setStateAsyncArrayInputClass({
                arrayInputClass: arrayInput
              })];

            case 1:
              _b.sent();

              return [4
              /*yield*/
              , this.setStateAsyncLowerLimit({
                lowerLimit: pSeuil
              })];

            case 2:
              _b.sent();

              return [4
              /*yield*/
              , this.setStateAsyncIndex({
                index: idx
              })];

            case 3:
              _b.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * call addInput to prepare new inputs
     * @param nb number inputs to add
     */


    _this.addMultipleVariation = function (nb, seuil) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!seuil) return [3
              /*break*/
              , 2];
              return [4
              /*yield*/
              , this.test(seuil)];

            case 1:
              _a.sent();

              this.fillVarInput();
              _a.label = 2;

            case 2:
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** add new lower limit */


    _this.addVariation = function (nb, seuil) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var i, newSeuil;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              i = 0;
              _a.label = 1;

            case 1:
              if (!(i < nb)) return [3
              /*break*/
              , 4];
              newSeuil = seuil ? seuil[i] : new Models_LowerLimitClass__WEBPACK_IMPORTED_MODULE_5__["LowerLimitClass"](i, '', '', '', '', '');

              if (this.props.isLink) {
                newSeuil = seuil ? seuil[i] : new Models_LowerLimitClass__WEBPACK_IMPORTED_MODULE_5__["LowerLimitClass"](i, '', '', '', '', '10');
              }

              return [4
              /*yield*/
              , this.addInput(i, newSeuil)];

            case 2:
              _a.sent();

              _a.label = 3;

            case 3:
              i++;
              return [3
              /*break*/
              , 1];

            case 4:
              this.fillVarInput();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * call function when display n input according to nbVariation
     */


    _this.onClickVariation = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var nb;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncArrayInputClass({
                arrayInputClass: []
              })];

            case 1:
              _a.sent();

              return [4
              /*yield*/
              , this.setStateAsyncIndex({
                index: 0
              })];

            case 2:
              _a.sent();

              return [4
              /*yield*/
              , this.setStateAsyncLowerLimit({
                lowerLimit: []
              })];

            case 3:
              _a.sent();

              nb = parseInt(this.state.nbVariation, 10);
              return [4
              /*yield*/
              , this.addVariation(nb)];

            case 4:
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * generate input seuil min and max with value
     * @returns JSX.Element
     */


    _this.fillVarInput = function () {
      var e_2, _a;

      var _final = [];

      if (_this.state.lowerLimit.length === 0) {
        _this.setState({
          dynamicInput: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null)
        });

        return;
      }

      var i = 0;

      var _loop_1 = function _loop_1(line) {
        if (line.uneClassInput.length <= 0) {
          _this.setState({
            dynamicInput: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null)
          });

          return {
            value: void 0
          };
        }

        var result = line.uneClassInput.map(function (obj) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_7__["default"], {
            key: obj.id,
            label: obj.label,
            name: obj.name,
            placeholder: obj.placeholder || '',
            required: obj.required,
            value: obj.name === 'lowerLimitMin' ? line.id === 0 ? '-∞' : _this.state.lowerLimit[i].lowerLimitMin : line.id === _this.state.index - 1 ? '+∞' : _this.state.lowerLimit[i].lowerLimitMax,
            _handleChange: function _handleChange(event) {
              return _this.handleValueChange(event.currentTarget.value, obj.name, line.id);
            },
            disabled: obj.name === 'lowerLimitMin' || line.id === _this.state.index - 1
          });
        });
        i++;

        var couleur = _this.addButtonColor(line.id);

        var newKey = line.id.toString() + 'brGestColor';
        _final = _final.concat(result.concat(couleur.concat(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", {
          key: newKey
        }))));
      };

      try {
        for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(_this.state.arrayInputClass), _c = _b.next(); !_c.done; _c = _b.next()) {
          var line = _c.value;

          var state_1 = _loop_1(line);

          if (_typeof(state_1) === "object") return state_1.value;
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b["return"])) _a.call(_b);
        } finally {
          if (e_2) throw e_2.error;
        }
      }

      _this.setState({
        dynamicInput: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("ul", null, _final)
      });
    };
    /**
     * debug
     */


    _this.infoSeuil = function () {};
    /**
     * component mount
     */


    _this.componentDidMount = function () {
      if (_this.props.lowerLimit.length > 0) {
        var nb = parseInt(_this.state.nbVariation, 10);

        _this.addMultipleVariation(nb, _this.props.lowerLimit);
      }
    };

    _this.componentDidUpdate = function (prevProps) {
      if (prevProps.traceBorder !== _this.props.traceBorder || prevProps.traceBack !== _this.props.traceBack) {
        _this.fillVarInput();
      }
    };

    _this.state = {
      arrayInputClass: [],
      lowerLimit: [],
      index: 0,
      nbVariation: '3',
      dynamicInput: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null)
    };
    return _this;
  }
  /**
   * render
   */


  VariableColor.prototype.render = function () {
    var l10n = __webpack_require__(/*! Localization/en.json */ "./Localization/en.json");

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_7__["default"], {
      label: l10n.colorVariable.variationNumber,
      name: "nbVariation",
      placeholder: l10n.colorVariable.number,
      required: true,
      value: this.state.nbVariation,
      _handleChange: this.onChangeVariation
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      onClick: this.onClickVariation
    }, l10n.colorVariable.addColor), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), this.state.dynamicInput);
  };

  return VariableColor;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (VariableColor);

/***/ }),

/***/ "./components/Parametrage/fixColor.tsx":
/*!*********************************************!*\
  !*** ./components/Parametrage/fixColor.tsx ***!
  \*********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var Models_LowerLimitClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Models/LowerLimitClass */ "./Models/LowerLimitClass.tsx");
/* harmony import */ var Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Functions/Input/inputSeriesColorPicker */ "./Functions/Input/inputSeriesColorPicker.tsx");





/**
 * edit color in fix mode
 */

var FixColor = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(FixColor, _super);

  function FixColor(props) {
    var _this = _super.call(this, props) || this;
    /**
     * edit background color with Promise
     */


    _this.setStateAsyncSeuil = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /**
     * save data
     */


    _this.callBack = function () {
      _this.props.lowerLimitCallBack(_this.state.lowerLimit);
    };
    /**
     * change background color
     */


    _this.onChangeColorFond = function (key, color) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newSeuil;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newSeuil = this.state.lowerLimit;
              newSeuil[0].backColor = color;
              return [4
              /*yield*/
              , this.setStateAsyncSeuil({
                lowerLimit: newSeuil
              })];

            case 1:
              _a.sent();

              this.callBack();
              this.initComponent();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * change contour color
     */


    _this.onChangeColorContour = function (key, color) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newSeuil;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newSeuil = this.state.lowerLimit;
              newSeuil[0].borderColor = color;
              return [4
              /*yield*/
              , this.setStateAsyncSeuil({
                lowerLimit: newSeuil
              })];

            case 1:
              _a.sent();

              this.callBack();
              this.initComponent();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * change size color
     */


    _this.onChangeSzContour = function (value) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newSeuil;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newSeuil = this.state.lowerLimit;
              newSeuil[0].sizeBorder = value;
              return [4
              /*yield*/
              , this.setStateAsyncSeuil({
                lowerLimit: newSeuil
              })];

            case 1:
              _a.sent();

              this.callBack();
              this.initComponent();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * add button color
     */


    _this.addButtonColor = function () {
      var key = '0';
      var couleur = [];

      var l10n = __webpack_require__(/*! Localization/en.json */ "./Localization/en.json");

      var textInputColor = l10n.colorVariable.switchOutlineColor;
      var labelSize = l10n.colorVariable.thicknessOutline;
      var placeHolderSize = l10n.colorVariable.thicknessOutline;

      if (_this.props.traceBack) {
        var keyFondColorPicker = key + 'FondcolorPicker';
        couleur.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_4__["default"], {
          key: keyFondColorPicker,
          color: _this.state.lowerLimit[0].backColor,
          keyInt: 0,
          text: l10n.colorVariable.switchBackgroundColor,
          _onChange: _this.onChangeColorFond
        }));
      }

      if (_this.props.traceBorder) {
        var keyContourDiv = key + 'ContourDiv';
        couleur.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          key: keyContourDiv
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_4__["default"], {
          color: _this.state.lowerLimit[0].borderColor,
          keyInt: 0,
          text: textInputColor,
          _onChange: _this.onChangeColorContour
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          labelWidth: 15,
          label: labelSize,
          name: "epaisseurContour",
          placeholder: placeHolderSize,
          value: _this.state.lowerLimit[0].sizeBorder,
          onChange: function onChange(event) {
            return _this.onChangeSzContour(event.currentTarget.value);
          }
        })));
      }

      return couleur;
    };
    /** create form */


    _this.initComponent = function () {
      _this.setState({
        htmlResult: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, _this.addButtonColor())
      });
    };
    /** init component when component is mount */


    _this.componentDidMount = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(this.state.lowerLimit.length === 0)) return [3
              /*break*/
              , 2];
              return [4
              /*yield*/
              , this.setStateAsyncSeuil({
                lowerLimit: [new Models_LowerLimitClass__WEBPACK_IMPORTED_MODULE_3__["LowerLimitClass"](0, '', '', '', '', '2')]
              })];

            case 1:
              _a.sent();

              _a.label = 2;

            case 2:
              this.initComponent();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** init component when  update props */


    _this.componentDidUpdate = function (prevProps) {
      if (prevProps.traceBorder !== _this.props.traceBorder || prevProps.traceBack !== _this.props.traceBack) {
        _this.initComponent();
      }
    };

    _this.state = {
      lowerLimit: _this.props.lowerLimit,
      htmlResult: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null)
    };
    return _this;
  }
  /**
   * result
   */


  FixColor.prototype.render = function () {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.state.htmlResult);
  };

  return FixColor;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (FixColor);

/***/ }),

/***/ "./components/Parametrage/manageLink.tsx":
/*!***********************************************!*\
  !*** ./components/Parametrage/manageLink.tsx ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! Functions/Input/inputText */ "./Functions/Input/inputText.tsx");
/* harmony import */ var Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Models/LinkURLClass */ "./Models/LinkURLClass.tsx");




/**
 * def
 */

var ManageLink = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ManageLink, _super);

  function ManageLink(props) {
    var _this = _super.call(this, props) || this;
    /**
     * edit followLink with Promise
     */


    _this.setStateAsyncFollowLink = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /**
     * edit link for tooltip with Promise
     */


    _this.setStateAsyncHoveringTooltipLink = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /**
     * edit text for tooltip with Promise
     */


    _this.setStateAsyncHoveringTooltipText = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /**
     * save data
     */


    _this.callBack = function () {
      _this.props.callBackToParent(new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_3__["LinkURLClass"](_this.state.followLink, _this.state.hoveringTooltipLink, _this.state.hoveringTooltipText), undefined);
    };
    /**
     * call function when follow link change
     */


    _this.onChangeFollowLink = function (value) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncFollowLink({
                followLink: value
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * call function when follow link change
     */


    _this.onChangeHoveringTooltipLink = function (value) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncHoveringTooltipLink({
                hoveringTooltipLink: value
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * call function when follow link change
     */


    _this.onChangeHoveringTooltipText = function (value) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncHoveringTooltipText({
                hoveringTooltipText: value
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.state = {
      followLink: _this.props.coordinateSpace.linkURL.followLink,
      hoveringTooltipLink: _this.props.coordinateSpace.linkURL.hoveringTooltipLink,
      hoveringTooltipText: _this.props.coordinateSpace.linkURL.hoveringTooltipText
    };
    return _this;
  }

  ManageLink.prototype.componentDidUpdate = function (prevProps) {
    if (prevProps.coordinateSpace.id !== this.props.coordinateSpace.id) {
      this.setState({
        followLink: prevProps.coordinateSpace.linkURL.followLink,
        hoveringTooltipLink: prevProps.coordinateSpace.linkURL.hoveringTooltipLink,
        hoveringTooltipText: prevProps.coordinateSpace.linkURL.hoveringTooltipText
      });
    }
  };
  /**
   * result
   */


  ManageLink.prototype.render = function () {
    var _this = this;

    var l10n = __webpack_require__(/*! Localization/en.json */ "./Localization/en.json");

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_2__["default"], {
      id: "followLink",
      label: l10n.metricPrincipalSetting.followLink,
      name: "followLink",
      placeholder: l10n.metricPrincipalSetting.link,
      required: false,
      value: this.state.followLink,
      _handleChange: function _handleChange(event) {
        return _this.onChangeFollowLink(event.currentTarget.value);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_2__["default"], {
      label: l10n.metricPrincipalSetting.linkTooltip,
      name: "linkTooltip",
      placeholder: l10n.metricPrincipalSetting.link,
      required: false,
      value: this.state.hoveringTooltipLink,
      _handleChange: function _handleChange(event) {
        return _this.onChangeHoveringTooltipLink(event.currentTarget.value);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_2__["default"], {
      label: l10n.metricPrincipalSetting.textInTooltip,
      name: "textTooltip",
      placeholder: l10n.metricPrincipalSetting.text,
      required: false,
      value: this.state.hoveringTooltipText,
      _handleChange: function _handleChange(event) {
        return _this.onChangeHoveringTooltipText(event.currentTarget.value);
      }
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null));
  };

  return ManageLink;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (ManageLink);

/***/ }),

/***/ "./components/Parametrage/manageLowerLimit.tsx":
/*!*****************************************************!*\
  !*** ./components/Parametrage/manageLowerLimit.tsx ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var Models_LowerLimitClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Models/LowerLimitClass */ "./Models/LowerLimitClass.tsx");
/* harmony import */ var components_Parametrage_fixColor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! components/Parametrage/fixColor */ "./components/Parametrage/fixColor.tsx");
/* harmony import */ var components_Parametrage_VariableColor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! components/Parametrage/VariableColor */ "./components/Parametrage/VariableColor.tsx");






/**
 * def class
 */

var ManageLowerLimit = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ManageLowerLimit, _super);

  function ManageLowerLimit(props) {
    var _this = _super.call(this, props) || this;
    /** update state with promise */


    _this.setStateAsyncCoordinate = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /** update state with promise */


    _this.setStateAsyncOpenLowerLimit = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /**
     * save data in type
     */


    _this.onSave = function () {
      _this.props.callBack(_this.props.coordinate);

      _this.props.lowerLimitCallBack(_this.state.coordinate.lowerLimit);
    };
    /**
     * Edit fondIsChecked with switch
     */


    _this.onSwitchFond = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newValue;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newValue = this.state.coordinate;
              newValue.traceBack = !newValue.traceBack;
              return [4
              /*yield*/
              , this.setStateAsyncCoordinate({
                coordinate: newValue
              })];

            case 1:
              _a.sent();

              this.onSave();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * Edit contourIsChecked with switch
     */


    _this.onSwitchContour = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newValue;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newValue = this.state.coordinate;
              newValue.traceBorder = !newValue.traceBorder;
              return [4
              /*yield*/
              , this.setStateAsyncCoordinate({
                coordinate: newValue
              })];

            case 1:
              _a.sent();

              this.onSave();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * switch colorMode -> fixe / variable
     */


    _this.onSwitchColorMode = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newValue, lowerLimitFix;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newValue = this.state.coordinate;
              newValue.colorMode = !newValue.colorMode;
              if (!!this.state.coordinate.colorMode) return [3
              /*break*/
              , 2];

              if (this.state.coordinate.lowerLimit && this.state.coordinate.lowerLimit.length > 0) {
                this.setState({
                  lowerLimitVariable: this.state.coordinate.lowerLimit
                });
              }

              lowerLimitFix = this.state.lowerLimitFix; //lowerLimitFix.sizeBorder = defaultSizeBorder;

              newValue.lowerLimit[0] = lowerLimitFix;
              return [4
              /*yield*/
              , this.setStateAsyncCoordinate({
                coordinate: newValue
              })];

            case 1:
              _a.sent();

              return [3
              /*break*/
              , 4];

            case 2:
              if (this.state.coordinate && this.state.coordinate.lowerLimit && this.state.coordinate.lowerLimit.length > 0) {
                this.setState({
                  lowerLimitFix: this.state.coordinate.lowerLimit[0]
                });
              }

              newValue.lowerLimit = this.state.lowerLimitVariable;
              return [4
              /*yield*/
              , this.setStateAsyncCoordinate({
                coordinate: newValue
              })];

            case 3:
              _a.sent();

              _a.label = 4;

            case 4:
              this.onSave();
              return [2
              /*return*/
              ];
          }
        });
      });
    }; // updateLowerLimitDefault = (value: LowerLimitClass) => {
    //   this.setState({
    //     lowerLimitFix: value,
    //   })
    // }

    /** open or close toggle lower limit */


    _this.onToggleLowerLimit = function (isOpen) {
      _this.setState({
        openLowerLimit: isOpen
      });
    };
    /** update component when coordinate props change */


    _this.componentDidUpdate = function (prevProps) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(prevProps.coordinate !== this.state.coordinate)) return [3
              /*break*/
              , 3];
              return [4
              /*yield*/
              , this.setStateAsyncCoordinate({
                coordinate: prevProps.coordinate
              })];

            case 1:
              _a.sent();

              return [4
              /*yield*/
              , this.setStateAsyncOpenLowerLimit({
                openLowerLimit: false
              })];

            case 2:
              _a.sent();

              _a.label = 3;

            case 3:
              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.state = {
      coordinate: _this.props.coordinate,
      openLowerLimit: false,
      lowerLimitFix: new Models_LowerLimitClass__WEBPACK_IMPORTED_MODULE_3__["LowerLimitClass"](0, '', '', '', '', ''),
      lowerLimitVariable: []
    };
    return _this;
  }
  /**
   * result
   */


  ManageLowerLimit.prototype.render = function () {
    var l10n = __webpack_require__(/*! Localization/en.json */ "./Localization/en.json");

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      label: 'Lower limit',
      isOpen: this.state.openLowerLimit,
      onToggle: this.onToggleLowerLimit
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, l10n.genericParameter.variableColor), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: '',
      checked: this.state.coordinate.colorMode,
      onChange: this.onSwitchColorMode
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, l10n.genericParameter.traceBackground), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: '',
      checked: this.state.coordinate.traceBack,
      onChange: this.onSwitchFond
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, l10n.genericParameter.traceContour), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: '',
      checked: this.state.coordinate.traceBorder,
      onChange: this.onSwitchContour
    }))), this.state.coordinate.colorMode ? react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_Parametrage_VariableColor__WEBPACK_IMPORTED_MODULE_5__["default"], {
      traceBorder: this.state.coordinate.traceBorder,
      traceBack: this.state.coordinate.traceBack,
      lowerLimit: this.state.coordinate.lowerLimit,
      lowerLimitCallBack: this.props.lowerLimitCallBack,
      isLink: this.props.isLink
    }) : react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_Parametrage_fixColor__WEBPACK_IMPORTED_MODULE_4__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data,
      traceBorder: this.state.coordinate.traceBorder,
      traceBack: this.state.coordinate.traceBack,
      lowerLimit: this.state.coordinate.lowerLimit,
      //lowerLimitDefault={this.updateLowerLimitDefault}
      lowerLimitCallBack: this.props.lowerLimitCallBack,
      isLink: this.props.isLink
    })));
  };

  return ManageLowerLimit;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (ManageLowerLimit);

/***/ }),

/***/ "./components/Parametrage/parametresGeneriques.tsx":
/*!*********************************************************!*\
  !*** ./components/Parametrage/parametresGeneriques.tsx ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _manageLink__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./manageLink */ "./components/Parametrage/manageLink.tsx");
/* harmony import */ var _textObjects__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./textObjects */ "./components/Parametrage/textObjects.tsx");





/**
 * class ParametresGeneriques
 */

var ParametresGeneriques = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ParametresGeneriques, _super);

  function ParametresGeneriques(props) {
    var _this = _super.call(this, props) || this;
    /** switch value collapseLink when click collapse */


    _this.onToggleLinkCollapse = function (isOpen) {
      _this.setState({
        collapseLink: isOpen
      });
    };
    /** switch value collapseTextObject when click collapse */


    _this.onToggleTextObject = function (isOpen) {
      _this.setState({
        collapseTextObject: isOpen
      });
    };
    /** close collapse when coordinateSpace object change */


    _this.componentDidUpdate = function (prevProps) {
      if (prevProps.coordinateSpace !== _this.props.coordinateSpace) {
        _this.setState({
          collapseLink: false,
          collapseTextObject: false
        });
      }
    };

    _this.state = {
      collapseLink: false,
      collapseTextObject: false
    };
    return _this;
  }
  /** HTML */


  ParametresGeneriques.prototype.render = function () {
    // const l10n = require('Localization/en.json');
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseLink,
      label: "Manage link",
      onToggle: this.onToggleLinkCollapse
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_manageLink__WEBPACK_IMPORTED_MODULE_3__["default"], {
      coordinateSpace: this.props.coordinateSpace,
      callBackToParent: this.props.callBackToParent
    }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseTextObject,
      label: "Text object",
      onToggle: this.onToggleTextObject
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_textObjects__WEBPACK_IMPORTED_MODULE_4__["default"], {
      coordinateSpace: this.props.coordinateSpace,
      callBackToParent: this.props.callBackToParent
    }))));
  };

  return ParametresGeneriques;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (ParametresGeneriques);

/***/ }),

/***/ "./components/Parametrage/positionParameters.tsx":
/*!*******************************************************!*\
  !*** ./components/Parametrage/positionParameters.tsx ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);



/**
 * def
 */

var PositionParameter = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(PositionParameter, _super);

  function PositionParameter(props) {
    var _this = _super.call(this, props) || this;

    _this.savePositionParameter = function (newPositionParameter) {
      var e_1, _a, e_2, _b, e_3, _c;

      var idCurrentCoordinateSpace = _this.props.id || 0;

      if (_this.props.isPoint) {
        var newArrayPoints = _this.props.options.arrayPoints;

        try {
          for (var newArrayPoints_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(newArrayPoints), newArrayPoints_1_1 = newArrayPoints_1.next(); !newArrayPoints_1_1.done; newArrayPoints_1_1 = newArrayPoints_1.next()) {
            var point = newArrayPoints_1_1.value;

            if (point.id === idCurrentCoordinateSpace) {
              point.positionParameter = newPositionParameter;
            }
          }
        } catch (e_1_1) {
          e_1 = {
            error: e_1_1
          };
        } finally {
          try {
            if (newArrayPoints_1_1 && !newArrayPoints_1_1.done && (_a = newArrayPoints_1["return"])) _a.call(newArrayPoints_1);
          } finally {
            if (e_1) throw e_1.error;
          }
        }

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayPoints: newArrayPoints
        }));
      } else if (_this.props.isLink) {
        var newArrayOrientedLink = _this.props.options.arrayOrientedLinks;

        try {
          for (var newArrayOrientedLink_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(newArrayOrientedLink), newArrayOrientedLink_1_1 = newArrayOrientedLink_1.next(); !newArrayOrientedLink_1_1.done; newArrayOrientedLink_1_1 = newArrayOrientedLink_1.next()) {
            var orientedLink = newArrayOrientedLink_1_1.value;

            if (orientedLink.id === idCurrentCoordinateSpace) {
              orientedLink.positionParameter = newPositionParameter;
            }
          }
        } catch (e_2_1) {
          e_2 = {
            error: e_2_1
          };
        } finally {
          try {
            if (newArrayOrientedLink_1_1 && !newArrayOrientedLink_1_1.done && (_b = newArrayOrientedLink_1["return"])) _b.call(newArrayOrientedLink_1);
          } finally {
            if (e_2) throw e_2.error;
          }
        }

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          arrayOrientedLinks: newArrayOrientedLink
        }));
      } else if (_this.props.isRegion) {
        var newArrayRegion = _this.props.options.regionCoordinateSpace;

        try {
          for (var newArrayRegion_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(newArrayRegion), newArrayRegion_1_1 = newArrayRegion_1.next(); !newArrayRegion_1_1.done; newArrayRegion_1_1 = newArrayRegion_1.next()) {
            var region = newArrayRegion_1_1.value;

            if (region.id === idCurrentCoordinateSpace) {
              region.positionParameter = newPositionParameter;
            }
          }
        } catch (e_3_1) {
          e_3 = {
            error: e_3_1
          };
        } finally {
          try {
            if (newArrayRegion_1_1 && !newArrayRegion_1_1.done && (_c = newArrayRegion_1["return"])) _c.call(newArrayRegion_1);
          } finally {
            if (e_3) throw e_3.error;
          }
        }

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          regionCoordinateSpace: newArrayRegion
        }));
      }
    };

    _this.getPositionParameter = function () {
      var e_4, _a, e_5, _b, e_6, _c;

      var positionParameter = {
        labelAPositionX: '0',
        labelAPositionY: '0',
        labelBPositionX: '0',
        labelBPositionY: '0',
        tooltipPositionA: {},
        tooltipPositionB: {}
      };
      var idCurrentCoordinateSpace = _this.props.id || 0;

      if (_this.props.isLink) {
        var newArrayOrientedLink = _this.props.options.arrayOrientedLinks;

        try {
          for (var newArrayOrientedLink_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(newArrayOrientedLink), newArrayOrientedLink_2_1 = newArrayOrientedLink_2.next(); !newArrayOrientedLink_2_1.done; newArrayOrientedLink_2_1 = newArrayOrientedLink_2.next()) {
            var orientedLink = newArrayOrientedLink_2_1.value;

            if (orientedLink.id === idCurrentCoordinateSpace) {
              positionParameter = orientedLink.positionParameter;
            }
          }
        } catch (e_4_1) {
          e_4 = {
            error: e_4_1
          };
        } finally {
          try {
            if (newArrayOrientedLink_2_1 && !newArrayOrientedLink_2_1.done && (_a = newArrayOrientedLink_2["return"])) _a.call(newArrayOrientedLink_2);
          } finally {
            if (e_4) throw e_4.error;
          }
        }
      } else if (_this.props.isPoint) {
        var arrayPoints = _this.props.options.arrayPoints;

        try {
          for (var arrayPoints_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayPoints), arrayPoints_1_1 = arrayPoints_1.next(); !arrayPoints_1_1.done; arrayPoints_1_1 = arrayPoints_1.next()) {
            var point = arrayPoints_1_1.value;

            if (point.id === idCurrentCoordinateSpace) {
              positionParameter = point.positionParameter;
            }
          }
        } catch (e_5_1) {
          e_5 = {
            error: e_5_1
          };
        } finally {
          try {
            if (arrayPoints_1_1 && !arrayPoints_1_1.done && (_b = arrayPoints_1["return"])) _b.call(arrayPoints_1);
          } finally {
            if (e_5) throw e_5.error;
          }
        }
      } else if (_this.props.isRegion) {
        var arrayRegions = _this.props.options.regionCoordinateSpace;

        try {
          for (var arrayRegions_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayRegions), arrayRegions_1_1 = arrayRegions_1.next(); !arrayRegions_1_1.done; arrayRegions_1_1 = arrayRegions_1.next()) {
            var region = arrayRegions_1_1.value;

            if (region.id === idCurrentCoordinateSpace) {
              positionParameter = region.positionParameter;
            }
          }
        } catch (e_6_1) {
          e_6 = {
            error: e_6_1
          };
        } finally {
          try {
            if (arrayRegions_1_1 && !arrayRegions_1_1.done && (_c = arrayRegions_1["return"])) _c.call(arrayRegions_1);
          } finally {
            if (e_6) throw e_6.error;
          }
        }
      }

      return positionParameter;
    };

    _this.handleChangeLabelAPositionX = function (event) {
      var newPositionParameter = _this.getPositionParameter();

      newPositionParameter.labelAPositionX = event.currentTarget.value;

      _this.savePositionParameter(newPositionParameter); // this.setState({
      //   positionParameter: newPositionParameter,
      // });
      // this.callBack();

    };

    _this.handleChangeLabelAPositionY = function (event) {
      var newPositionParameter = _this.getPositionParameter();

      newPositionParameter.labelAPositionY = event.currentTarget.value;

      _this.savePositionParameter(newPositionParameter); // this.setState({
      //   positionParameter: newPositionParameter,
      // });
      // this.callBack();

    };

    _this.handleChangeLabelBPositionX = function (event) {
      var newPositionParameter = _this.getPositionParameter();

      newPositionParameter.labelBPositionX = event.currentTarget.value;

      _this.savePositionParameter(newPositionParameter); // this.setState({
      //   positionParameter: newPositionParameter,
      // });
      // this.callBack();

    };

    _this.handleChangeLabelBPositionY = function (event) {
      var newPositionParameter = _this.getPositionParameter();

      newPositionParameter.labelBPositionY = event.currentTarget.value;

      _this.savePositionParameter(newPositionParameter); // this.setState({
      //   positionParameter: newPositionParameter,
      // });
      // this.callBack();

    };

    _this.handleChangeTooltipPositionA = function (event) {
      var newPositionParameter = _this.getPositionParameter();

      newPositionParameter.tooltipPositionA = {
        label: event.value,
        value: event.value
      };

      _this.savePositionParameter(newPositionParameter); // this.setState({
      //   positionParameter: newPositionParameter,
      // });
      // this.callBack();

    };

    _this.handleChangeTooltipPositionB = function (event) {
      var newPositionParameter = _this.getPositionParameter();

      newPositionParameter.tooltipPositionB = {
        label: event.value,
        value: event.value
      };

      _this.savePositionParameter(newPositionParameter); // this.setState({
      //   positionParameter: newPositionParameter,
      // });
      // this.callBack();

    };

    _this.handleChangeSelectOrientedLinkToUpgrade = function (event) {
      var newOrientedLinkComparedToToUpgrade = {
        label: event.label,
        value: event.value
      };

      _this.setState({
        orientedLinkComparedToUpgrade: newOrientedLinkComparedToToUpgrade
      });
    };

    _this.handleChangeSelectOrientedLinkToDowngrade = function (event) {
      var newOrientedLinkComaparedToDowngrade = {
        label: event.label,
        value: event.value
      };

      _this.setState({
        orientedLinkComparedToDowngrade: newOrientedLinkComaparedToDowngrade
      });
    };

    _this.downgradeLayerLevel = function () {
      var orientedLinkComparedTo = _this.state.orientedLinkComparedToDowngrade.value;
      var zIndex = orientedLinkComparedTo.zIndex - 1;

      _this.callBackZIndex(zIndex, _this.props.id || 0);
    };

    _this.upgradeLayerLevel = function () {
      var orientedLinkComparedTo = _this.state.orientedLinkComparedToUpgrade.value;
      var zIndex = orientedLinkComparedTo.zIndex + 1;

      _this.callBackZIndex(zIndex, _this.props.id || 0);
    };

    _this.defineListOrientedLink = function () {
      var listOptions = [];
      var arrayOrientedLinks = _this.props.options.arrayOrientedLinks;
      arrayOrientedLinks.forEach(function (orientedLink) {
        var selectableValue = {
          label: orientedLink.label || orientedLink.name,
          value: orientedLink
        };
        listOptions.push(selectableValue);
      });
      return listOptions;
    };

    _this.defineLabelPositionInputs = function () {
      var e_7, _a;

      var item;

      var positionParameter = _this.getPositionParameter();

      var currentOrientedLink;
      var arrayOrientedLinks = _this.props.options.arrayOrientedLinks;

      try {
        for (var arrayOrientedLinks_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayOrientedLinks), arrayOrientedLinks_1_1 = arrayOrientedLinks_1.next(); !arrayOrientedLinks_1_1.done; arrayOrientedLinks_1_1 = arrayOrientedLinks_1.next()) {
          var orientedLink = arrayOrientedLinks_1_1.value;

          if (orientedLink.id === _this.props.id) {
            currentOrientedLink = orientedLink;
          }
        }
      } catch (e_7_1) {
        e_7 = {
          error: e_7_1
        };
      } finally {
        try {
          if (arrayOrientedLinks_1_1 && !arrayOrientedLinks_1_1.done && (_a = arrayOrientedLinks_1["return"])) _a.call(arrayOrientedLinks_1);
        } finally {
          if (e_7) throw e_7.error;
        }
      }

      if (_this.props.isLink && currentOrientedLink && currentOrientedLink.orientationLink.value === 'double') {
        item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Label A Position X",
          labelWidth: 10,
          inputWidth: 20,
          type: "text",
          value: positionParameter.labelAPositionX,
          onChange: _this.handleChangeLabelAPositionX,
          placeholder: 'Label A Position X'
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Label A Position Y",
          labelWidth: 10,
          inputWidth: 20,
          type: "text",
          value: positionParameter.labelAPositionY,
          onChange: _this.handleChangeLabelAPositionY,
          placeholder: 'Label A Position Y'
        }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Label B Position X",
          labelWidth: 10,
          inputWidth: 20,
          type: "text",
          value: positionParameter.labelBPositionX,
          onChange: _this.handleChangeLabelBPositionX,
          placeholder: 'Label B Position X'
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Label B Position Y",
          labelWidth: 10,
          inputWidth: 20,
          type: "text",
          value: positionParameter.labelBPositionY,
          onChange: _this.handleChangeLabelBPositionY,
          placeholder: 'Label B Position Y'
        }))));
      } else {
        item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Position X",
          labelWidth: 10,
          inputWidth: 20,
          type: "text",
          value: positionParameter.labelAPositionX,
          onChange: _this.handleChangeLabelAPositionX,
          placeholder: 'Position X'
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          label: "Position Y",
          labelWidth: 10,
          inputWidth: 20,
          type: "text",
          value: positionParameter.labelAPositionY,
          onChange: _this.handleChangeLabelAPositionY,
          placeholder: 'Position Y'
        }));
      }

      return item;
    };

    _this.defineTooltipPositionInputs = function () {
      var e_8, _a;

      var item;
      var optionsSelectTooltipPosition = [{
        label: 'Top',
        value: 'Top'
      }, {
        label: 'Bottom',
        value: 'Bottom'
      }, {
        label: 'Left',
        value: 'Left'
      }, {
        label: 'Right',
        value: 'Right'
      }];

      var positionParameter = _this.getPositionParameter();

      var currentOrientedLink;
      var arrayOrientedLinks = _this.props.options.arrayOrientedLinks;

      try {
        for (var arrayOrientedLinks_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(arrayOrientedLinks), arrayOrientedLinks_2_1 = arrayOrientedLinks_2.next(); !arrayOrientedLinks_2_1.done; arrayOrientedLinks_2_1 = arrayOrientedLinks_2.next()) {
          var orientedLink = arrayOrientedLinks_2_1.value;

          if (orientedLink.id === _this.props.id) {
            currentOrientedLink = orientedLink;
          }
        }
      } catch (e_8_1) {
        e_8 = {
          error: e_8_1
        };
      } finally {
        try {
          if (arrayOrientedLinks_2_1 && !arrayOrientedLinks_2_1.done && (_a = arrayOrientedLinks_2["return"])) _a.call(arrayOrientedLinks_2);
        } finally {
          if (e_8) throw e_8.error;
        }
      }

      if (_this.props.isLink && currentOrientedLink && currentOrientedLink.orientationLink.value === 'double') {
        item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 10
        }, "Tooltip A Position"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: _this.handleChangeTooltipPositionA,
          allowCustomValue: false,
          options: optionsSelectTooltipPosition,
          value: positionParameter.tooltipPositionA,
          width: 20
        })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 10
        }, "Tooltip B Position"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: _this.handleChangeTooltipPositionB,
          allowCustomValue: false,
          options: optionsSelectTooltipPosition,
          value: positionParameter.tooltipPositionB,
          width: 20
        })));
      } else {
        item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 10
        }, "Tooltip position"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: _this.handleChangeTooltipPositionA,
          allowCustomValue: false,
          options: optionsSelectTooltipPosition,
          value: positionParameter.tooltipPositionA,
          width: 20
        }));
      }

      return item;
    };

    _this.defineLayerLevel = function () {
      var item;

      var options = _this.defineListOrientedLink();

      if (_this.props.isLink) {
        item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
          isOpen: _this.state.collapseLayerLevel,
          label: 'LayerLevel',
          onToggle: function onToggle(isOpen) {
            _this.setState({
              collapseLayerLevel: isOpen
            });
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 15
        }, "Upgrade on "), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: _this.handleChangeSelectOrientedLinkToUpgrade,
          allowCustomValue: false,
          options: options,
          value: _this.state.orientedLinkComparedToUpgrade,
          width: 15
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
          onClick: _this.upgradeLayerLevel
        }, "Submit")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
          width: 15
        }, "Downgrade on"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
          onChange: _this.handleChangeSelectOrientedLinkToDowngrade,
          allowCustomValue: false,
          options: options,
          value: _this.state.orientedLinkComparedToDowngrade,
          width: 15
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
          onClick: _this.downgradeLayerLevel
        }, "Submit")));
      } else {
        item = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null);
      }

      return item;
    };

    _this.state = {
      collapsepositionParameter: false,
      collapseLabel: false,
      collapseTooltip: false,
      collapseLayerLevel: false,
      orientedLinkComparedToDowngrade: {},
      orientedLinkComparedToUpgrade: {}
    };
    return _this;
  } // private callBack() {
  //   this.props.callBackToParent(this.state.positionParameter, this.props.id || 0);
  // }


  PositionParameter.prototype.callBackZIndex = function (zIndex, id) {
    this.props.callBackToParentZIndex(zIndex, id);
  };

  PositionParameter.prototype.render = function () {
    var _this = this;

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapsepositionParameter,
      label: 'Position Parameter',
      onToggle: function onToggle(isOpen) {
        _this.setState({
          collapsepositionParameter: isOpen
        });
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseLabel,
      label: 'Label',
      onToggle: function onToggle(isOpen) {
        _this.setState({
          collapseLabel: isOpen
        });
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.defineLabelPositionInputs())), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseTooltip,
      label: 'Tooltip',
      onToggle: function onToggle(isOpen) {
        _this.setState({
          collapseTooltip: isOpen
        });
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.defineTooltipPositionInputs())), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, this.defineLayerLevel()));
  };

  return PositionParameter;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (PositionParameter);

/***/ }),

/***/ "./components/Parametrage/styleComponent.tsx":
/*!***************************************************!*\
  !*** ./components/Parametrage/styleComponent.tsx ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);



/**
 * def
 */

var StyleComponent = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(StyleComponent, _super);

  function StyleComponent(props) {
    var _this = _super.call(this, props) || this;
    /** save data in Parent */


    _this.callBack = function () {
      _this.props.saveParent(_this.state.style);
    };
    /** change bold */


    _this.onChangeBold = function () {
      var style = _this.state.style;
      style.bold = !style.bold;

      _this.setState({
        style: style
      });

      _this.callBack();
    };
    /** change italic */


    _this.onChangeItalic = function () {
      var style = _this.state.style;
      style.italic = !style.italic;

      _this.setState({
        style: style
      });

      _this.callBack();
    };
    /** change underline */


    _this.onChangeUnderline = function () {
      var style = _this.state.style;
      style.underline = !style.underline;

      _this.setState({
        style: style
      });

      _this.callBack();
    };

    _this.state = {
      style: _this.props.oldStyle
    };
    return _this;
  }
  /**
   * result
   */


  StyleComponent.prototype.render = function () {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("section", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Bold"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: "",
      checked: this.state.style.bold,
      onChange: this.onChangeBold
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Italic"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: "",
      checked: this.state.style.italic,
      onChange: this.onChangeItalic
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Underline"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: "",
      checked: this.state.style.underline,
      onChange: this.onChangeUnderline
    })));
  };

  return StyleComponent;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (StyleComponent);

/***/ }),

/***/ "./components/Parametrage/textObjects.tsx":
/*!************************************************!*\
  !*** ./components/Parametrage/textObjects.tsx ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var components_Parametrage_styleComponent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! components/Parametrage/styleComponent */ "./components/Parametrage/styleComponent.tsx");
/* harmony import */ var Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Functions/Input/inputText */ "./Functions/Input/inputText.tsx");
/* harmony import */ var Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Functions/Input/inputSeriesColorPicker */ "./Functions/Input/inputSeriesColorPicker.tsx");






/**
 * def
 */

var TextObjects = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(TextObjects, _super);

  function TextObjects(props) {
    var _this = _super.call(this, props) || this;
    /** save data in async mode */


    _this.stateAsyncTextObject = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve); //this.callBack();

      });
    };
    /** call back to parent */


    _this.callBack = function () {
      _this.props.callBackToParent(undefined, _this.state.textObject);
    }; // /** change value for legend input */
    // onSwitchLegend = async () => {
    // 	const newTextObject: TextObject = this.state.textObject;
    // 	newTextObject.legend = !newTextObject.legend;
    // 	await this.stateAsyncTextObject({ textObject: newTextObject });
    // 	this.callBack();
    // }

    /** change value for value input */


    _this.onChangeValeur = function (value) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.value = value;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for back color input */


    _this.onChangeBackColor = function (key, color) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.colorBack = color;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for color region */


    _this.onChangeColorText = function (key, color) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.colorText = color;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for style text region */
    // onChangeStyleText = async (event: {
    //   /** target for style text region input */
    //   currentTarget: HTMLInputElement;
    // }) => {
    //   const newTextObject: TextObject = this.state.textObject;
    //   newTextObject.styleText = event.currentTarget.value;
    //   await this.stateAsyncTextObject({ textObject: newTextObject });
    //   this.callBack();
    // };

    /** switch value for generate text object */


    _this.onSwitchGenerateObjectText = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.generateObjectText = !this.state.textObject.generateObjectText;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for legend element */


    _this.onChangeLegendElement = function (event) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.generateAuxiliaryElement.legendElement = event.currentTarget.value;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for unity mesure element */


    _this.onChangeunit = function (event) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.generateAuxiliaryElement.unit = event.currentTarget.value;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change format for numeric text object */


    _this.onChangeFormatageNumeriqueTextObject = function (event) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.generateAuxiliaryElement.numericFormatElement = event.currentTarget.value;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** switch value for display object text */


    _this.onSwitchdisplayObjectInTooltip = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.generateAuxiliaryElement.displayObjectInTooltip = !this.state.textObject.generateAuxiliaryElement.displayObjectInTooltip;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    }; // /** switch value for display object permanently */
    // onSwitchDisplayObjectPermanently = async () => {
    // 	const newTextObject: TextObject = this.state.textObject;
    // 	newTextObject.generateAuxiliaryElement.displayObjectPermanently =
    // 		!this.state.textObject.generateAuxiliaryElement.displayObjectPermanently;
    // 	await this.stateAsyncTextObject({ textObject: newTextObject });
    // 	this.callBack();
    // }

    /** choice to apply color or not for text element */


    _this.onSwitchAddColorTextElement = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.generateAuxiliaryElement.addColorTextElement = !this.state.textObject.generateAuxiliaryElement.addColorTextElement;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** choice to apply color or not for back element */


    _this.onSwitchAddColorBackElement = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.generateAuxiliaryElement.addColorBackElement = !this.state.textObject.generateAuxiliaryElement.addColorBackElement;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** switch display text */


    _this.onSwitchisTextTooltip = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.isTextTooltip = !this.state.textObject.isTextTooltip;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for color text element */


    _this.onChangeColorTextElement = function (key, color) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.generateAuxiliaryElement.colorTextElement = color;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for back element */


    _this.onChangeColorBackElement = function (key, color) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.generateAuxiliaryElement.colorBackElement = color;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for legend element */


    _this.onChangeValueGenerateObjectTextLegendElement = function (event) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.valueGenerateObjectText.legendElement = event.currentTarget.value;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for unity mesure element */


    _this.onChangeValueGenerateObjectTextunit = function (event) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.valueGenerateObjectText.unit = event.currentTarget.value;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change format for numeric text object */


    _this.onChangeValueGenerateObjectTextFormatageNumeriqueTextObject = function (event) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.valueGenerateObjectText.numericFormatElement = event.currentTarget.value;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** switch value for display object text */


    _this.onSwitchValueGenerateObjectTextdisplayObjectInTooltip = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.valueGenerateObjectText.displayObjectInTooltip = !this.state.textObject.valueGenerateObjectText.displayObjectInTooltip;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    }; // /** switch value for display object permanently */
    // onSwitchValueGenerateObjectTextDisplayObjectPermanently = async () => {
    // 	const newTextObject: TextObject = this.state.textObject;
    // 	newTextObject.valueGenerateObjectText.displayObjectPermanently =
    // 		!this.state.textObject.valueGenerateObjectText.displayObjectPermanently;
    // 	await this.stateAsyncTextObject({ textObject: newTextObject });
    // 	this.callBack();
    // }

    /** choice to apply color or not for text element */


    _this.onSwitchValueGenerateObjectTextAddColorTextElement = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.valueGenerateObjectText.addColorTextElement = !this.state.textObject.valueGenerateObjectText.addColorTextElement;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** choice to apply color or not for back element */


    _this.onSwitchValueGenerateObjectTextAddColorBackElement = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.valueGenerateObjectText.addColorBackElement = !this.state.textObject.valueGenerateObjectText.addColorBackElement;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for color text element */


    _this.onChangeValueGenerateObjectTextColorTextElement = function (key, color) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.valueGenerateObjectText.colorTextElement = color;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** change value for back element */


    _this.onChangeValueGenerateObjectTextColorBackElement = function (key, color) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var newTextObject;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              newTextObject = this.state.textObject;
              newTextObject.valueGenerateObjectText.colorBackElement = color;
              return [4
              /*yield*/
              , this.stateAsyncTextObject({
                textObject: newTextObject
              })];

            case 1:
              _a.sent();

              this.callBack();
              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.saveData = function (style) {
      var newText = _this.state.textObject;
      newText.style = style;

      _this.setState({
        textObject: newText
      });

      _this.callBack();
    };

    _this.state = {
      textObject: _this.props.coordinateSpace.textObj
    };
    return _this;
  }
  /**
   * result
   */


  TextObjects.prototype.render = function () {
    var l10n = __webpack_require__(/*! Localization/en.json */ "./Localization/en.json");

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h4", null, l10n.textObject.principalMetric), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Display text in region or tooltip"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: "",
      checked: this.state.textObject.isTextTooltip,
      onChange: this.onSwitchisTextTooltip
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h5", {
      hidden: this.state.textObject.isTextTooltip
    }, l10n.textObject.textRegion), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h5", {
      hidden: !this.state.textObject.isTextTooltip
    }, l10n.textObject.textBubble), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_5__["default"], {
      color: this.state.textObject.colorBack,
      keyInt: 0,
      text: l10n.textObject.colorBackground,
      _onChange: this.onChangeBackColor
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_5__["default"], {
      color: this.state.textObject.colorText,
      keyInt: 0,
      text: l10n.textObject.colorText,
      _onChange: this.onChangeColorText
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(components_Parametrage_styleComponent__WEBPACK_IMPORTED_MODULE_3__["default"], {
      oldStyle: this.state.textObject.style,
      saveParent: this.saveData
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h4", null, "Generate text object"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, l10n.textObject.generateTextObject), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: '',
      checked: this.state.textObject.generateObjectText,
      onChange: this.onSwitchGenerateObjectText
    })), this.state.textObject.generateObjectText && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_4__["default"], {
      label: l10n.textObject.legend,
      name: "legendTextObject",
      placeholder: l10n.textObject.legend,
      required: false,
      value: this.state.textObject.valueGenerateObjectText.legendElement,
      _handleChange: this.onChangeValueGenerateObjectTextLegendElement
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_4__["default"], {
      label: l10n.textObject.digitalFormatting,
      name: "formatageNumeriqueTextObject",
      placeholder: l10n.textObject.digitalFormatting,
      required: false,
      value: this.state.textObject.valueGenerateObjectText.numericFormatElement,
      _handleChange: this.onChangeValueGenerateObjectTextFormatageNumeriqueTextObject
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_4__["default"], {
      label: l10n.textObject.mesureUnit,
      name: "mesureUnityTextObject",
      placeholder: l10n.textObject.unit,
      required: false,
      value: this.state.textObject.valueGenerateObjectText.unit,
      _handleChange: this.onChangeValueGenerateObjectTextunit
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, l10n.textObject.objectDisplayTextTooltip), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: '',
      checked: this.state.textObject.valueGenerateObjectText.displayObjectInTooltip,
      onChange: this.onSwitchValueGenerateObjectTextdisplayObjectInTooltip
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, l10n.textObject.colorText), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: '',
      checked: this.state.textObject.valueGenerateObjectText.addColorTextElement,
      onChange: this.onSwitchValueGenerateObjectTextAddColorTextElement
    })), this.state.textObject.valueGenerateObjectText.addColorTextElement && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_5__["default"], {
      color: this.state.textObject.valueGenerateObjectText.colorTextElement,
      keyInt: 0,
      text: l10n.textObject.colorTextOptional,
      _onChange: this.onChangeValueGenerateObjectTextColorTextElement
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, l10n.textObject.backgroundColor), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: '',
      checked: this.state.textObject.valueGenerateObjectText.addColorBackElement,
      onChange: this.onSwitchValueGenerateObjectTextAddColorBackElement
    })), this.state.textObject.valueGenerateObjectText.addColorBackElement && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_5__["default"], {
      color: this.state.textObject.valueGenerateObjectText.colorBackElement,
      keyInt: 0,
      text: l10n.textObject.optionalBackgroundColor,
      _onChange: this.onChangeValueGenerateObjectTextColorBackElement
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null)), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h4", null, l10n.textObject.auxiliaryElement), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_4__["default"], {
      label: l10n.textObject.legend,
      name: "legendTextObject",
      placeholder: l10n.textObject.legend,
      required: false,
      value: this.state.textObject.generateAuxiliaryElement.legendElement,
      _handleChange: this.onChangeLegendElement
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_4__["default"], {
      label: l10n.textObject.digitalFormatting,
      name: "formatageNumeriqueTextObject",
      placeholder: l10n.textObject.digitalFormatting,
      required: false,
      value: this.state.textObject.generateAuxiliaryElement.numericFormatElement,
      _handleChange: this.onChangeFormatageNumeriqueTextObject
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputText__WEBPACK_IMPORTED_MODULE_4__["default"], {
      label: l10n.textObject.mesureUnit,
      name: "mesureUnityTextObject",
      placeholder: l10n.textObject.unit,
      required: false,
      value: this.state.textObject.generateAuxiliaryElement.unit,
      _handleChange: this.onChangeunit
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, l10n.textObject.objectDisplayTextTooltip), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: '',
      checked: this.state.textObject.generateAuxiliaryElement.displayObjectInTooltip,
      onChange: this.onSwitchdisplayObjectInTooltip
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, l10n.textObject.colorText), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: '',
      checked: this.state.textObject.generateAuxiliaryElement.addColorTextElement,
      onChange: this.onSwitchAddColorTextElement
    })), this.state.textObject.generateAuxiliaryElement.addColorTextElement && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_5__["default"], {
      color: this.state.textObject.generateAuxiliaryElement.colorTextElement,
      keyInt: 0,
      text: l10n.textObject.colorTextOptional,
      _onChange: this.onChangeColorTextElement
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, l10n.textObject.backgroundColor), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: '',
      checked: this.state.textObject.generateAuxiliaryElement.addColorBackElement,
      onChange: this.onSwitchAddColorBackElement
    })), this.state.textObject.generateAuxiliaryElement.addColorBackElement && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSeriesColorPicker__WEBPACK_IMPORTED_MODULE_5__["default"], {
      color: this.state.textObject.generateAuxiliaryElement.colorBackElement,
      keyInt: 0,
      text: l10n.textObject.optionalBackgroundColor,
      _onChange: this.onChangeColorBackElement
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("br", null)));
  };

  return TextObjects;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (TextObjects);

/***/ }),

/***/ "./components/coordinateSpaceInitial.tsx":
/*!***********************************************!*\
  !*** ./components/coordinateSpaceInitial.tsx ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var Functions_EditParameter_editGoodParameter__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Functions/EditParameter/editGoodParameter */ "./Functions/EditParameter/editGoodParameter.tsx");




/**
 * initialize space for space coordinate
 */

var CoordinateSpaceInitialClass = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(CoordinateSpaceInitialClass, _super);

  function CoordinateSpaceInitialClass(props) {
    var _this = _super.call(this, props) || this;
    /**
     * Call parent to send arrayCoor data
     */


    _this.callBack = function () {
      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        coordinateSpaceInitial: _this.state.arrayCoor
      }));
    };
    /** change value for switch */


    _this.onChangeSwitchDisplayInitialSpace = function () {
      var newInitialSpace = _this.state.arrayCoor;
      newInitialSpace.displayArea = !newInitialSpace.displayArea;

      _this.setState({
        arrayCoor: newInitialSpace
      });

      _this.callBack();
    };

    _this.state = {
      arrayCoor: _this.props.options.coordinateSpaceInitial
    };
    return _this;
  }
  /**
   * Use function if value input change
   * @param {string} currentTarget new value of input
   * @param {string} name name of input
   */


  CoordinateSpaceInitialClass.prototype._handleChange = function (currentTarget, name) {
    var _this = this;

    this.props.options.updateOnlyInitialSpace = true;
    this.setState(function (prevState) {
      return {
        arrayCoor: Object(Functions_EditParameter_editGoodParameter__WEBPACK_IMPORTED_MODULE_3__["editGoodParameter"])(name, prevState.arrayCoor, currentTarget, parseInt(_this.props.options.baseMap.width, 10), parseInt(_this.props.options.baseMap.height, 10))
      };
    });
    this.callBack();
  };
  /**
   * Get value of input with state.arrayCoor
   * @param {number} id id of element
   * @param {string} param name of input
   * @returns {string} value of the array element
   */


  CoordinateSpaceInitialClass.prototype.getGoodValue = function (id, param) {
    var value;
    value = '';

    if (param.startsWith('positionXMin')) {
      value = this.state.arrayCoor.coordinate.xMin;
    } else if (param.startsWith('positionXMax')) {
      value = this.state.arrayCoor.coordinate.xMax;
    } else if (param.startsWith('positionYMin')) {
      value = this.state.arrayCoor.coordinate.yMin;
    } else if (param.startsWith('positionYMax')) {
      value = this.state.arrayCoor.coordinate.yMax;
    }

    return value;
  }; // onChangeSwitchDefaultInitialSpace = () => {
  //   const newInitialSpace: CoordinateSpaceInitial = this.state.arrayCoor;
  //   newInitialSpace.defaultReferentiel = !newInitialSpace.defaultReferentiel;
  //   this.setState({
  //     arrayCoor: newInitialSpace,
  //   });
  //   if (newInitialSpace.defaultReferentiel) {
  //     this.props.options.coordinateSpaceInitial.coordinate = {
  //       xMin: '0',
  //       xMax: '100',
  //       yMin: '0',
  //       yMax: '100',
  //     };
  //   } else {
  //     this.props.options.coordinateSpaceInitial.coordinate = {
  //       xMin: '-100',
  //       xMax: '100',
  //       yMin: '-100',
  //       yMax: '100',
  //     };
  //   }
  //   this.callBack();
  // };
  // displayValueReferentiel = (): string => {
  //   let result = '';
  //   if (this.props.options.coordinateSpaceInitial.defaultReferentiel) {
  //     result = '(0 : 100)';
  //   } else {
  //     result = '(-100 : 100)';
  //   }
  //   return result;
  // };

  /**
   * HTML render
   */


  CoordinateSpaceInitialClass.prototype.render = function () {
    var _this = this;

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "coordinateSpaceInitial"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Display space initial"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      label: "",
      checked: this.state.arrayCoor.displayArea,
      onChange: this.onChangeSwitchDisplayInitialSpace
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "X min",
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      required: true,
      name: "xMin",
      value: this.state.arrayCoor.coordinate.xMin,
      onChange: function onChange(event) {
        return _this._handleChange(event.currentTarget.value, 'positionXMin');
      },
      placeholder: 'X minimum'
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "X max",
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      required: true,
      name: "xMax",
      value: this.state.arrayCoor.coordinate.xMax,
      onChange: function onChange(event) {
        return _this._handleChange(event.currentTarget.value, 'positionXMax');
      },
      placeholder: 'X max'
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Y min",
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      required: true,
      name: "yMin",
      value: this.state.arrayCoor.coordinate.yMin,
      onChange: function onChange(event) {
        return _this._handleChange(event.currentTarget.value, 'positionYMin');
      },
      placeholder: 'Y minimum'
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Y max",
      labelWidth: 15,
      inputWidth: 20,
      type: "text",
      required: true,
      name: "yMax",
      value: this.state.arrayCoor.coordinate.yMax,
      onChange: function onChange(event) {
        return _this._handleChange(event.currentTarget.value, 'positionYMax');
      },
      placeholder: 'Y max'
    }));
  };

  return CoordinateSpaceInitialClass;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (CoordinateSpaceInitialClass);

/***/ }),

/***/ "./components/display.tsx":
/*!********************************!*\
  !*** ./components/display.tsx ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var Functions_Input_inputSelect__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Functions/Input/inputSelect */ "./Functions/Input/inputSelect.tsx");
/* harmony import */ var _Parametrage_styleComponent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./Parametrage/styleComponent */ "./components/Parametrage/styleComponent.tsx");





/**
 * class to manage police, size and style
 */

var Display = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Display, _super);

  function Display(props) {
    var _this = _super.call(this, props) || this;
    /**
     * call parent with new data
     */


    _this.callParent = function () {
      var _a = _this.state,
          newPolice = _a.newPolice,
          size = _a.size,
          style = _a.style;
      var pPolice = newPolice.value || '';
      var pSize = size;
      var pStyle = style;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        display: {
          police: pPolice,
          size: pSize,
          style: pStyle
        }
      }));
    };
    /**
     * set police state async
     */


    _this.setStateAsyncPolice = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);

        _this.callParent();
      });
    };
    /**
     * set size state async
     */


    _this.setStateAsyncsize = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);

        _this.callParent();
      });
    };
    /**
     * set style state async
     */


    _this.setStateAsyncStyle = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);

        _this.callParent();
      });
    };
    /**
     * edit size
     */


    _this.handleChangesize = function (event) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncsize({
                size: event.target.value
              })];

            case 1:
              _a.sent();

              this.callParent();
              return [2
              /*return*/
              ];
          }
        });
      });
    }; // /**
    //  * edit style
    //  */
    // handleChangeStyle = async (event: {
    //   /** target to input element */
    //   target: HTMLInputElement;
    // }) => {
    //   await this.setStateAsyncStyle({
    //     style: event.target.value,
    //   });
    //   this.callParent();
    // };

    /**
     * edit police
     */


    _this.onChangePolice = function (value) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              return [4
              /*yield*/
              , this.setStateAsyncPolice({
                newPolice: value
              })];

            case 1:
              _a.sent();

              this.callParent();
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /**
     * Change background picture
     */


    _this.onImageChanged = function (e) {
      var newBaseMap = _this.props.options.baseMap;
      var image = e.target.value; //const arrayImage = image.split('.');

      newBaseMap.image = image; // if (image.split(',')[0] === 'base64') {
      //   // on ne fait rien car la base 64 peut être un jpeg ou un svg
      //   // l'utilisateur doit bien le spécifier avant sur le switch Use SVG
      // } else if (image.split('.')[arrayImage.length - 1] === 'svg') {
      //   // si la valeur renseignée est une url et que l'extension du fichier est svg
      //   // on passe automatiquement le swith Use SVG à true
      //   newBaseMap.modeSVG = true;
      // } else {
      //   // si la valeur renseignée est une url et que l'extension du fichier n'est pas un svg
      //   // on passe automatiquement le swith Use SVG à false
      //   newBaseMap.modeSVG = false;
      // }

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        baseMap: newBaseMap
      })); // this.props.onOptionsChange({ ...this.props.options, imageUrl: event.target.value });

    };
    /** edit modeSVG */


    _this.onChangeSwitchModeSVG = function () {
      var _a = _this.props,
          options = _a.options,
          onOptionsChange = _a.onOptionsChange;
      var oldValue = options.baseMap;
      oldValue.modeSVG = !oldValue.modeSVG;
      onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), {
        baseMap: oldValue
      }));
    };
    /** edit modeSVG */


    _this.onChangeHeightBaseMap = function (e) {
      _this.props.options.updateOnlyInitialSpace = false;
      var _a = _this.props,
          options = _a.options,
          onOptionsChange = _a.onOptionsChange;
      var oldValue = options.baseMap;
      oldValue.height = e.target.value;
      onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), {
        baseMap: oldValue
      }));
    };
    /** edit modeSVG */


    _this.onChangeWidthBaseMap = function (e) {
      _this.props.options.updateOnlyInitialSpace = false;
      var _a = _this.props,
          options = _a.options,
          onOptionsChange = _a.onOptionsChange;
      var oldValue = options.baseMap;
      oldValue.width = e.target.value;
      onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, options), {
        baseMap: oldValue
      }));
    };

    _this.saveStyleData = function (style) {
      _this.setStateAsyncStyle({
        style: style
      });
    };

    _this.uploadImage = function (event) {
      var readerFile = new FileReader();
      var selectedFile = event.target.files[0];
      var extensionFile = selectedFile.name.split('.')[1];
      var file;

      if (extensionFile === 'jpg' || extensionFile === 'png' || extensionFile === 'gif') {
        readerFile.readAsDataURL(selectedFile);
      } else {
        readerFile.readAsText(selectedFile);
      }

      readerFile.onload = function () {
        file = readerFile.result;
      };

      setTimeout(function () {
        var newBaseMap = _this.props.options.baseMap;

        if (extensionFile === 'svg') {
          newBaseMap.image = file;
          newBaseMap.modeSVG = true;
          newBaseMap.isUploaded = true;
          newBaseMap.nameUploadedImage = selectedFile.name;
        } else if (extensionFile === 'jpg' || extensionFile === 'png' || extensionFile === 'gif') {
          newBaseMap.image = file;
          newBaseMap.modeSVG = false;
          newBaseMap.isUploaded = true;
          newBaseMap.nameUploadedImage = selectedFile.name;
        }

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          baseMap: newBaseMap
        }));
      }, 1000);
    };

    _this.defineValueImage = function () {
      var result = '';

      if (!_this.props.options.baseMap.isUploaded) {
        result = _this.props.options.baseMap.image || '';
      }

      return result;
    };

    _this.state = {
      newPolice: {
        value: _this.props.options.display.police,
        label: _this.props.options.display.police
      },
      size: _this.props.options.display.size,
      style: _this.props.options.display.style
    };
    return _this;
  }
  /**
   * html
   */


  Display.prototype.render = function () {
    var options = this.props.options;
    var police = [{
      value: 'Helvetica',
      label: 'Helvetica'
    }, {
      value: 'Arial',
      label: 'Arial'
    }, {
      value: 'sans-serif',
      label: 'sans-serif'
    }, {
      value: 'mono',
      label: 'mono'
    }];

    var l10n = __webpack_require__(/*! Localization/en.json */ "./Localization/en.json");

    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex',
        marginBottom: 1
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        marginBottom: '1px'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Police")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Functions_Input_inputSelect__WEBPACK_IMPORTED_MODULE_3__["default"], {
      _onChange: this.onChangePolice,
      data: police,
      defaultValue: this.state.newPolice
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: l10n.textDefault.size,
      labelWidth: 15,
      inputWidth: 30,
      required: true,
      value: this.state.size,
      onChange: this.handleChangesize
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Parametrage_styleComponent__WEBPACK_IMPORTED_MODULE_4__["default"], {
      oldStyle: this.state.style,
      saveParent: this.saveStyleData
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Use SVG"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Switch"], {
      labelClass: "",
      label: "",
      checked: options.baseMap.modeSVG,
      onChange: this.onChangeSwitchModeSVG
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: 'Image',
      labelWidth: 15,
      inputWidth: 30,
      placeholder: 'URL',
      type: "text",
      onChange: this.onImageChanged,
      value: this.defineValueImage()
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex',
        margin: '2px 0'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
      width: 15
    }, "Upload Image"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("input", {
      style: {
        border: '1px solid #262628',
        borderRadius: '0 3px 3px 0',
        width: '416px'
      },
      type: "file",
      name: "file",
      onChange: this.uploadImage
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
      style: {
        margin: '10px 0 0 10px',
        fontSize: '10px'
      }
    }, this.props.options.baseMap.nameUploadedImage || '')), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Width",
      labelWidth: 15,
      inputWidth: 30,
      type: "text",
      onChange: this.onChangeWidthBaseMap,
      value: options.baseMap.width || '0'
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Height",
      labelWidth: 15,
      inputWidth: 30,
      type: "text",
      onChange: this.onChangeHeightBaseMap,
      value: options.baseMap.height || '0'
    })));
  };

  return Display;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (Display);

/***/ }),

/***/ "./components/gabarit.tsx":
/*!********************************!*\
  !*** ./components/gabarit.tsx ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Functions/loaderGabarit */ "./Functions/loaderGabarit.tsx");
/* harmony import */ var Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Models/OrientedLinkClass */ "./Models/OrientedLinkClass.tsx");
/* harmony import */ var Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! Models/PositionParameterClass */ "./Models/PositionParameterClass.tsx");
/* harmony import */ var Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! Models/LinkURLClass */ "./Models/LinkURLClass.tsx");
/* harmony import */ var _Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../Functions/fetchMetrics */ "./Functions/fetchMetrics.tsx");
/* harmony import */ var Models_PointClass__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! Models/PointClass */ "./Models/PointClass.tsx");
/* harmony import */ var Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! Models/TextObjectClass */ "./Models/TextObjectClass.tsx");
/* harmony import */ var Models_RegionClass__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! Models/RegionClass */ "./Models/RegionClass.tsx");
/* harmony import */ var Functions_getResultQuery__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! Functions/getResultQuery */ "./Functions/getResultQuery.tsx");


 //import /*pointClassImport, regionClassImport, gabaritPointClassImport, gabaritRegionClassImport */ '../../config/testVariable';

 //import { LinkURLClass } from 'Models/LinkURLClass';
//import { PositionParameterClass } from 'Models/PositionParameterClass';



 //import { LowerLimitClass } from 'Models/LowerLimitClass';
//import { TextObject } from 'Models/TextObjectClass';





 // interface SelectQueryID {
//   value: string;
//   label: string;
// }

var Gabarit = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(Gabarit, _super);

  function Gabarit(props) {
    var _this = _super.call(this, props) || this;

    _this.result = [];
    /**************************************CATCH******************************************/

    _this.onChangeSelectQuerryID = function (value, index) {
      var newGabaritFile = _this.props.options.saveGabaritFile;
      newGabaritFile[index].queryID = value.value;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveGabaritFile: newGabaritFile
      }));
    };

    _this.onToggleSelectUrl = function (isOpen) {
      _this.setState({
        collapseSelectURL: isOpen
      });
    };

    _this.UrlValidator = function (url) {
      var result = true;

      for (var index in _this.props.options.saveGabaritURL) {
        if (_this.props.options.saveGabaritURL[index] === url) {
          result = false;
          break;
        }
      }

      return result;
    };

    _this.GabaritValidator = function (name) {
      var result = true;

      _this.props.options.saveGabaritFile.forEach(function (element) {
        if (element.fileName === name) {
          console.log('LoadGabaritFileReject');
          result = false;
        }
      });

      return result;
    };
    /**************************************LOADER******************************************/
    // quantile|0.5#slice|inner_eval


    _this.loadGabarit = function (file, url) {
      var name = url.split('/');

      if (_this.GabaritValidator(name[name.length - 1])) {
        var newGabarit_1 = {
          queryID: 'null',
          fileName: name[name.length - 1],
          loaded: false,
          globalGabarit: file.global,
          templateGabaritPoint: [],
          templateGabaritRegion: [],
          templateGabaritLink: [],
          templateGabaritPointDefault: [],
          templateGabaritRegionDefault: [],
          templateGabaritLinkDefault: []
        };
        file.templates.forEach(function (gab) {
          if (gab.type === 'point') {
            newGabarit_1.templateGabaritPoint.push(gab);
          }

          if (gab.type === 'region') {
            newGabarit_1.templateGabaritRegion.push(gab);
          }

          if (gab.type === 'link') {
            newGabarit_1.templateGabaritLink.push(gab);
          }
        });
        file["default"].templates.forEach(function (gab) {
          if (gab.type === 'point') {
            newGabarit_1.templateGabaritPointDefault.push(gab);
          }

          if (gab.type === 'region') {
            newGabarit_1.templateGabaritRegionDefault.push(gab);
          }

          if (gab.type === 'link') {
            newGabarit_1.templateGabaritLinkDefault.push(gab);
          }
        });

        _this.props.options.saveGabaritFile.push(newGabarit_1);
      }
    };

    _this.fetchUrl = function (url) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var file, response, error_1;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3,, 4]);

              file = {};
              return [4
              /*yield*/
              , fetch(url)];

            case 1:
              response = _a.sent();
              return [4
              /*yield*/
              , response.json()];

            case 2:
              file = _a.sent();
              return [2
              /*return*/
              , file];

            case 3:
              error_1 = _a.sent();
              console.error(error_1);
              return [3
              /*break*/
              , 4];

            case 4:
              return [2
              /*return*/
              , null];
          }
        });
      });
    };

    _this.loadDefaultGabarit = function (file, url) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var name, newGabarit;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          name = url.split('/');
          newGabarit = {
            queryID: 'null',
            fileName: name[name.length - 1],
            loaded: false,
            globalGabarit: file.global,
            templateGabaritPoint: [],
            templateGabaritRegion: [],
            templateGabaritLink: [],
            templateGabaritPointDefault: [],
            templateGabaritRegionDefault: [],
            templateGabaritLinkDefault: []
          };
          file["default"].templates.forEach(function (gab) {
            if (gab.type === 'point') {
              newGabarit.templateGabaritPointDefault.push(gab);
            }

            if (gab.type === 'region') {
              newGabarit.templateGabaritRegionDefault.push(gab);
            }

            if (gab.type === 'link') {
              newGabarit.templateGabaritLinkDefault.push(gab);
            }
          });
          this.props.options.gabaritDefault = newGabarit;
          return [2
          /*return*/
          ];
        });
      });
    };

    _this.fetchGabarit = function () {
      //this.result = fetchConfFile(this.props.options.saveGabaritURL);
      _this.props.options.saveGabaritURL.forEach(function (url) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
          var file, response, error_2;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                _a.trys.push([0, 3,, 4]);

                file = {};
                return [4
                /*yield*/
                , fetch(url)];

              case 1:
                response = _a.sent();
                return [4
                /*yield*/
                , response.json()];

              case 2:
                file = _a.sent();
                this.loadGabarit(file, url);
                this.setState({
                  collapseGabarit: true
                });
                return [3
                /*break*/
                , 4];

              case 3:
                error_2 = _a.sent();
                console.error(error_2);
                return [3
                /*break*/
                , 4];

              case 4:
                return [2
                /*return*/
                ];
            }
          });
        });
      });
    };
    /**************************************CHECK TOLOAD/ADD FILTER******************************************/


    _this.addFilterDynamic = function (metric, label, value) {
      var result = {
        key: metric.key,
        unit: metric.unit,
        format: metric.format,
        keyValue: metric.keyValue,
        filter: JSON.parse(JSON.stringify(metric.filter)),
        refId: metric.refId,
        expr: metric.expr,
        returnQuery: metric.returnQuery,
        manageValue: metric.manageValue
      };

      if (label.x !== value.x) {
        result.filter.push({
          label: label.x,
          value: value.x
        });
      }

      if (label.y !== value.y) {
        result.filter.push({
          label: label.y,
          value: value.y
        });
      }

      return result;
    };

    _this.checkCoordinateFilterPoint = function (point, props) {
      var _a;

      Object(_Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_7__["reqMetricPoint"])(point, props);
      var valid = false;
      (_a = point.mainMetric.returnQuery) === null || _a === void 0 ? void 0 : _a.forEach(function (dataFrame) {
        var result = Object(Functions_getResultQuery__WEBPACK_IMPORTED_MODULE_11__["searchNameIsFilter"])(dataFrame, point.mainMetric);

        if (result) {
          _this.props.options.arrayPoints.push(point);

          valid = true;
          return true;
        } else {
          return false;
        }
      });
      return valid;
    };

    _this.checkCoordinateFilterLink = function (link, props) {
      var _a;

      Object(_Functions_fetchMetrics__WEBPACK_IMPORTED_MODULE_7__["reqMetricOrientedLink"])(link, props);
      (_a = link.mainMetric.returnQuery) === null || _a === void 0 ? void 0 : _a.forEach(function (dataFrame) {
        var result = Object(Functions_getResultQuery__WEBPACK_IMPORTED_MODULE_11__["searchNameIsFilter"])(dataFrame, link.mainMetric);

        if (result) {
          _this.props.options.arrayOrientedLinks.push(link);

          return true;
        } else {
          console.log('Filter not found -> no load');
          return false;
        }
      });
      return false;
    };
    /**************************************INPUT******************************************/


    _this.onToggleGabaritUrl = function (isOpen) {
      _this.setState({
        collapseSelectURL: isOpen
      });
    };

    _this.onToggleGabaritDefault = function (isOpen) {
      _this.setState({
        collapseGabaritDefault: isOpen
      });
    };

    _this.onToggleGabarit = function (isOpen) {
      _this.setState({
        collapseGabarit: isOpen
      });
    };

    _this.onGabaritUrlChanged = function (event) {
      var newData = '';
      newData = event.currentTarget.value;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        gabaritUrlInput: newData
      }));
    };
    /*
     * add url for default gabarit
     */


    _this.onGabaritDefaultUrlChanged = function (event) {
      var newData = '';
      newData = event.currentTarget.value;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveGabaritDefaultUrl: newData
      }));
    };

    _this.onGabaritListUrlChanged = function (event) {
      var newData = _this.props.options.saveGabaritURL.slice();

      newData[parseInt(event.currentTarget.id, 10)] = event.currentTarget.value;
      _this.props.options.saveGabaritURL = newData;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveGabaritURL: _this.props.options.saveGabaritURL
      }));
    };

    _this.addGabaritUrlInput = function (onClick) {
      var valid = true;

      _this.props.options.saveGabaritURL.forEach(function (element) {
        if (_this.props.options.gabaritUrlInput === element) {
          valid = false;
        }
      });

      if (valid === true) {
        _this.props.options.saveGabaritURL.push(_this.props.options.gabaritUrlInput);

        _this.props.options.gabaritUrlInput = '';

        _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
          saveGabaritURL: _this.props.options.saveGabaritURL
        }));
      }
    };

    _this.addGabaritDefaultUrlInput = function (onClick) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var url, file, response, newFileName, newGabaritDefault, error_3;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3,, 4]);

              url = this.props.options.saveGabaritDefaultUrl;
              file = {};
              return [4
              /*yield*/
              , fetch(this.props.options.saveGabaritDefaultUrl)];

            case 1:
              response = _a.sent();
              newFileName = url.split('/')[url.split('/').length - 1];
              newGabaritDefault = this.props.options.gabaritDefault;
              newGabaritDefault.fileName = newFileName;
              this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, this.props.options), {
                gabaritDefault: newGabaritDefault
              }));
              return [4
              /*yield*/
              , response.json()];

            case 2:
              file = _a.sent();
              this.loadDefaultGabarit(file, url);
              this.setState({
                collapseSelectURL: true
              });
              return [3
              /*break*/
              , 4];

            case 3:
              error_3 = _a.sent();
              console.log('Default gabarit error:');
              console.error(error_3);
              return [3
              /*break*/
              , 4];

            case 4:
              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.gabaritDeletUrl = function (onClick) {
      var isUrl = function isUrl(url) {
        return url === _this.props.options.saveGabaritURL[parseInt(onClick.currentTarget.id, 10)];
      };

      _this.props.options.saveGabaritURL.splice(_this.props.options.saveGabaritURL.findIndex(isUrl), 1);

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveGabaritURL: _this.props.options.saveGabaritURL
      }));
    };

    _this.gabaritDeletFile = function (onClick) {
      var isGabarit = function isGabarit(gabarit) {
        return gabarit === _this.props.options.saveGabaritFile[parseInt(onClick.currentTarget.id, 10)];
      };

      _this.props.options.saveGabaritFile.splice(_this.props.options.saveGabaritFile.findIndex(isGabarit), 1);

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveGabaritFile: _this.props.options.saveGabaritFile
      }));
    };

    _this.gabaritDeletFileDefault = function (onClick) {
      _this.props.options.gabaritDefault = {
        queryID: 'A',
        fileName: '',
        loaded: false,
        globalGabarit: {
          lowerLimit: [{
            id: 0,
            lowerLimitMin: '',
            lowerLimitMax: '',
            backColor: 'blue',
            borderColor: 'red',
            sizeBorder: '1'
          }],
          textObject: {
            value: 'default',
            isTextTooltip: 'false',
            colorBack: 'blue',
            colorText: 'black',
            style: {
              bold: 'false',
              italic: 'false',
              underline: 'false'
            },
            generateObjectText: 'false',
            valueGenerateObjectText: {
              legendElement: 'default',
              numericFormatElement: 'default',
              unit: 'default',
              displayObjectInTooltip: 'false',
              addColorTextElement: 'false',
              colorTextElement: 'black',
              addColorBackElement: 'false',
              colorBackElement: 'white'
            },
            generateAuxiliaryElement: {
              legendElement: 'default',
              numericFormatElement: 'default',
              unit: 'default',
              displayObjectInTooltip: 'false',
              addColorTextElement: 'false',
              colorTextElement: 'black',
              addColorBackElement: 'false',
              colorBackElement: 'white'
            }
          },
          defaultColor: 'black',
          colorMode: 'true',
          traceBack: 'true',
          traceBorder: 'true'
        },
        templateGabaritPoint: [],
        templateGabaritRegion: [],
        templateGabaritLink: [],
        templateGabaritPointDefault: [],
        templateGabaritRegionDefault: [],
        templateGabaritLinkDefault: []
      };

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        gabaritDefault: _this.props.options.gabaritDefault,
        saveGabaritDefaultUrl: ''
      }));
    };
    /**************************************LOADER******************************************/


    _this.checkLoaderGabarit = function (onClick) {
      if (!_this.props.options.saveGabaritFile[parseInt(onClick.currentTarget.id, 10)].loaded) {
        _this.loaderGabarit(_this.props.options.saveGabaritFile[parseInt(onClick.currentTarget.id, 10)], parseInt(onClick.currentTarget.id, 10));

        _this.props.options.saveGabaritFile[parseInt(onClick.currentTarget.id, 10)].loaded = true;
      } else {
        console.log('loadGabaritReject');
      }
    };

    _this.metaConstructor = function (metas) {
      var result = [];
      metas.forEach(function (meta, index) {
        var textObject = new Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_9__["TextObject"]('', false, meta.obj.colorBack, meta.obj.colorText, {
          bold: _this.transformStringToBoolean(meta.obj.style.bold),
          italic: _this.transformStringToBoolean(meta.obj.style.italic),
          underline: _this.transformStringToBoolean(meta.obj.style.underline)
        }, false, {
          legendElement: '',
          numericFormatElement: '',
          unit: '',
          displayObjectInTooltip: false,
          addColorTextElement: false,
          colorTextElement: '',
          addColorBackElement: false,
          colorBackElement: ''
        }, {
          legendElement: '',
          numericFormatElement: '',
          unit: '',
          displayObjectInTooltip: false,
          addColorTextElement: false,
          colorTextElement: meta.obj.colorText,
          addColorBackElement: false,
          colorBackElement: ''
        });
        result.push({
          meta: meta.meta,
          obj: textObject
        });
      });
      return result;
    };

    _this.transformStringToBoolean = function (text) {
      return text === 'true' ? true : false;
    };

    _this.transformWithUpperCase = function (oldSelectableValue) {
      var newSelectableValue;
      var newLabel = '';
      (oldSelectableValue.label || '').split('').forEach(function (letter, index) {
        if (index === 0) {
          newLabel += letter.toUpperCase();
        } else {
          newLabel += letter;
        }
      });
      newSelectableValue = {
        label: newLabel,
        value: oldSelectableValue.value
      };
      return newSelectableValue;
    };

    _this.loaderGabarit = function (gab, idx) {
      var tmpLabelAPosition;
      var tmpLabelBPosition;
      var tmpToolTipA;
      var tmpToolTipB;
      /* Point */
      //template

      var filterPoint = [];
      var posPoint = [];
      var namePoint = []; // add metadata

      var metaPoint = [];
      var labelPoint = [];
      var positionParameterPoint = [];
      var mainMetricPoint = [];
      var metricPoint = [];
      var linkURLPoint = [];
      var valueMetricPoint = [];
      var drawGraphicMarkerPoint = [];
      var shapePoint = []; //let sizeWidthPoint: Array<SelectableValue<string>> = [];

      var sizeWidthPoint = [];
      var sizeHeightPoint = [];
      var colorPoint = [];
      var associateOrientedLinksInPoint = [];
      var associateOrientedLinksOutPoint = []; //global

      var lowerLimit;
      var colorMode;
      var traceBack;
      var traceBorder;
      var textObj;
      var value;
      var isTextTooltip;
      var colorBack;
      var colorText;
      var style;
      var generateObjectText;
      var generateValue;
      var generateAux;
      var widthBackground = parseInt(_this.props.options.baseMap.width, 10);
      var xMinInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMin, 10);
      var xMaxInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMax, 10);
      var widthInitialSpace = xMaxInitialSpace - xMinInitialSpace;
      var heightBackground = parseInt(_this.props.options.baseMap.height, 10);
      var yMinInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMin, 10);
      var yMaxInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMax, 10);
      var heightInitialSpace = yMaxInitialSpace - yMinInitialSpace;
      /* Region */
      //Template

      var gabaritFileTmp = gab; // GLOBAL
      //colorMode = Boolean(gabaritFileTmp.globalGabarit.colorMode);

      if (!gabaritFileTmp.globalGabarit.colorMode) {
        //default
        colorMode = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.colorMode);
      } else {
        //normal
        colorMode = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.colorMode);
      } //traceBack = Boolean(gabaritFileTmp.globalGabarit.traceBack);


      if (!gabaritFileTmp.globalGabarit.traceBack) {
        //default
        traceBack = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.traceBack);
      } else {
        //normal
        traceBack = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.traceBack);
      } //traceBorder = Boolean(gabaritFileTmp.globalGabarit.traceBorder);


      if (!gabaritFileTmp.globalGabarit.traceBorder) {
        //default
        traceBorder = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.traceBorder);
      } else {
        //normal
        traceBorder = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.traceBorder);
      } ////// Text Object


      value = gabaritFileTmp.globalGabarit.textObject.value;

      if (!value) {
        value = _this.props.options.gabaritDefault.globalGabarit.textObject.value;
      }

      if (!gabaritFileTmp.globalGabarit.textObject.isTextTooltip) {
        //default
        isTextTooltip = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.isTextTooltip);
      } else {
        //normal
        isTextTooltip = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.isTextTooltip);
      }

      colorBack = gabaritFileTmp.globalGabarit.textObject.colorBack;

      if (!colorBack) {
        colorBack = _this.props.options.gabaritDefault.globalGabarit.textObject.colorBack;
      }

      colorText = gabaritFileTmp.globalGabarit.textObject.colorText;

      if (!colorBack) {
        colorText = _this.props.options.gabaritDefault.globalGabarit.textObject.colorText;
      }

      if (!gabaritFileTmp.globalGabarit.textObject.generateObjectText) {
        //default
        generateObjectText = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.generateObjectText);
      } else {
        //normal
        generateObjectText = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.generateObjectText);
      } // generateValue = {
      //   legendElement: gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.legendElement,
      //   numericFormatElement: gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.numericFormatElement,
      //   unit: gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.unit,
      //   displayObjectInTooltip: Boolean(gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.displayObjectInTooltip),
      //   addColorTextElement: Boolean(gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.addColorTextElement),
      //   colorTextElement: gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.colorTextElement,
      //   addColorBackElement: Boolean(gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.addColorBackElement),
      //   colorBackElement: gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.colorBackElement,
      // };
      // if (!generateValue.unit) {
      //   generateValue = {
      //     legendElement: this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.legendElement,
      //     numericFormatElement: this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.numericFormatElement,
      //     unit: this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.unit,
      //     displayObjectInTooltip: Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.displayObjectInTooltip),
      //     addColorTextElement: Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.addColorTextElement),
      //     colorTextElement: this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.colorTextElement,
      //     addColorBackElement: Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.addColorBackElement),
      //     colorBackElement: this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.colorBackElement,
      //   };
      // }


      generateValue = {
        legendElement: gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.legendElement,
        numericFormatElement: gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.numericFormatElement,
        unit: gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.unit,
        displayObjectInTooltip: false,
        addColorTextElement: false,
        colorTextElement: gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.colorTextElement,
        addColorBackElement: false,
        colorBackElement: gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.colorBackElement
      };

      if (!gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.addColorTextElement) {
        generateValue.addColorTextElement = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.addColorTextElement);
      } else {
        generateValue.addColorTextElement = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.addColorTextElement);
      }

      if (!generateValue.colorTextElement) {
        generateValue.colorTextElement = _this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.colorTextElement;
      }

      if (!gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.addColorBackElement) {
        generateValue.addColorBackElement = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.addColorBackElement);
      } else {
        generateValue.addColorBackElement = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.addColorBackElement);
      }

      if (!generateValue.colorBackElement) {
        generateValue.colorBackElement = _this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.colorBackElement;
      }

      if (!gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.displayObjectInTooltip) {
        generateValue.displayObjectInTooltip = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.displayObjectInTooltip);
      } else {
        generateValue.displayObjectInTooltip = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.valueGenerateObjectText.displayObjectInTooltip);
      }

      if (!generateValue.legendElement) {
        generateValue.legendElement = _this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.legendElement;
      }

      if (!generateValue.numericFormatElement) {
        generateValue.numericFormatElement = _this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.numericFormatElement;
      }

      if (!generateValue.unit) {
        generateValue.unit = _this.props.options.gabaritDefault.globalGabarit.textObject.valueGenerateObjectText.unit;
      } // generateAux = {
      //   legendElement: gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.legendElement,
      //   numericFormatElement: gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.numericFormatElement,
      //   unit: gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.unit,
      //   displayObjectInTooltip: Boolean(gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.displayObjectInTooltip),
      //   addColorTextElement: Boolean(gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.addColorTextElement),
      //   colorTextElement: gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.colorTextElement,
      //   addColorBackElement: Boolean(gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.addColorBackElement),
      //   colorBackElement: gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.colorBackElement,
      // };
      // if (!generateAux.unit) {
      //   generateAux = {
      //     legendElement: this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.legendElement,
      //     numericFormatElement: this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.numericFormatElement,
      //     unit: this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.unit,
      //     displayObjectInTooltip: Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.displayObjectInTooltip),
      //     addColorTextElement: Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.addColorTextElement),
      //     colorTextElement: this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.colorTextElement,
      //     addColorBackElement: Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.addColorBackElement),
      //     colorBackElement: this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.colorBackElement,
      //   };
      // }


      generateAux = {
        legendElement: gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.legendElement,
        numericFormatElement: gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.numericFormatElement,
        unit: gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.unit,
        displayObjectInTooltip: false,
        addColorTextElement: false,
        colorTextElement: gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.colorTextElement,
        addColorBackElement: false,
        colorBackElement: gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.colorBackElement
      };

      if (!gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.addColorBackElement) {
        generateAux.addColorBackElement = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.addColorBackElement);
      } else {
        generateAux.addColorBackElement = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.addColorBackElement);
      }

      if (!generateAux.colorBackElement) {
        generateAux.colorBackElement = _this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.colorBackElement;
      }

      if (!gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.addColorTextElement) {
        generateAux.addColorTextElement = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.addColorTextElement);
      } else {
        generateAux.addColorTextElement = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.addColorTextElement);
      }

      if (!generateAux.colorTextElement) {
        generateAux.colorTextElement = _this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.colorTextElement;
      }

      if (!gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.displayObjectInTooltip) {
        generateAux.displayObjectInTooltip = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.displayObjectInTooltip);
      } else {
        generateAux.displayObjectInTooltip = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.generateAuxiliaryElement.displayObjectInTooltip);
      }

      if (!generateAux.legendElement) {
        generateAux.legendElement = _this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.legendElement;
      }

      if (!generateAux.numericFormatElement) {
        generateAux.numericFormatElement = _this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.numericFormatElement;
      }

      if (!generateAux.unit) {
        generateAux.unit = _this.props.options.gabaritDefault.globalGabarit.textObject.generateAuxiliaryElement.unit;
      } // style = {
      //   bold: Boolean(gabaritFileTmp.globalGabarit.textObject.style.bold),
      //   italic: Boolean(gabaritFileTmp.globalGabarit.textObject.style.italic),
      //   underline: Boolean(gabaritFileTmp.globalGabarit.textObject),
      // };
      // if (!style.bold) {
      //   style = {
      //     bold: Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.style.bold),
      //     italic: Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.style.italic),
      //     underline: Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.style.underline),
      //   };
      // }


      style = {
        bold: false,
        italic: false,
        underline: false
      };

      if (!gabaritFileTmp.globalGabarit.textObject.style.bold) {
        //default
        style.bold = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.style.bold);
      } else {
        //normal
        style.bold = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.style.bold);
      }

      if (!gabaritFileTmp.globalGabarit.textObject.style.italic) {
        //default
        style.italic = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.style.italic);
      } else {
        //normal
        style.italic = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.style.italic);
      }

      if (!gabaritFileTmp.globalGabarit.textObject.style.underline) {
        //default
        style.underline = _this.transformStringToBoolean(_this.props.options.gabaritDefault.globalGabarit.textObject.style.underline);
      } else {
        //normal
        style.underline = _this.transformStringToBoolean(gabaritFileTmp.globalGabarit.textObject.style.underline);
      } // textObj = new TextObject(
      //   gabaritFileTmp.globalGabarit.textObject.value,
      //   Boolean(gabaritFileTmp.globalGabarit.textObject.isTextTooltip),
      //   gabaritFileTmp.globalGabarit.textObject.colorBack,
      //   gabaritFileTmp.globalGabarit.textObject.colorText,
      //   style,
      //   Boolean(gabaritFileTmp.globalGabarit.textObject.generateObjectText),
      //   generateValue,
      //   generateAux
      // );


      textObj = new Models_TextObjectClass__WEBPACK_IMPORTED_MODULE_9__["TextObject"](value, isTextTooltip, colorBack, colorText, style, generateObjectText, generateValue, generateAux); // if (!textObj.value) {
      //   textObj = new TextObject(
      //     this.props.options.gabaritDefault.globalGabarit.textObject.value,
      //     Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.isTextTooltip),
      //     this.props.options.gabaritDefault.globalGabarit.textObject.colorBack,
      //     this.props.options.gabaritDefault.globalGabarit.textObject.colorText,
      //     style,
      //     Boolean(this.props.options.gabaritDefault.globalGabarit.textObject.generateObjectText),
      //     generateValue,
      //     generateAux
      //   );
      // }
      /// Lower Limit

      lowerLimit = gabaritFileTmp.globalGabarit.lowerLimit;

      if (lowerLimit.length === 0) {
        lowerLimit = _this.props.options.gabaritDefault.globalGabarit.lowerLimit;
      }

      gabaritFileTmp.templateGabaritPoint.forEach(function (point, index) {
        if (point.labelfix === 'false') {
          posPoint.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(point.xylabel));

          if (!posPoint[index].y || !posPoint[index].x) {
            posPoint[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritPointDefault[0].xylabel);
          }

          if (!posPoint[index].y || !posPoint[index].x) {
            posPoint[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritPointDefault[0].xylabel);
          }
        } else {
          posPoint.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(point.xylabelfix));

          if (!posPoint[index].y || !posPoint[index].x) {
            posPoint[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritPointDefault[0].xylabelfix);
          }

          if (!posPoint[index].y || !posPoint[index].x) {
            posPoint[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritPointDefault[0].xylabelfix);
          }
        }

        filterPoint.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["filterParse"])(point.filtered));

        if (!filterPoint[index][0]) {
          filterPoint[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["filterParse"])(gabaritFileTmp.templateGabaritPointDefault[0].filtered);
        }

        if (!filterPoint[index][0]) {
          filterPoint[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["filterParse"])(_this.props.options.gabaritDefault.templateGabaritPointDefault[0].filtered);
        }

        namePoint.push(point.name);

        if (!namePoint[index]) {
          namePoint[index] = gabaritFileTmp.templateGabaritPointDefault[0].name;
        }

        if (!namePoint[index]) {
          namePoint[index] = _this.props.options.gabaritDefault.templateGabaritPointDefault[0].name;
        }

        metaPoint.push(_this.metaConstructor(point.meta));
        point.meta.forEach(function (oneMeta, indexMeta) {
          // BOLD
          if (!oneMeta.obj.style.bold) {
            metaPoint[index][indexMeta].obj.style.bold = _this.transformStringToBoolean(gabaritFileTmp.templateGabaritPointDefault[0].meta[indexMeta].obj.style.bold);
          }

          if (!oneMeta.obj.style.bold && !gabaritFileTmp.templateGabaritPointDefault[0].meta[indexMeta].obj.style.bold) {
            metaPoint[index][indexMeta].obj.style.bold = _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritPointDefault[0].meta[indexMeta].obj.style.bold);
          } // ITALIC


          if (!oneMeta.obj.style.italic) {
            metaPoint[index][indexMeta].obj.style.italic = _this.transformStringToBoolean(gabaritFileTmp.templateGabaritPointDefault[0].meta[indexMeta].obj.style.italic);
          }

          if (!oneMeta.obj.style.italic && !gabaritFileTmp.templateGabaritPointDefault[0].meta[indexMeta].obj.style.italic) {
            metaPoint[index][indexMeta].obj.style.italic = _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritPointDefault[0].meta[indexMeta].obj.style.italic);
          } // UNDERLINE


          if (!oneMeta.obj.style.underline) {
            metaPoint[index][indexMeta].obj.style.underline = _this.transformStringToBoolean(gabaritFileTmp.templateGabaritPointDefault[0].meta[indexMeta].obj.style.underline);
          }

          if (!oneMeta.obj.style.underline && !gabaritFileTmp.templateGabaritPointDefault[0].meta[indexMeta].obj.style.underline) {
            metaPoint[index][indexMeta].obj.style.underline = _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritPointDefault[0].meta[indexMeta].obj.style.underline);
          }
        }); // if (!metaPoint[index]) {
        //   metaPoint[index] = this.metaConstructor(gabaritFileTmp.templateGabaritPointDefault[0].meta);
        // }
        // if (!metaPoint[index]) {
        //   metaPoint[index] = this.metaConstructor(this.props.options.gabaritDefault.templateGabaritPointDefault[0].meta);
        // }

        labelPoint.push(point.label); // c'est le label du point qui est afficher pour la selection

        if (!labelPoint[index]) {
          labelPoint[index] = gabaritFileTmp.templateGabaritPointDefault[0].label;
        }

        if (!labelPoint[index]) {
          labelPoint[index] = _this.props.options.gabaritDefault.templateGabaritPointDefault[0].label;
        }

        mainMetricPoint.push({
          key: point.mainMetric.key,
          unit: point.mainMetric.unit,
          format: point.mainMetric.format,
          keyValue: '',
          filter: filterPoint[index],
          refId: gabaritFileTmp.queryID,
          expr: '',
          returnQuery: [],
          manageValue: point.mainMetric.manageValue
        });

        if (!mainMetricPoint[index].unit) {
          mainMetricPoint[index] = {
            key: gabaritFileTmp.templateGabaritPointDefault[0].mainMetric.key,
            unit: gabaritFileTmp.templateGabaritPointDefault[0].mainMetric.unit,
            format: gabaritFileTmp.templateGabaritPointDefault[0].mainMetric.format,
            keyValue: '',
            filter: filterPoint[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: gabaritFileTmp.templateGabaritPointDefault[0].mainMetric.manageValue
          };
        }

        if (!mainMetricPoint[index].unit) {
          mainMetricPoint[index] = {
            key: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].mainMetric.key,
            unit: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].mainMetric.unit,
            format: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].mainMetric.format,
            keyValue: '',
            filter: filterPoint[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].mainMetric.manageValue
          };
        }

        point.metrics.forEach(function (element) {
          metricPoint[index].push({
            key: element.key,
            unit: element.unit,
            format: element.format,
            keyValue: '',
            filter: filterPoint[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: element.manageValue
          });
        });
        valueMetricPoint.push(point.valueMetric);
        drawGraphicMarkerPoint.push({
          label: point.drawGraphicMarker.label,
          value: point.drawGraphicMarker.value
        }); //if (!drawGraphicMarkerPoint[index].label || !drawGraphicMarkerPoint[index].label) {

        if (!drawGraphicMarkerPoint[index].label) {
          drawGraphicMarkerPoint[index] = {
            label: gabaritFileTmp.templateGabaritPointDefault[0].drawGraphicMarker.label,
            value: gabaritFileTmp.templateGabaritPointDefault[0].drawGraphicMarker.value
          };
        } //if (!drawGraphicMarkerPoint[index].label || !drawGraphicMarkerPoint[index].label) {


        if (!drawGraphicMarkerPoint[index].label) {
          drawGraphicMarkerPoint[index] = {
            label: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].drawGraphicMarker.label,
            value: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].drawGraphicMarker.value
          };
        }

        shapePoint.push(point.shape);

        if (!shapePoint[index]) {
          shapePoint[index] = gabaritFileTmp.templateGabaritPointDefault[0].shape;
        }

        if (!shapePoint[index]) {
          shapePoint[index] = _this.props.options.gabaritDefault.templateGabaritPointDefault[0].shape;
        }

        sizeWidthPoint.push(point.sizeWidth);

        if (!sizeWidthPoint[index]) {
          sizeWidthPoint[index] = gabaritFileTmp.templateGabaritPointDefault[0].sizeWidth;
        }

        if (!sizeWidthPoint[index]) {
          sizeWidthPoint[index] = _this.props.options.gabaritDefault.templateGabaritPointDefault[0].sizeWidth;
        }

        sizeHeightPoint.push(point.sizeHeight);

        if (!sizeHeightPoint[index]) {
          sizeHeightPoint[index] = gabaritFileTmp.templateGabaritPointDefault[0].sizeHeight;
        }

        if (!sizeHeightPoint[index]) {
          sizeHeightPoint[index] = _this.props.options.gabaritDefault.templateGabaritPointDefault[0].sizeHeight;
        }

        if (point.color.length !== 0) {
          colorPoint.push(point.color);
        } else {
          colorPoint.push(gabaritFileTmp.globalGabarit.defaultColor);
        }

        if (!colorPoint[index]) {
          colorPoint[index] = _this.props.options.gabaritDefault.templateGabaritPointDefault[0].color;
        }

        associateOrientedLinksInPoint.push(point.associateOrientedLinksIn);

        if (!associateOrientedLinksInPoint[index]) {
          associateOrientedLinksInPoint[index] = gabaritFileTmp.templateGabaritPointDefault[0].associateOrientedLinksIn;
        }

        if (!associateOrientedLinksInPoint[index]) {
          associateOrientedLinksInPoint[index] = _this.props.options.gabaritDefault.templateGabaritPointDefault[0].associateOrientedLinksIn;
        }

        associateOrientedLinksOutPoint.push(point.associateOrientedLinksOut);

        if (!associateOrientedLinksOutPoint[index]) {
          associateOrientedLinksOutPoint[index] = gabaritFileTmp.templateGabaritPointDefault[0].associateOrientedLinksOut;
        }

        if (!associateOrientedLinksOutPoint[index]) {
          associateOrientedLinksOutPoint[index] = _this.props.options.gabaritDefault.templateGabaritPointDefault[0].associateOrientedLinksOut;
        }

        tmpToolTipA = {
          label: point.positionParameter.tooltipA.label,
          value: point.positionParameter.tooltipA.value
        };

        if (!tmpToolTipA.label || !tmpToolTipA.value) {
          tmpToolTipA = {
            label: gabaritFileTmp.templateGabaritPointDefault[0].positionParameter.tooltipA.label,
            value: gabaritFileTmp.templateGabaritPointDefault[0].positionParameter.tooltipA.value
          };
        }

        if (!tmpToolTipA.label || !tmpToolTipA.value) {
          tmpToolTipA = {
            label: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].positionParameter.tooltipA.label,
            value: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].positionParameter.tooltipA.value
          };
        }

        tmpToolTipB = {
          label: point.positionParameter.tooltipB.label,
          value: point.positionParameter.tooltipB.value
        };

        if (!tmpToolTipB.label || !tmpToolTipB.value) {
          tmpToolTipB = {
            label: gabaritFileTmp.templateGabaritPointDefault[0].positionParameter.tooltipB.label,
            value: gabaritFileTmp.templateGabaritPointDefault[0].positionParameter.tooltipB.value
          };
        }

        if (!tmpToolTipB.label || !tmpToolTipB.value) {
          tmpToolTipB = {
            label: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].positionParameter.tooltipB.label,
            value: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].positionParameter.tooltipB.value
          };
        }

        tmpLabelAPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(point.positionParameter.xylabelA);

        if (!tmpLabelAPosition.x || !tmpLabelAPosition.y) {
          tmpLabelAPosition = {
            x: gabaritFileTmp.templateGabaritPointDefault[0].positionParameter.xylabelA,
            y: gabaritFileTmp.templateGabaritPointDefault[0].positionParameter.xylabelA
          };
        }

        if (!tmpLabelAPosition.x || !tmpLabelAPosition.y) {
          tmpLabelAPosition = {
            x: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].positionParameter.xylabelA,
            y: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].positionParameter.xylabelA
          };
        }

        tmpLabelBPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(point.positionParameter.xylabelB);

        if (!tmpLabelBPosition.x || !tmpLabelBPosition.y) {
          tmpLabelBPosition = {
            x: gabaritFileTmp.templateGabaritPointDefault[0].positionParameter.xylabelB,
            y: gabaritFileTmp.templateGabaritPointDefault[0].positionParameter.xylabelB
          };
        }

        if (!tmpLabelBPosition.x || !tmpLabelBPosition.y) {
          tmpLabelBPosition = {
            x: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].positionParameter.xylabelB,
            y: _this.props.options.gabaritDefault.templateGabaritPointDefault[0].positionParameter.xylabelB
          };
        }

        positionParameterPoint.push(new Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_5__["PositionParameterClass"](tmpLabelAPosition.x, tmpLabelAPosition.y, tmpLabelBPosition.x, tmpLabelBPosition.y, tmpToolTipA, tmpToolTipB));
        linkURLPoint.push(new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_6__["LinkURLClass"](point.linkURL.followLink, point.linkURL.hoveringTooltipLink, point.linkURL.hoveringTooltipText));

        if (!linkURLPoint[index].followLink) {
          linkURLPoint[index] = new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_6__["LinkURLClass"](gabaritFileTmp.templateGabaritPointDefault[0].linkURL.followLink, gabaritFileTmp.templateGabaritPointDefault[0].linkURL.hoveringTooltipLink, gabaritFileTmp.templateGabaritPointDefault[0].linkURL.hoveringTooltipText);
        }

        if (!linkURLPoint[index].followLink) {
          linkURLPoint[index] = new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_6__["LinkURLClass"](_this.props.options.gabaritDefault.templateGabaritPointDefault[0].linkURL.followLink, _this.props.options.gabaritDefault.templateGabaritPointDefault[0].linkURL.hoveringTooltipLink, _this.props.options.gabaritDefault.templateGabaritPointDefault[0].linkURL.hoveringTooltipText);
        }
      });
      var newID = 0;

      _this.props.options.arrayPoints.forEach(function (element) {
        newID++;
      });

      var labelCoordX = [];
      var labelCoordY = [];
      var labelCoord = [];
      posPoint.forEach(function (pos, index) {
        if (gabaritFileTmp.templateGabaritPoint[index].labelfix === 'false') {
          _this.props.data.series.forEach(function (element) {
            var e_1, _a, e_2, _b, e_3, _c;

            var _d;

            var remove = (_d = element.name) === null || _d === void 0 ? void 0 : _d.split('{');

            if (element.refId === mainMetricPoint[index].refId) {
              var nameQuery = remove[1].split(',').map(function (value) {
                return value.replace(/[\"{}]/gm, '');
              }) || [];
              var valid = false;
              var res = 0;
              var filters = mainMetricPoint[index].filter;

              try {
                for (var nameQuery_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(nameQuery), nameQuery_1_1 = nameQuery_1.next(); !nameQuery_1_1.done; nameQuery_1_1 = nameQuery_1.next()) {
                  var aQuery = nameQuery_1_1.value;
                  var keyValue = aQuery.split('=');

                  try {
                    for (var filters_1 = (e_2 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(filters)), filters_1_1 = filters_1.next(); !filters_1_1.done; filters_1_1 = filters_1.next()) {
                      var filter = filters_1_1.value;

                      if (keyValue.length === 2) {
                        if (keyValue[0] === filter.label && keyValue[1] === filter.value) {
                          res++;
                        }
                      }
                    }
                  } catch (e_2_1) {
                    e_2 = {
                      error: e_2_1
                    };
                  } finally {
                    try {
                      if (filters_1_1 && !filters_1_1.done && (_b = filters_1["return"])) _b.call(filters_1);
                    } finally {
                      if (e_2) throw e_2.error;
                    }
                  }
                }
              } catch (e_1_1) {
                e_1 = {
                  error: e_1_1
                };
              } finally {
                try {
                  if (nameQuery_1_1 && !nameQuery_1_1.done && (_a = nameQuery_1["return"])) _a.call(nameQuery_1);
                } finally {
                  if (e_1) throw e_1.error;
                }
              }

              if (res === filters.length) {
                valid = true;
              }

              if (valid) {
                try {
                  for (var nameQuery_2 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(nameQuery), nameQuery_2_1 = nameQuery_2.next(); !nameQuery_2_1.done; nameQuery_2_1 = nameQuery_2.next()) {
                    var oneQuery = nameQuery_2_1.value;

                    if (nameQuery && nameQuery.length > 0) {
                      var keyValue = oneQuery.split('=');

                      if (keyValue[0] === pos.x) {
                        labelCoordX.push(keyValue[1]);
                      }

                      if (keyValue[0] === pos.y) {
                        labelCoordY.push(keyValue[1]);
                      }
                    }
                  }
                } catch (e_3_1) {
                  e_3 = {
                    error: e_3_1
                  };
                } finally {
                  try {
                    if (nameQuery_2_1 && !nameQuery_2_1.done && (_c = nameQuery_2["return"])) _c.call(nameQuery_2);
                  } finally {
                    if (e_3) throw e_3.error;
                  }
                }
              }
            }
          });

          if (labelCoordX.length > labelCoordY.length) {
            labelCoordX.forEach(function (element, index) {
              if (!labelCoordX[index]) {
                labelCoordX[index] = pos.x;
              }

              if (!labelCoordY[index]) {
                labelCoordY[index] = pos.y;
              }
            });
          } else {
            labelCoordY.forEach(function (element, index) {
              if (!labelCoordX[index]) {
                labelCoordX[index] = pos.x;
              }

              if (!labelCoordY[index]) {
                labelCoordY[index] = pos.y;
              }
            });
          }
        }

        if (labelCoordX.length > 0) {
          labelCoord.push([]);
          labelCoordX.forEach(function (element, add) {
            labelCoord[index].push({
              x: labelCoordX[add],
              y: labelCoordY[add]
            });
          });
        } else {
          labelCoord[index] = [];
        }
      });
      var upId = false;
      labelCoord.forEach(function (labelCo, posIndex) {
        var e_4, _a;

        console.log('passage1');

        if (labelCo.length > 0) {
          var _loop_1 = function _loop_1(pos) {
            filterPoint.forEach(function (element, index) {
              var defaultPositionX = ((parseInt(pos.x, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
              var defaultPositionY = ((parseInt(pos.y, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();

              if (metricPoint.length > 0) {
                var toLoad = new Models_PointClass__WEBPACK_IMPORTED_MODULE_8__["PointClass"](newID + 1, linkURLPoint[index], metaPoint[index], JSON.parse(JSON.stringify(lowerLimit)), labelPoint[index] + '_' + newID, JSON.parse(JSON.stringify(textObj)), _this.addFilterDynamic(mainMetricPoint[index], posPoint[index], pos), metricPoint[index], colorMode, traceBack, traceBorder, positionParameterPoint[index], namePoint[index] + '_' + newID, valueMetricPoint[index], drawGraphicMarkerPoint[index], shapePoint[index], sizeWidthPoint[index], sizeHeightPoint[index], '', pos.x, pos.y, colorPoint[index], associateOrientedLinksInPoint[index], associateOrientedLinksOutPoint[index], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionX, defaultPositionY);
                upId = _this.checkCoordinateFilterPoint(toLoad, _this.props);

                if (upId) {
                  newID++;
                }
              } else {
                var toLoad = new Models_PointClass__WEBPACK_IMPORTED_MODULE_8__["PointClass"](newID + 1, linkURLPoint[index], metaPoint[index], JSON.parse(JSON.stringify(lowerLimit)), labelPoint[index] + '_' + newID, JSON.parse(JSON.stringify(textObj)), _this.addFilterDynamic(mainMetricPoint[index], posPoint[index], pos), [], colorMode, traceBack, traceBorder, positionParameterPoint[index], namePoint[index] + '_' + newID, valueMetricPoint[index], drawGraphicMarkerPoint[index], shapePoint[index], sizeWidthPoint[index], sizeHeightPoint[index], '', pos.x, pos.y, colorPoint[index], associateOrientedLinksInPoint[index], associateOrientedLinksOutPoint[index], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionX, defaultPositionY);
                upId = _this.checkCoordinateFilterPoint(toLoad, _this.props);

                if (upId) {
                  newID++;
                }
              }
            });
          };

          try {
            for (var labelCo_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(labelCo), labelCo_1_1 = labelCo_1.next(); !labelCo_1_1.done; labelCo_1_1 = labelCo_1.next()) {
              var pos = labelCo_1_1.value;

              _loop_1(pos);
            }
          } catch (e_4_1) {
            e_4 = {
              error: e_4_1
            };
          } finally {
            try {
              if (labelCo_1_1 && !labelCo_1_1.done && (_a = labelCo_1["return"])) _a.call(labelCo_1);
            } finally {
              if (e_4) throw e_4.error;
            }
          }
        } else {
          var defaultPositionX = ((parseInt(posPoint[posIndex].x, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
          var defaultPositionY = ((parseInt(posPoint[posIndex].y, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();

          if (metricPoint.length > 0) {
            var toLoad = new Models_PointClass__WEBPACK_IMPORTED_MODULE_8__["PointClass"](newID + 1, linkURLPoint[posIndex], metaPoint[posIndex], JSON.parse(JSON.stringify(lowerLimit)), labelPoint[posIndex] + '_' + newID, JSON.parse(JSON.stringify(textObj)), mainMetricPoint[posIndex], metricPoint[posIndex], colorMode, traceBack, traceBorder, positionParameterPoint[posIndex], namePoint[posIndex] + '_' + newID, valueMetricPoint[posIndex], drawGraphicMarkerPoint[posIndex], shapePoint[posIndex], sizeWidthPoint[posIndex], sizeHeightPoint[posIndex], '', posPoint[posIndex].x, posPoint[posIndex].y, colorPoint[posIndex], associateOrientedLinksInPoint[posIndex], associateOrientedLinksOutPoint[posIndex], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionX, defaultPositionY);
            upId = _this.checkCoordinateFilterPoint(toLoad, _this.props);

            if (upId) {
              newID++;
            }
          } else {
            var toLoad = new Models_PointClass__WEBPACK_IMPORTED_MODULE_8__["PointClass"](newID + 1, linkURLPoint[posIndex], // changement
            metaPoint[posIndex], JSON.parse(JSON.stringify(lowerLimit)), labelPoint[posIndex] + '_' + newID, JSON.parse(JSON.stringify(textObj)), mainMetricPoint[posIndex], [], colorMode, traceBack, traceBorder, positionParameterPoint[posIndex], namePoint[posIndex] + '_' + newID, valueMetricPoint[posIndex], drawGraphicMarkerPoint[posIndex], shapePoint[posIndex], sizeWidthPoint[posIndex], sizeHeightPoint[posIndex], '', posPoint[posIndex].x, posPoint[posIndex].y, colorPoint[posIndex], associateOrientedLinksInPoint[posIndex], associateOrientedLinksOutPoint[posIndex], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionX, defaultPositionY);
            upId = _this.checkCoordinateFilterPoint(toLoad, _this.props);

            if (upId) {
              newID++;
            }
          }
        }
      });
      /* Link */
      //Template

      var filterLink = []; //

      var posALink = []; //

      var posBLink = []; //

      var posCLink = []; //

      var nameLink = []; //

      var metaLink = []; //

      var labelLink = []; //

      var positionParameterLink = []; //

      var mainMetricALink = []; //
      // let unitA: string;
      // let formatA: string;
      // let keyA: string;
      // let keyValueA: string;
      // let manageValueA: TManageValue;

      var metricALink = []; //

      var mainMetricBLink = []; //

      var metricBLink = []; //

      var linkURLLink = []; //

      var orientationLink = []; //

      var sizeLink = []; //

      var colorALink = []; //

      var colorBLink = []; //

      var valueMetricALink = []; //

      var valueMetricBLink = []; //

      var pointInLink = []; //

      var pointOutLink = []; //

      var regionInLink = []; //

      var regionOutLink = []; //

      var isIncurvedLink = []; //

      gabaritFileTmp.templateGabaritLink.forEach(function (link, index) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;

        if (link.labelfix === 'false') {
          posALink.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(link.xylabelA));

          if (!posALink[index].x || !posALink[index].y) {
            posALink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritLinkDefault[0].xylabelA);
          }

          if (!posALink[index].x || !posALink[index].y) {
            posALink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].xylabelA);
          }

          posBLink.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(link.xylabelB));

          if (!posBLink[index].x || !posBLink[index].y) {
            posBLink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritLinkDefault[0].xylabelB);
          }

          if (!posBLink[index].x || !posBLink[index].y) {
            posBLink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].xylabelB);
          }

          posCLink.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(link.xylabelC));

          if (!posCLink[index].x || !posCLink[index].y) {
            posCLink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritLinkDefault[0].xylabelC);
          }

          if (!posCLink[index].x || !posCLink[index].y) {
            posCLink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].xylabelC);
          }
        } else {
          posALink.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(link.xylabelfixA));

          if (!posALink[index].x || !posALink[index].y) {
            posALink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritLinkDefault[0].xylabelfixA);
          }

          if (!posALink[index].x || !posALink[index].y) {
            posALink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].xylabelfixA);
          }

          posBLink.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(link.xylabelfixB));

          if (!posBLink[index].x || !posBLink[index].y) {
            posBLink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritLinkDefault[0].xylabelfixB);
          }

          if (!posBLink[index].x || !posBLink[index].y) {
            posBLink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].xylabelfixB);
          }

          posCLink.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(link.xylabelfixC));

          if (!posCLink[index].x || !posCLink[index].y) {
            posCLink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritLinkDefault[0].xylabelfixC);
          }

          if (!posCLink[index].x || !posCLink[index].y) {
            posCLink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].xylabelfixC);
          }
        }

        filterLink.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["filterParse"])(link.filtered));

        if (!filterLink[index]) {
          filterLink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["filterParse"])(gabaritFileTmp.templateGabaritLinkDefault[0].filtered);
        }

        if (!filterLink[index]) {
          filterLink[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["filterParse"])(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].filtered);
        }

        nameLink.push(link.name);

        if (!nameLink[index]) {
          nameLink[index] = gabaritFileTmp.templateGabaritLinkDefault[0].name;
        }

        if (!nameLink[index]) {
          nameLink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].name;
        }

        metaLink.push(_this.metaConstructor(link.meta));
        link.meta.forEach(function (oneMeta, indexMeta) {
          // BOLD
          if (!oneMeta.obj.style.bold) {
            metaLink[index][indexMeta].obj.style.bold = _this.transformStringToBoolean(gabaritFileTmp.templateGabaritLinkDefault[0].meta[indexMeta].obj.style.bold);
          }

          if (!oneMeta.obj.style.bold && !gabaritFileTmp.templateGabaritLinkDefault[0].meta[indexMeta].obj.style.bold) {
            metaLink[index][indexMeta].obj.style.bold = _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].meta[indexMeta].obj.style.bold);
          } // ITALIC


          if (!oneMeta.obj.style.italic) {
            metaLink[index][indexMeta].obj.style.italic = _this.transformStringToBoolean(gabaritFileTmp.templateGabaritLinkDefault[0].meta[indexMeta].obj.style.italic);
          }

          if (!oneMeta.obj.style.italic && !gabaritFileTmp.templateGabaritLinkDefault[0].meta[indexMeta].obj.style.italic) {
            metaLink[index][indexMeta].obj.style.italic = _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].meta[indexMeta].obj.style.italic);
          } // UNDERLINE


          if (!oneMeta.obj.style.underline) {
            metaLink[index][indexMeta].obj.style.underline = _this.transformStringToBoolean(gabaritFileTmp.templateGabaritLinkDefault[0].meta[indexMeta].obj.style.underline);
          }

          if (!oneMeta.obj.style.underline && !gabaritFileTmp.templateGabaritLinkDefault[0].meta[indexMeta].obj.style.underline) {
            metaLink[index][indexMeta].obj.style.underline = _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].meta[indexMeta].obj.style.underline);
          }
        }); // if (!metaLink[index]) {
        //   metaLink[index] = this.metaConstructor(gabaritFileTmp.templateGabaritLinkDefault[0].meta);
        // }
        // if (!metaLink[index]) {
        //   metaLink[index] = this.metaConstructor(this.props.options.gabaritDefault.templateGabaritLinkDefault[0].meta);
        // }

        labelLink.push(link.label);

        if (!labelLink[index]) {
          labelLink[index] = gabaritFileTmp.templateGabaritLinkDefault[0].label;
        }

        if (!labelLink[index]) {
          labelLink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].label;
        } // // MainMetricA
        // // unitA
        // unitA = link.mainMetric.unit;
        // if (!link.mainMetric.unit) {
        //   unitA = gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.unit;
        // };
        // if (!gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.unit) {
        //   unitA = this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.unit;
        // };
        // // formatA
        // formatA = link.mainMetric.format;
        // if (!link.mainMetric.format) {
        //   formatA = gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.format;
        // };
        // if (!gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.format) {
        //   formatA = this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.format;
        // };
        // // keyA
        // keyA = link.mainMetric.key;
        // if (!link.mainMetric.key) {
        //   keyA = gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.key;
        // };
        // if (!gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.key) {
        //   keyA = this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.key;
        // };
        // // keyValueA
        // keyValueA = link.mainMetric.keyValue;
        // if (!link.mainMetric.keyValue) {
        //   keyValueA = gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.keyValue;
        // };
        // if (!gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.keyValue) {
        //   keyValueA = this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.keyValue;
        // };
        // // manageValueA
        // manageValueA = link.mainMetric.manageValue;
        // console.log(manageValueA);
        // if (!link.mainMetric.manageValue) {
        //   manageValueA = gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.manageValue;
        // };
        // if (!gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.manageValue) {
        //   manageValueA = this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.manageValue;
        // };
        // mainMetricALink.push({
        //   unit: unitA,
        //   format: formatA,
        //   key: keyA,
        //   keyValue: keyValueA,
        //   filter: filterLink[index],
        //   refId: gabaritFileTmp.queryID,
        //   expr: '',
        //   returnQuery: [],
        //   manageValue: manageValueA,
        // });


        mainMetricALink.push({
          key: link.mainMetric.key,
          unit: link.mainMetric.unit,
          format: link.mainMetric.format,
          keyValue: '',
          filter: filterLink[index],
          refId: gabaritFileTmp.queryID,
          expr: '',
          returnQuery: [],
          manageValue: link.mainMetric.manageValue
        });

        if (!mainMetricALink[index].unit) {
          mainMetricALink[index] = {
            key: gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.key,
            unit: gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.unit,
            format: gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.format,
            keyValue: '',
            filter: filterLink[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.manageValue
          };
        }

        if (!mainMetricALink[index].unit) {
          mainMetricALink[index] = {
            key: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.key,
            unit: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.unit,
            format: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.format,
            keyValue: '',
            filter: filterLink[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.manageValue
          };
        }

        link.metrics.forEach(function (element) {
          metricALink[index].push({
            key: element.key,
            unit: element.unit,
            format: element.format,
            keyValue: '',
            filter: filterLink[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: element.manageValue
          });
        });
        mainMetricBLink.push({
          key: link.mainMetricB.key,
          unit: link.mainMetricB.unit,
          format: link.mainMetricB.format,
          keyValue: '',
          filter: filterLink[index],
          refId: gabaritFileTmp.queryID,
          expr: '',
          returnQuery: [],
          manageValue: link.mainMetricB.manageValue
        });

        if (!mainMetricBLink[index].unit) {
          mainMetricBLink[index] = {
            key: gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.key,
            unit: gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.unit,
            format: gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.format,
            keyValue: '',
            filter: filterLink[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: gabaritFileTmp.templateGabaritLinkDefault[0].mainMetric.manageValue
          };
        }

        if (!mainMetricBLink[index].unit) {
          mainMetricBLink[index] = {
            key: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.key,
            unit: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.unit,
            format: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.format,
            keyValue: '',
            filter: filterLink[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].mainMetric.manageValue
          };
        }

        link.metricsB.forEach(function (element) {
          metricBLink[index].push({
            key: element.key,
            unit: element.unit,
            format: element.format,
            keyValue: '',
            filter: filterLink[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: element.manageValue
          });
        });
        valueMetricALink.push(link.valueMainMetricA);

        if (!valueMetricALink[index]) {
          valueMetricALink[index] = gabaritFileTmp.templateGabaritLinkDefault[0].valueMainMetricA;
        }

        if (!valueMetricALink[index]) {
          valueMetricALink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].valueMainMetricA;
        }

        valueMetricBLink.push(link.valueMainMetricB);

        if (!valueMetricBLink[index]) {
          valueMetricBLink[index] = gabaritFileTmp.templateGabaritLinkDefault[0].valueMainMetricB;
        }

        if (!valueMetricBLink[index]) {
          valueMetricBLink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].valueMainMetricB;
        }

        sizeLink.push(link.size);

        if (!sizeLink[index]) {
          sizeLink[index] = gabaritFileTmp.templateGabaritLinkDefault[0].size;
        }

        if (!sizeLink[index]) {
          sizeLink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].size;
        }

        if (link.colorCoordinateA.length !== 0) {
          colorALink.push(link.colorCoordinateA);
          colorBLink.push(link.colorCoordinateB);
        } else {
          colorALink.push(gabaritFileTmp.globalGabarit.defaultColor);
          colorBLink.push(gabaritFileTmp.globalGabarit.defaultColor);
        }

        if (!colorALink[index]) {
          colorALink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].colorCoordinateA;
        }

        if (!colorBLink[index]) {
          colorBLink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].colorCoordinateB;
        }

        tmpToolTipA = {
          label: link.positionParameter.tooltipA.label,
          value: link.positionParameter.tooltipA.value
        };

        if (!tmpToolTipA.value || !tmpToolTipA.label) {
          tmpToolTipA = {
            label: gabaritFileTmp.templateGabaritLinkDefault[0].positionParameter.tooltipA.label,
            value: gabaritFileTmp.templateGabaritLinkDefault[0].positionParameter.tooltipA.value
          };
        }

        if (!tmpToolTipA.value || !tmpToolTipA.label) {
          tmpToolTipA = {
            label: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].positionParameter.tooltipA.label,
            value: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].positionParameter.tooltipA.value
          };
        }

        tmpToolTipB = {
          label: link.positionParameter.tooltipB.label,
          value: link.positionParameter.tooltipB.value
        };

        if (!tmpToolTipB.value || !tmpToolTipB.label) {
          tmpToolTipB = {
            label: gabaritFileTmp.templateGabaritLinkDefault[0].positionParameter.tooltipB.label,
            value: gabaritFileTmp.templateGabaritLinkDefault[0].positionParameter.tooltipB.value
          };
        }

        if (!tmpToolTipB.value || !tmpToolTipB.label) {
          tmpToolTipB = {
            label: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].positionParameter.tooltipB.label,
            value: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].positionParameter.tooltipB.value
          };
        }

        tmpLabelAPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(link.positionParameter.xylabelA);

        if (!tmpLabelAPosition) {
          tmpLabelAPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritLinkDefault[0].positionParameter.xylabelA);
        }

        if (!tmpLabelAPosition) {
          tmpLabelAPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].positionParameter.xylabelA);
        }

        tmpLabelBPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(link.positionParameter.xylabelB);

        if (!tmpLabelBPosition) {
          tmpLabelBPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritLinkDefault[0].positionParameter.xylabelB);
        }

        if (!tmpLabelBPosition) {
          tmpLabelBPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].positionParameter.xylabelB);
        }

        positionParameterLink.push(new Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_5__["PositionParameterClass"](tmpLabelAPosition.x, tmpLabelAPosition.y, tmpLabelBPosition.x, tmpLabelBPosition.y, tmpToolTipA, tmpToolTipB));
        linkURLLink.push(new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_6__["LinkURLClass"](link.linkURL.followLink, link.linkURL.hoveringTooltipLink, link.linkURL.hoveringTooltipText));

        if (!linkURLLink[index].followLink) {
          linkURLLink[index] = new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_6__["LinkURLClass"](gabaritFileTmp.templateGabaritLinkDefault[0].linkURL.followLink, gabaritFileTmp.templateGabaritLinkDefault[0].linkURL.hoveringTooltipLink, gabaritFileTmp.templateGabaritLinkDefault[0].linkURL.hoveringTooltipText);
        }

        if (!linkURLLink[index].followLink) {
          linkURLLink[index] = new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_6__["LinkURLClass"](_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].linkURL.followLink, _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].linkURL.hoveringTooltipLink, _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].linkURL.hoveringTooltipText);
        }

        orientationLink.push(link.orientationLink);

        if (!orientationLink[index]) {
          orientationLink[index] = gabaritFileTmp.templateGabaritLinkDefault[0].orientationLink;
        }

        if (!orientationLink[index]) {
          orientationLink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].orientationLink;
        }

        pointInLink.push(link.pointIn);

        if (!pointInLink[index]) {
          pointInLink[index] = gabaritFileTmp.templateGabaritLinkDefault[0].pointIn;
        }

        if (!pointInLink[index]) {
          pointInLink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].pointIn;
        }

        pointOutLink.push(link.pointOut);

        if (!pointOutLink[index]) {
          pointOutLink[index] = gabaritFileTmp.templateGabaritLinkDefault[0].pointOut;
        }

        if (!pointOutLink[index]) {
          pointOutLink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].pointOut;
        }

        regionInLink.push(link.regionIn);

        if (!regionInLink[index]) {
          regionInLink[index] = gabaritFileTmp.templateGabaritLinkDefault[0].regionIn;
        }

        if (!regionInLink[index]) {
          regionInLink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].regionIn;
        }

        regionOutLink.push(link.regionOut);

        if (!regionOutLink[index]) {
          regionOutLink[index] = gabaritFileTmp.templateGabaritLinkDefault[0].regionOut;
        }

        if (!regionOutLink[index]) {
          regionOutLink[index] = _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].regionOut;
        }

        isIncurvedLink.push({
          label: link.isIncurved.label,
          value: _this.transformStringToBoolean(link.isIncurved.value || '')
        });

        if (((_a = link.isIncurved.label) === null || _a === void 0 ? void 0 : _a.toLowerCase()) !== 'yes' && ((_b = link.isIncurved.label) === null || _b === void 0 ? void 0 : _b.toLowerCase()) !== 'no' || link.isIncurved.value !== 'true' && link.isIncurved.value !== 'false') {
          console.log('level1');
          isIncurvedLink[index] = {
            label: (_c = gabaritFileTmp.templateGabaritLinkDefault[0].isIncurved.label) === null || _c === void 0 ? void 0 : _c.toLowerCase(),
            value: _this.transformStringToBoolean(gabaritFileTmp.templateGabaritLinkDefault[0].isIncurved.value || '')
          };
        }

        if ((((_d = link.isIncurved.label) === null || _d === void 0 ? void 0 : _d.toLowerCase()) !== 'yes' && ((_e = link.isIncurved.label) === null || _e === void 0 ? void 0 : _e.toLowerCase()) !== 'no' || link.isIncurved.value !== 'true' && link.isIncurved.value !== 'false') && ((_f = gabaritFileTmp.templateGabaritLinkDefault[0].isIncurved.label) === null || _f === void 0 ? void 0 : _f.toLowerCase()) !== 'yes' && ((_g = gabaritFileTmp.templateGabaritLinkDefault[0].isIncurved.label) === null || _g === void 0 ? void 0 : _g.toLowerCase()) !== 'no' || (((_h = link.isIncurved.label) === null || _h === void 0 ? void 0 : _h.toLowerCase()) !== 'yes' && ((_j = link.isIncurved.label) === null || _j === void 0 ? void 0 : _j.toLowerCase()) !== 'no' || link.isIncurved.value !== 'true' && link.isIncurved.value !== 'false') && gabaritFileTmp.templateGabaritLinkDefault[0].isIncurved.value !== 'true' && gabaritFileTmp.templateGabaritLinkDefault[0].isIncurved.value !== 'false') {
          isIncurvedLink[index] = {
            label: _this.props.options.gabaritDefault.templateGabaritLinkDefault[0].isIncurved.label,
            value: _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritLinkDefault[0].isIncurved.value || '')
          };
        }

        isIncurvedLink[index] = _this.transformWithUpperCase(isIncurvedLink[index]); // if (!isIncurvedLink[index].label || !isIncurvedLink[index].value) {
        //   isIncurvedLink[index] = {
        //     label: gabaritFileTmp.templateGabaritLinkDefault[0].isIncurved.label,
        //     value: this.transformStringToBoolean(gabaritFileTmp.templateGabaritLinkDefault[0].isIncurved.value || ''),
        //   };
        // }
        // if (!isIncurvedLink[index].label || !isIncurvedLink[index].value) {
        //   isIncurvedLink[index] = {
        //     label: this.props.options.gabaritDefault.templateGabaritLinkDefault[0].isIncurved.label,
        //     value: this.transformStringToBoolean(this.props.options.gabaritDefault.templateGabaritLinkDefault[0].isIncurved.value || ''),
        //   };
        // }
      });
      newID = 0;

      _this.props.options.arrayOrientedLinks.forEach(function (element) {
        newID++;
      });

      labelCoordX = [];
      labelCoordY = [];
      var labelCoordA = [];
      posALink.forEach(function (pos, index) {
        if (gabaritFileTmp.templateGabaritLink[index].labelfix === 'false') {
          _this.props.data.series.forEach(function (element) {
            var e_5, _a, e_6, _b, e_7, _c;

            var _d;

            if (element.refId === mainMetricALink[index].refId) {
              var remove = (_d = element.name) === null || _d === void 0 ? void 0 : _d.split('{');
              var nameQuery = remove[1].split(',').map(function (value) {
                return value.replace(/[\"{}]/gm, '');
              }) || [];
              var valid = false;
              var res = 0;
              var filters = mainMetricPoint[index].filter;

              try {
                for (var nameQuery_3 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(nameQuery), nameQuery_3_1 = nameQuery_3.next(); !nameQuery_3_1.done; nameQuery_3_1 = nameQuery_3.next()) {
                  var aQuery = nameQuery_3_1.value;
                  var keyValue = aQuery.split('=');

                  try {
                    for (var filters_2 = (e_6 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(filters)), filters_2_1 = filters_2.next(); !filters_2_1.done; filters_2_1 = filters_2.next()) {
                      var filter = filters_2_1.value;

                      if (keyValue.length === 2) {
                        if (keyValue[0] === filter.label && keyValue[1] === filter.value) {
                          res++;
                        }
                      }
                    }
                  } catch (e_6_1) {
                    e_6 = {
                      error: e_6_1
                    };
                  } finally {
                    try {
                      if (filters_2_1 && !filters_2_1.done && (_b = filters_2["return"])) _b.call(filters_2);
                    } finally {
                      if (e_6) throw e_6.error;
                    }
                  }
                }
              } catch (e_5_1) {
                e_5 = {
                  error: e_5_1
                };
              } finally {
                try {
                  if (nameQuery_3_1 && !nameQuery_3_1.done && (_a = nameQuery_3["return"])) _a.call(nameQuery_3);
                } finally {
                  if (e_5) throw e_5.error;
                }
              }

              if (res === filters.length) {
                valid = true;
              }

              if (valid) {
                try {
                  for (var nameQuery_4 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(nameQuery), nameQuery_4_1 = nameQuery_4.next(); !nameQuery_4_1.done; nameQuery_4_1 = nameQuery_4.next()) {
                    var oneQuery = nameQuery_4_1.value;

                    if (nameQuery && nameQuery.length > 0) {
                      var keyValue = oneQuery.split('=');

                      if (keyValue[0] === pos.x) {
                        labelCoordX.push(keyValue[1]);
                      }

                      if (keyValue[0] === pos.y) {
                        labelCoordY.push(keyValue[1]);
                      }
                    }
                  }
                } catch (e_7_1) {
                  e_7 = {
                    error: e_7_1
                  };
                } finally {
                  try {
                    if (nameQuery_4_1 && !nameQuery_4_1.done && (_c = nameQuery_4["return"])) _c.call(nameQuery_4);
                  } finally {
                    if (e_7) throw e_7.error;
                  }
                }
              }
            }
          });

          if (labelCoordX.length > labelCoordY.length) {
            labelCoordX.forEach(function (element, index) {
              if (!labelCoordX[index]) {
                labelCoordX[index] = pos.x;
              }

              if (!labelCoordY[index]) {
                labelCoordY[index] = pos.y;
              }
            });
          } else {
            labelCoordY.forEach(function (element, index) {
              if (!labelCoordX[index]) {
                labelCoordX[index] = pos.x;
              }

              if (!labelCoordY[index]) {
                labelCoordY[index] = pos.y;
              }
            });
          }
        }

        if (labelCoordX.length > 0) {
          labelCoordX.forEach(function (element, index) {
            labelCoordA[index].push({
              x: labelCoordX[index],
              y: labelCoordY[index]
            });
          });
        } else {
          labelCoordA[index] = [];
        }
      });
      labelCoordX = [];
      labelCoordY = [];
      var labelCoordB = [];
      posALink.forEach(function (pos, index) {
        if (gabaritFileTmp.templateGabaritLink[index].labelfix === 'false') {
          _this.props.data.series.forEach(function (element) {
            var e_8, _a, e_9, _b, e_10, _c;

            var _d;

            if (element.refId === mainMetricBLink[index].refId) {
              var remove = (_d = element.name) === null || _d === void 0 ? void 0 : _d.split('{');
              var nameQuery = remove[1].split(',').map(function (value) {
                return value.replace(/[\"{}]/gm, '');
              }) || [];
              var valid = false;
              var res = 0;
              var filters = mainMetricPoint[index].filter;

              try {
                for (var nameQuery_5 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(nameQuery), nameQuery_5_1 = nameQuery_5.next(); !nameQuery_5_1.done; nameQuery_5_1 = nameQuery_5.next()) {
                  var aQuery = nameQuery_5_1.value;
                  var keyValue = aQuery.split('=');

                  try {
                    for (var filters_3 = (e_9 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(filters)), filters_3_1 = filters_3.next(); !filters_3_1.done; filters_3_1 = filters_3.next()) {
                      var filter = filters_3_1.value;

                      if (keyValue.length === 2) {
                        if (keyValue[0] === filter.label && keyValue[1] === filter.value) {
                          res++;
                        }
                      }
                    }
                  } catch (e_9_1) {
                    e_9 = {
                      error: e_9_1
                    };
                  } finally {
                    try {
                      if (filters_3_1 && !filters_3_1.done && (_b = filters_3["return"])) _b.call(filters_3);
                    } finally {
                      if (e_9) throw e_9.error;
                    }
                  }
                }
              } catch (e_8_1) {
                e_8 = {
                  error: e_8_1
                };
              } finally {
                try {
                  if (nameQuery_5_1 && !nameQuery_5_1.done && (_a = nameQuery_5["return"])) _a.call(nameQuery_5);
                } finally {
                  if (e_8) throw e_8.error;
                }
              }

              if (res === filters.length) {
                valid = true;
              }

              if (valid) {
                try {
                  for (var nameQuery_6 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(nameQuery), nameQuery_6_1 = nameQuery_6.next(); !nameQuery_6_1.done; nameQuery_6_1 = nameQuery_6.next()) {
                    var oneQuery = nameQuery_6_1.value;

                    if (nameQuery && nameQuery.length > 0) {
                      var keyValue = oneQuery.split('=');

                      if (keyValue[0] === pos.x) {
                        labelCoordX.push(keyValue[1]);
                      }

                      if (keyValue[0] === pos.y) {
                        labelCoordY.push(keyValue[1]);
                      }
                    }
                  }
                } catch (e_10_1) {
                  e_10 = {
                    error: e_10_1
                  };
                } finally {
                  try {
                    if (nameQuery_6_1 && !nameQuery_6_1.done && (_c = nameQuery_6["return"])) _c.call(nameQuery_6);
                  } finally {
                    if (e_10) throw e_10.error;
                  }
                }
              }
            }
          });

          if (labelCoordX.length > labelCoordY.length) {
            labelCoordX.forEach(function (element, index) {
              if (!labelCoordX[index]) {
                labelCoordX[index] = pos.x;
              }

              if (!labelCoordY[index]) {
                labelCoordY[index] = pos.y;
              }
            });
          } else {
            labelCoordY.forEach(function (element, index) {
              if (!labelCoordX[index]) {
                labelCoordX[index] = pos.x;
              }

              if (!labelCoordY[index]) {
                labelCoordY[index] = pos.y;
              }
            });
          }
        }

        if (labelCoordX.length > 0) {
          labelCoordX.forEach(function (element, index) {
            labelCoordB[index].push({
              x: labelCoordX[index],
              y: labelCoordY[index]
            });
          });
        } else {
          labelCoordB[index] = [];
        }
      });
      labelCoordX = [];
      labelCoordY = [];
      var labelCoordC = [];
      posALink.forEach(function (pos, index) {
        if (gabaritFileTmp.templateGabaritLink[index].labelfix === 'false') {
          _this.props.data.series.forEach(function (element) {
            var e_11, _a;

            var _b;

            var nameQuery = ((_b = element.name) === null || _b === void 0 ? void 0 : _b.split(',').map(function (value) {
              return value.replace(/[\"{}]/gm, '');
            })) || [];

            try {
              for (var nameQuery_7 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(nameQuery), nameQuery_7_1 = nameQuery_7.next(); !nameQuery_7_1.done; nameQuery_7_1 = nameQuery_7.next()) {
                var oneQuery = nameQuery_7_1.value;

                if (nameQuery && nameQuery.length > 0) {
                  var keyValue = oneQuery.split('=');

                  if (keyValue[0] === pos.x) {
                    labelCoordX.push(keyValue[1]);
                  }

                  if (keyValue[0] === pos.y) {
                    labelCoordY.push(keyValue[1]);
                  }
                }
              }
            } catch (e_11_1) {
              e_11 = {
                error: e_11_1
              };
            } finally {
              try {
                if (nameQuery_7_1 && !nameQuery_7_1.done && (_a = nameQuery_7["return"])) _a.call(nameQuery_7);
              } finally {
                if (e_11) throw e_11.error;
              }
            }
          });

          if (labelCoordX.length > labelCoordY.length) {
            labelCoordX.forEach(function (element, index) {
              if (!labelCoordX[index]) {
                labelCoordX[index] = pos.x;
              }

              if (!labelCoordY[index]) {
                labelCoordY[index] = pos.y;
              }
            });
          } else {
            labelCoordY.forEach(function (element, index) {
              if (!labelCoordX[index]) {
                labelCoordX[index] = pos.x;
              }

              if (!labelCoordY[index]) {
                labelCoordY[index] = pos.y;
              }
            });
          }
        }

        if (labelCoordX.length > 0) {
          labelCoordX.forEach(function (element, index) {
            labelCoordC[index].push({
              x: labelCoordX[index],
              y: labelCoordY[index]
            });
          });
        } else {
          labelCoordC[index] = [];
        }
      });
      labelCoordA.forEach(function (element, coordindex) {
        var e_12, _a;

        var pointInLinkWithId = '';
        var labelPointIn = pointInLink[coordindex].split('_')[0];

        _this.props.options.arrayPoints.forEach(function (point, index) {
          if (point.label.startsWith(labelPointIn)) {
            pointInLinkWithId = labelPointIn + '_' + index;
          }
        });

        var pointOutLinkWithId = '';
        var labelPointOut = pointOutLink[coordindex].split('_')[0];

        _this.props.options.arrayPoints.forEach(function (point, index) {
          if (point.label.startsWith(labelPointOut)) {
            pointOutLinkWithId = labelPointOut + '_' + index;
          }
        });

        var regionInLinkWithId = '';
        var labelRegionIn = regionInLink[coordindex].split('_')[0];

        _this.props.options.regionCoordinateSpace.forEach(function (region, index) {
          if (region.label.startsWith(labelPointIn)) {
            pointInLinkWithId = labelRegionIn + '_' + index;
          }
        });

        var regionOutLinkWithId = '';
        var labelRegionOut = regionOutLink[coordindex].split('_')[0];

        _this.props.options.regionCoordinateSpace.forEach(function (region, index) {
          if (region.label.startsWith(labelPointOut)) {
            pointOutLinkWithId = labelRegionOut + '_' + index;
          }
        });

        if (element.length > 0) {
          var _loop_2 = function _loop_2(pos) {
            filterLink.forEach(function (element, index) {
              var pointInLinkWithId = pointInLink[index];
              var defaultPositionAX = ((parseInt(pos.x, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
              var defaultPositionBX = ((parseInt(labelCoordB[coordindex][index].x, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
              var defaultPositionCX = ((parseInt(labelCoordC[coordindex][index].x, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
              var defaultPositionAY = ((parseInt(pos.y, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
              var defaultPositionBY = ((parseInt(labelCoordB[coordindex][index].y, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
              var defaultPositionCY = ((parseInt(labelCoordC[coordindex][index].y, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
              var labelPointIn = pointInLink[index].split('_')[0];

              _this.props.options.arrayPoints.forEach(function (point, index) {
                if (point.label.startsWith(labelPointIn)) {
                  pointInLinkWithId = labelPointIn + '_' + index;
                }
              });

              var labelPointOut = pointOutLink[index].split('_')[0];

              _this.props.options.arrayPoints.forEach(function (point, index) {
                if (point.label.startsWith(labelPointOut)) {
                  pointOutLinkWithId = labelPointOut + '_' + index;
                }
              });

              var regionInLinkWithId = '';
              var labelRegionIn = regionInLink[index].split('_')[0];

              _this.props.options.regionCoordinateSpace.forEach(function (region, index) {
                if (region.label.startsWith(labelPointIn)) {
                  pointInLinkWithId = labelRegionIn + '_' + index;
                }
              });

              var regionOutLinkWithId = '';
              var labelRegionOut = regionOutLink[index].split('_')[0];

              _this.props.options.regionCoordinateSpace.forEach(function (region, index) {
                if (region.label.startsWith(labelPointOut)) {
                  pointOutLinkWithId = labelRegionOut + '_' + index;
                }
              });

              var maA = metricALink.length;
              var maB = metricBLink.length;

              if (maA > 0 && maB > 0) {
                var toLoad = new Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_4__["OrientedLinkClass"](newID + 1, linkURLLink[index], metaLink[index], JSON.parse(JSON.stringify(lowerLimit)), labelLink[index] + '_' + newID, JSON.parse(JSON.stringify(textObj)), _this.addFilterDynamic(mainMetricALink[index], posALink[index], pos), metricALink[index], colorMode, traceBack, traceBorder, positionParameterLink[index], nameLink[index], orientationLink[index], sizeLink[index], pos.x, pos.y, colorALink[index], labelCoordB[coordindex][index].x, labelCoordB[coordindex][index].y, colorBLink[index], valueMetricALink[index], valueMetricBLink[index], pointInLinkWithId, pointOutLinkWithId, regionInLinkWithId, regionOutLinkWithId, _this.props.options.zIndexOrientedLink + 1, labelCoordC[coordindex][index].x, labelCoordC[coordindex][index].y, isIncurvedLink[index], _this.addFilterDynamic(mainMetricBLink[index], posALink[index], pos), metricBLink[index], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionAX, defaultPositionAY, defaultPositionBX, defaultPositionBY, defaultPositionCX, defaultPositionCY);
                upId = _this.checkCoordinateFilterLink(toLoad, _this.props);

                if (upId) {
                  newID++;
                }
              }

              if (!(maA > 0) && maB > 0) {
                var toLoad = new Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_4__["OrientedLinkClass"](newID + 1, linkURLLink[index], metaLink[index], JSON.parse(JSON.stringify(lowerLimit)), labelLink[index] + '_' + newID, JSON.parse(JSON.stringify(textObj)), _this.addFilterDynamic(mainMetricALink[index], posALink[index], pos), [], colorMode, traceBack, traceBorder, positionParameterLink[index], nameLink[index], orientationLink[index], sizeLink[index], pos.x, pos.y, colorALink[index], labelCoordB[coordindex][index].x, labelCoordB[coordindex][index].y, colorBLink[index], valueMetricALink[index], valueMetricBLink[index], pointInLinkWithId, pointOutLinkWithId, regionInLinkWithId, regionOutLinkWithId, _this.props.options.zIndexOrientedLink + 1, labelCoordC[coordindex][index].x, labelCoordC[coordindex][index].y, isIncurvedLink[index], _this.addFilterDynamic(mainMetricBLink[index], posALink[index], pos), metricBLink[index], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionAX, defaultPositionAY, defaultPositionBX, defaultPositionBY, defaultPositionCX, defaultPositionCY);
                upId = _this.checkCoordinateFilterLink(toLoad, _this.props);

                if (upId) {
                  newID++;
                }
              } else if (maA > 0 && !(maB > 0)) {
                var toLoad = new Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_4__["OrientedLinkClass"](newID + 1, linkURLLink[index], metaLink[index], JSON.parse(JSON.stringify(lowerLimit)), labelLink[index] + '_' + newID, JSON.parse(JSON.stringify(textObj)), _this.addFilterDynamic(mainMetricALink[index], posALink[index], pos), metricALink[index], colorMode, traceBack, traceBorder, positionParameterLink[index], nameLink[index], orientationLink[index], sizeLink[index], pos.x, pos.y, colorALink[index], labelCoordB[coordindex][index].x, labelCoordB[coordindex][index].y, colorBLink[index], valueMetricALink[index], valueMetricBLink[index], pointInLinkWithId, pointOutLinkWithId, regionInLinkWithId, regionOutLinkWithId, _this.props.options.zIndexOrientedLink + 1, labelCoordC[coordindex][index].x, labelCoordC[coordindex][index].y, isIncurvedLink[index], _this.addFilterDynamic(mainMetricBLink[index], posALink[index], pos), [], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionAX, defaultPositionAY, defaultPositionBX, defaultPositionBY, defaultPositionCX, defaultPositionCY);
                upId = _this.checkCoordinateFilterLink(toLoad, _this.props);

                if (upId) {
                  newID++;
                }
              } else {
                var toLoad = new Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_4__["OrientedLinkClass"](newID + 1, linkURLLink[index], metaLink[index], JSON.parse(JSON.stringify(lowerLimit)), labelLink[index] + '_' + newID, JSON.parse(JSON.stringify(textObj)), _this.addFilterDynamic(mainMetricALink[index], posALink[index], pos), [], colorMode, traceBack, traceBorder, positionParameterLink[index], nameLink[index], orientationLink[index], sizeLink[index], pos.x, pos.y, colorALink[index], labelCoordB[coordindex][index].x, labelCoordB[coordindex][index].y, colorBLink[index], valueMetricALink[index], valueMetricBLink[index], pointInLinkWithId, pointOutLinkWithId, regionInLinkWithId, regionOutLinkWithId, _this.props.options.zIndexOrientedLink + 1, labelCoordC[coordindex][index].x, labelCoordC[coordindex][index].y, isIncurvedLink[index], _this.addFilterDynamic(mainMetricBLink[index], posALink[index], pos), [], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionAX, defaultPositionAY, defaultPositionBX, defaultPositionBY, defaultPositionCX, defaultPositionCY);
                upId = _this.checkCoordinateFilterLink(toLoad, _this.props);

                if (upId) {
                  newID++;
                }
              }
            });
          };

          try {
            for (var element_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(element), element_1_1 = element_1.next(); !element_1_1.done; element_1_1 = element_1.next()) {
              var pos = element_1_1.value;

              _loop_2(pos);
            } /////////////////

          } catch (e_12_1) {
            e_12 = {
              error: e_12_1
            };
          } finally {
            try {
              if (element_1_1 && !element_1_1.done && (_a = element_1["return"])) _a.call(element_1);
            } finally {
              if (e_12) throw e_12.error;
            }
          }
        } else {
          var defaultPositionAX = ((parseInt(posALink[coordindex].x, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
          var defaultPositionBX = ((parseInt(posBLink[coordindex].x, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
          var defaultPositionCX = ((parseInt(posCLink[coordindex].x, 10) - xMinInitialSpace) / widthInitialSpace * widthBackground).toString();
          var defaultPositionAY = ((parseInt(posALink[coordindex].y, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
          var defaultPositionBY = ((parseInt(posBLink[coordindex].y, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
          var defaultPositionCY = ((parseInt(posCLink[coordindex].y, 10) - yMinInitialSpace) / heightInitialSpace * heightBackground).toString();
          var maA = metricALink.length;
          var maB = metricBLink.length;

          if (maA > 0 && maB > 0) {
            var toLoad = new Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_4__["OrientedLinkClass"](newID + 1, linkURLLink[coordindex], metaLink[coordindex], JSON.parse(JSON.stringify(lowerLimit)), labelLink[coordindex] + '_' + newID, JSON.parse(JSON.stringify(textObj)), mainMetricALink[coordindex], metricALink[coordindex], colorMode, traceBack, traceBorder, positionParameterLink[coordindex], nameLink[coordindex], orientationLink[coordindex], sizeLink[coordindex], posALink[coordindex].x, posALink[coordindex].y, colorALink[coordindex], posBLink[coordindex].x, posBLink[coordindex].y, colorBLink[coordindex], valueMetricALink[coordindex], valueMetricBLink[coordindex], pointInLinkWithId, pointOutLinkWithId, regionInLinkWithId, regionOutLinkWithId, _this.props.options.zIndexOrientedLink + 1, posCLink[coordindex].x, posCLink[coordindex].y, isIncurvedLink[coordindex], mainMetricBLink[coordindex], metricBLink[coordindex], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionAX, defaultPositionAY, defaultPositionBX, defaultPositionBY, defaultPositionCX, defaultPositionCY);
            upId = _this.checkCoordinateFilterLink(toLoad, _this.props);

            if (upId) {
              newID++;
            }
          }

          if (!(maA > 0) && maB > 0) {
            var toLoad = new Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_4__["OrientedLinkClass"](newID + 1, linkURLLink[coordindex], metaLink[coordindex], JSON.parse(JSON.stringify(lowerLimit)), labelLink[coordindex] + '_' + newID, JSON.parse(JSON.stringify(textObj)), mainMetricALink[coordindex], [], colorMode, traceBack, traceBorder, positionParameterLink[coordindex], nameLink[coordindex], orientationLink[coordindex], sizeLink[coordindex], posALink[coordindex].x, posALink[coordindex].y, colorALink[coordindex], posBLink[coordindex].x, posBLink[coordindex].y, colorBLink[coordindex], valueMetricALink[coordindex], valueMetricBLink[coordindex], pointInLinkWithId, pointOutLinkWithId, regionInLinkWithId, regionOutLinkWithId, _this.props.options.zIndexOrientedLink + 1, posCLink[coordindex].x, posCLink[coordindex].y, isIncurvedLink[coordindex], mainMetricBLink[coordindex], metricBLink[coordindex], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionAX, defaultPositionAY, defaultPositionBX, defaultPositionBY, defaultPositionCX, defaultPositionCY);
            upId = _this.checkCoordinateFilterLink(toLoad, _this.props);

            if (upId) {
              newID++;
            }
          } else if (maA > 0 && !(maB > 0)) {
            var toLoad = new Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_4__["OrientedLinkClass"](newID + 1, linkURLLink[coordindex], metaLink[coordindex], JSON.parse(JSON.stringify(lowerLimit)), labelLink[coordindex] + '_' + newID, JSON.parse(JSON.stringify(textObj)), mainMetricALink[coordindex], metricALink[coordindex], colorMode, traceBack, traceBorder, positionParameterLink[coordindex], nameLink[coordindex], orientationLink[coordindex], sizeLink[coordindex], posALink[coordindex].x, posALink[coordindex].y, colorALink[coordindex], posBLink[coordindex].x, posBLink[coordindex].y, colorBLink[coordindex], valueMetricALink[coordindex], valueMetricBLink[coordindex], pointInLinkWithId, pointOutLinkWithId, regionInLinkWithId, regionOutLinkWithId, _this.props.options.zIndexOrientedLink + 1, posCLink[coordindex].x, posCLink[coordindex].y, isIncurvedLink[coordindex], mainMetricBLink[coordindex], [], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionAX, defaultPositionAY, defaultPositionBX, defaultPositionBY, defaultPositionCX, defaultPositionCY);
            upId = _this.checkCoordinateFilterLink(toLoad, _this.props);

            if (upId) {
              newID++;
            }
          } else {
            var toLoad = new Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_4__["OrientedLinkClass"](newID + 1, linkURLLink[coordindex], metaLink[coordindex], JSON.parse(JSON.stringify(lowerLimit)), labelLink[coordindex] + '_' + newID, JSON.parse(JSON.stringify(textObj)), mainMetricALink[coordindex], [], colorMode, traceBack, traceBorder, positionParameterLink[coordindex], nameLink[coordindex], orientationLink[coordindex], sizeLink[coordindex], posALink[coordindex].x, posALink[coordindex].y, colorALink[coordindex], posBLink[coordindex].x, posBLink[coordindex].y, colorBLink[coordindex], valueMetricALink[coordindex], valueMetricBLink[coordindex], pointInLinkWithId, pointOutLinkWithId, regionInLinkWithId, regionOutLinkWithId, _this.props.options.zIndexOrientedLink + 1, posCLink[coordindex].x, posCLink[coordindex].y, isIncurvedLink[coordindex], mainMetricBLink[coordindex], [], widthInitialSpace.toString(), heightInitialSpace.toString(), defaultPositionAX, defaultPositionAY, defaultPositionBX, defaultPositionBY, defaultPositionCX, defaultPositionCY);
            upId = _this.checkCoordinateFilterLink(toLoad, _this.props);

            if (upId) {
              newID++;
            }
          }
        }
      });
      /*  */
      //Template region

      var filterRegion = []; //

      var posRegion = []; //

      var metaRegion = []; //

      var labelRegion = []; //

      var positionParameterRegion = []; //

      var mainMetricRegion = []; //

      var metricRegion = []; //

      var linkURLRegion = [];
      var idSVGRegion = [];
      var modeRegion = [];
      var imgRegion = [];
      var orientedLinkAssociate = [];
      gabaritFileTmp.templateGabaritRegion.forEach(function (region, index) {
        if (region.labelfix === 'false') {
          posRegion.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParseRegion"])(region.xylabel));

          if (!posRegion[index].xMax || !posRegion[index].xMin || !posRegion[index].yMax || !posRegion[index].yMin) {
            posRegion[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParseRegion"])(gabaritFileTmp.templateGabaritRegionDefault[0].xylabel);
          }

          if (!posRegion[index].xMax || !posRegion[index].xMin || !posRegion[index].yMax || !posRegion[index].yMin) {
            posRegion[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParseRegion"])(_this.props.options.gabaritDefault.templateGabaritRegionDefault[0].xylabel);
          }
        } else {
          posRegion.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParseRegion"])(region.xylabelfix));

          if (!posRegion[index].xMax || !posRegion[index].xMin || !posRegion[index].yMax || !posRegion[index].yMin) {
            posRegion[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParseRegion"])(gabaritFileTmp.templateGabaritRegionDefault[0].xylabelfix);
          }

          if (!posRegion[index].xMax || !posRegion[index].xMin || !posRegion[index].yMax || !posRegion[index].yMin) {
            posRegion[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParseRegion"])(_this.props.options.gabaritDefault.templateGabaritRegionDefault[0].xylabelfix);
          }
        }

        filterRegion.push(Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["filterParseRegion"])(region.filtered));

        if (!filterRegion[index]) {
          filterRegion[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["filterParseRegion"])(gabaritFileTmp.templateGabaritRegionDefault[0].filtered);
        }

        if (!filterRegion[index]) {
          filterRegion[index] = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["filterParseRegion"])(_this.props.options.gabaritDefault.templateGabaritRegionDefault[0].filtered);
        }

        linkURLRegion.push(new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_6__["LinkURLClass"](region.linkURL.followLink, region.linkURL.hoveringTooltipLink, region.linkURL.hoveringTooltipTex));

        if (!linkURLRegion[index].followLink) {
          linkURLRegion[index] = new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_6__["LinkURLClass"](gabaritFileTmp.templateGabaritRegionDefault[0].linkURL.followLink, gabaritFileTmp.templateGabaritRegionDefault[0].linkURL.hoveringTooltipLink, gabaritFileTmp.templateGabaritRegionDefault[0].linkURL.hoveringTooltipText);
        }

        if (!linkURLRegion[index].followLink) {
          linkURLRegion[index] = new Models_LinkURLClass__WEBPACK_IMPORTED_MODULE_6__["LinkURLClass"](_this.props.options.gabaritDefault.templateGabaritRegionDefault[0].linkURL.followLink, _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].linkURL.hoveringTooltipLink, _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].linkURL.hoveringTooltipText);
        } // changement


        metaRegion.push(_this.metaConstructor(region.meta));
        region.meta.forEach(function (oneMeta, indexMeta) {
          // BOLD
          if (!oneMeta.obj.style.bold) {
            metaRegion[index][indexMeta].obj.style.bold = _this.transformStringToBoolean(gabaritFileTmp.templateGabaritRegionDefault[0].meta[indexMeta].obj.style.bold);
          }

          if (!oneMeta.obj.style.bold && !gabaritFileTmp.templateGabaritRegionDefault[0].meta[indexMeta].obj.style.bold) {
            metaRegion[index][indexMeta].obj.style.bold = _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritRegionDefault[0].meta[indexMeta].obj.style.bold);
          } // ITALIC


          if (!oneMeta.obj.style.italic) {
            metaRegion[index][indexMeta].obj.style.italic = _this.transformStringToBoolean(gabaritFileTmp.templateGabaritRegionDefault[0].meta[indexMeta].obj.style.italic);
          }

          if (!oneMeta.obj.style.italic && !gabaritFileTmp.templateGabaritRegionDefault[0].meta[indexMeta].obj.style.italic) {
            metaRegion[index][indexMeta].obj.style.italic = _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritRegionDefault[0].meta[indexMeta].obj.style.italic);
          } // UNDERLINE


          if (!oneMeta.obj.style.underline) {
            metaRegion[index][indexMeta].obj.style.underline = _this.transformStringToBoolean(gabaritFileTmp.templateGabaritRegionDefault[0].meta[indexMeta].obj.style.underline);
          }

          if (!oneMeta.obj.style.underline && !gabaritFileTmp.templateGabaritRegionDefault[0].meta[indexMeta].obj.style.underline) {
            metaRegion[index][indexMeta].obj.style.underline = _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritRegionDefault[0].meta[indexMeta].obj.style.underline);
          }
        }); // if (!metaRegion[index]) {
        //   metaRegion[index] = this.metaConstructor(gabaritFileTmp.templateGabaritRegionDefault[0].meta);
        // }
        // if (!metaRegion[index]) {
        //   // changement
        //   // metaRegion[index] = this.props.options.gabaritDefault.templateGabaritRegionDefault[0].meta;
        //   metaRegion[index] = this.metaConstructor(this.props.options.gabaritDefault.templateGabaritRegionDefault[0].meta);
        // }

        labelRegion.push(region.label);

        if (!labelRegion[index]) {
          labelRegion[index] = gabaritFileTmp.templateGabaritRegionDefault[0].label;
        }

        if (!labelRegion[index]) {
          labelRegion[index] = _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].label;
        }

        mainMetricRegion.push({
          key: region.mainMetric.key,
          unit: region.mainMetric.unit,
          format: region.mainMetric.format,
          keyValue: '',
          filter: filterRegion[index],
          refId: gabaritFileTmp.queryID,
          expr: '',
          returnQuery: [],
          manageValue: region.mainMetric.manageValue
        });

        if (!mainMetricRegion[index].unit) {
          mainMetricRegion[index] = {
            key: gabaritFileTmp.templateGabaritRegionDefault[0].mainMetric.key,
            unit: gabaritFileTmp.templateGabaritRegionDefault[0].mainMetric.unit,
            format: gabaritFileTmp.templateGabaritRegionDefault[0].mainMetric.format,
            keyValue: '',
            filter: filterRegion[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: gabaritFileTmp.templateGabaritRegionDefault[0].mainMetric.manageValue
          };
        }

        if (!mainMetricRegion[index].unit) {
          mainMetricRegion[index] = {
            key: _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].mainMetric.key,
            unit: _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].mainMetric.unit,
            format: _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].mainMetric.format,
            keyValue: '',
            filter: filterRegion[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].mainMetric.manageValue
          };
        }

        region.metrics.forEach(function (element) {
          metricRegion[index].push({
            key: element.key,
            unit: element.unit,
            format: element.format,
            keyValue: '',
            filter: filterRegion[index],
            refId: gabaritFileTmp.queryID,
            expr: '',
            returnQuery: [],
            manageValue: element.manageValue
          });
        });
        modeRegion.push(_this.transformStringToBoolean(region.mode));

        if (!region.mode) {
          modeRegion[index] = _this.transformStringToBoolean(gabaritFileTmp.templateGabaritRegionDefault[0].mode);
        }

        if (!region.mode && !gabaritFileTmp.templateGabaritRegionDefault[0].mode) {
          modeRegion[index] = _this.transformStringToBoolean(_this.props.options.gabaritDefault.templateGabaritRegionDefault[0].mode);
        }

        idSVGRegion.push(region.idSVG);

        if (!idSVGRegion[index]) {
          idSVGRegion[index] = gabaritFileTmp.templateGabaritRegionDefault[0].idSVG;
        }

        if (!idSVGRegion[index]) {
          idSVGRegion[index] = _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].idSVG;
        }

        imgRegion.push(region.img);

        if (!imgRegion[index]) {
          imgRegion[index] = gabaritFileTmp.templateGabaritRegionDefault[0].img;
        }

        if (!imgRegion[index]) {
          imgRegion[index] = _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].img;
        }

        tmpToolTipA = {
          label: region.positionParameter.tooltipA.label,
          value: region.positionParameter.tooltipA.value
        };

        if (!tmpToolTipA.label || !tmpToolTipA.value) {
          tmpToolTipA = {
            label: gabaritFileTmp.templateGabaritRegionDefault[0].positionParameter.tooltipA.label,
            value: gabaritFileTmp.templateGabaritRegionDefault[0].positionParameter.tooltipA.value
          };
        }

        if (!tmpToolTipA.label || !tmpToolTipA.value) {
          tmpToolTipA = {
            label: _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].positionParameter.tooltipA.label,
            value: _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].positionParameter.tooltipA.value
          };
        }

        tmpToolTipB = {
          label: region.positionParameter.tooltipB.label,
          value: region.positionParameter.tooltipB.value
        };

        if (!tmpToolTipB.label || !tmpToolTipB.value) {
          tmpToolTipB = {
            label: gabaritFileTmp.templateGabaritRegionDefault[0].positionParameter.tooltipB.label,
            value: gabaritFileTmp.templateGabaritRegionDefault[0].positionParameter.tooltipB.value
          };
        }

        if (!tmpToolTipB.label || !tmpToolTipB.value) {
          tmpToolTipB = {
            label: _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].positionParameter.tooltipB.label,
            value: _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].positionParameter.tooltipB.value
          };
        }

        tmpLabelAPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(region.positionParameter.xylabelA);

        if (!tmpLabelAPosition) {
          tmpLabelAPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritRegionDefault[0].positionParameter.xylabelA);
        }

        if (!tmpLabelAPosition) {
          tmpLabelAPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritRegionDefault[0].positionParameter.xylabelA);
        }

        tmpLabelBPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(region.positionParameter.xylabelB);

        if (!tmpLabelBPosition) {
          tmpLabelBPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(gabaritFileTmp.templateGabaritRegionDefault[0].positionParameter.xylabelB);
        }

        if (!tmpLabelBPosition) {
          tmpLabelBPosition = Object(_Functions_loaderGabarit__WEBPACK_IMPORTED_MODULE_3__["coordParse"])(_this.props.options.gabaritDefault.templateGabaritRegionDefault[0].positionParameter.xylabelB);
        }

        positionParameterRegion.push(new Models_PositionParameterClass__WEBPACK_IMPORTED_MODULE_5__["PositionParameterClass"](tmpLabelAPosition.x, tmpLabelAPosition.y, tmpLabelBPosition.x, tmpLabelBPosition.y, tmpToolTipA, tmpToolTipB));
        orientedLinkAssociate.push(region.orientedLink);

        if (!orientedLinkAssociate[index]) {
          orientedLinkAssociate[index] = gabaritFileTmp.templateGabaritRegionDefault[0].orientedLink;
        }

        if (!orientedLinkAssociate[index]) {
          orientedLinkAssociate[index] = _this.props.options.gabaritDefault.templateGabaritRegionDefault[0].orientedLink;
        }
      });
      newID = 0;

      _this.props.options.regionCoordinateSpace.forEach(function (element) {
        newID++;
      });

      filterRegion.forEach(function (element, index) {
        if (metricRegion.length > 0) {
          var toLoad = new Models_RegionClass__WEBPACK_IMPORTED_MODULE_10__["RegionClass"](newID + 1, linkURLRegion[index], metaRegion[index], JSON.parse(JSON.stringify(lowerLimit)), labelRegion[index] + '_' + newID, JSON.parse(JSON.stringify(textObj)), mainMetricRegion[index], metricRegion[index], colorMode, traceBack, traceBorder, positionParameterRegion[index], idSVGRegion[index], orientedLinkAssociate[index], posRegion[index], posRegion[index], modeRegion[index], imgRegion[index], widthInitialSpace.toString(), heightInitialSpace.toString());
          newID++;

          _this.props.options.regionCoordinateSpace.push(toLoad);
        } else {
          var toLoad = new Models_RegionClass__WEBPACK_IMPORTED_MODULE_10__["RegionClass"](newID + 1, linkURLRegion[index], metaRegion[index], JSON.parse(JSON.stringify(lowerLimit)), labelRegion[index] + '_' + newID, JSON.parse(JSON.stringify(textObj)), mainMetricRegion[index], [], colorMode, traceBack, traceBorder, positionParameterRegion[index], idSVGRegion[index], orientedLinkAssociate[index], posRegion[index], posRegion[index], modeRegion[index], imgRegion[index], widthInitialSpace.toString(), heightInitialSpace.toString());
          newID++;

          _this.props.options.regionCoordinateSpace.push(toLoad);
        }
      });
    };

    _this.gabaritUrlDisplay = function (props) {
      if (props.list.lenght !== 0) {
        var list = props.list.map(function (url, index) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'GabaritUrlDiv' + index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
            id: index.toString(),
            key: 'GabaritUrl' + index.toString(),
            label: 'Url',
            labelWidth: 10,
            inputWidth: 25,
            onChange: _this.onGabaritListUrlChanged.bind(_this),
            type: "string",
            value: url || ''
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
            size: 'md',
            variant: "danger",
            id: index.toString(),
            key: 'ButtunDel' + index.toString(),
            onClick: _this.gabaritDeletUrl.bind(_this)
          }, "Delete"));
        });
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, list);
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, "No targets avalaible");
    };

    _this.gabaritDisplay = function (props) {
      if (props.list.lenght !== 0) {
        var list = props.list.map(function (gabarit, index) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'GabaritDiv' + index.toString(),
            style: {
              display: 'flex',
              justifyContent: 'space-between'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
            id: index.toString(),
            key: 'Gabarit' + index.toString(),
            label: 'Gabarit',
            labelWidth: 5,
            inputWidth: 20,
            type: "string",
            value: gabarit.fileName || '',
            readOnly: true
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormLabel"], {
            width: 15
          }, "Querry ID"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Select"], {
            onChange: function onChange(value) {
              return _this.onChangeSelectQuerryID(value, index);
            },
            allowCustomValue: false,
            options: _this.state.selectQuerryID,
            width: 10,
            value: {
              label: _this.props.options.saveGabaritFile[index].queryID,
              value: _this.props.options.saveGabaritFile[index].queryID
            }
          })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
            size: 'md',
            id: index.toString(),
            key: 'ButtunLoad' + index.toString(),
            onClick: _this.checkLoaderGabarit.bind(_this)
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
            style: {
              padding: '0px 5px'
            }
          }, "Load")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
            size: 'md',
            variant: "danger",
            id: index.toString(),
            key: 'ButtunDel' + index.toString(),
            onClick: _this.gabaritDeletFile.bind(_this)
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
            style: {
              padding: '0px 23px'
            }
          }, "Delete"))));
        });
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, list);
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, "No targets avalaible");
    };

    _this.gabaritDefaultDisplay = function (props) {
      if (props) {
        var list = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
          style: {
            display: 'flex'
          }
        }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
          key: 'GabaritDefault',
          label: 'GabaritDefault',
          labelWidth: 10,
          inputWidth: 25,
          type: "string",
          value: props.list.fileName || '',
          readOnly: true
        }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
          size: 'md',
          variant: "danger",
          key: 'ButtunDelDefault',
          onClick: _this.gabaritDeletFileDefault.bind(_this)
        }, "Delete"));
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, list);
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, "No targets avalaible");
    };

    _this.delAll = function () {
      // this.props.options.arrayCoordinateSpace = [];
      // this.props.options.arrayOrientedLinks = [];
      // this.props.options.arrayPoints = [];
      _this.props.options.saveGabaritURL = []; //this.props.options.saveGabaritURL = [];
      // this.props.options.saveGabaritURL.mono = [];

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveGabaritURL: _this.props.options.saveGabaritURL
      }));
    };

    _this.printDefault = function () {
      console.log('gabaritDefault');
      console.log(_this.props.options.gabaritDefault);
    };

    _this.printPoint = function () {
      console.log('Point');
      console.log(_this.props.options.arrayPoints);

      _this.props.options.arrayPoints.forEach(function (element) {
        console.log(element.mainMetric.filter);
      });
    };

    _this.printRegion = function () {
      console.log('Region');
      console.log(_this.props.options.regionCoordinateSpace);
    };

    _this.printLink = function () {
      console.log('Link');
      console.log(_this.props.options.arrayOrientedLinks);
    };

    _this.printTemp = function () {
      console.log('gabaritDefault');
      console.log(_this.props.options.saveGabaritFile);
    };

    _this.state = {
      selectQuerryID: [{
        label: 'A',
        value: 'A'
      }, {
        label: 'B',
        value: 'B'
      }, {
        label: 'C',
        value: 'C'
      }, {
        label: 'D',
        value: 'D'
      }, {
        label: 'E',
        value: 'E'
      }, {
        label: 'F',
        value: 'F'
      }, {
        label: 'G',
        value: 'G'
      }, {
        label: 'H',
        value: 'H'
      }, {
        label: 'I',
        value: 'I'
      }, {
        label: 'J',
        value: 'J'
      }, {
        label: 'K',
        value: 'K'
      }, {
        label: 'L',
        value: 'L'
      }, {
        label: 'M',
        value: 'M'
      }, {
        label: 'N',
        value: 'N'
      }, {
        label: 'O',
        value: 'O'
      }, {
        label: 'P',
        value: 'P'
      }, {
        label: 'Q',
        value: 'Q'
      }, {
        label: 'R',
        value: 'R'
      }, {
        label: 'S',
        value: 'S'
      }, {
        label: 'T',
        value: 'T'
      }, {
        label: 'U',
        value: 'U'
      }, {
        label: 'V',
        value: 'V'
      }, {
        label: 'W',
        value: 'W'
      }, {
        label: 'X',
        value: 'X'
      }, {
        label: 'Y',
        value: 'Y'
      }, {
        label: 'Z',
        value: 'Z'
      }],
      collapseSelectURL: false,
      collapseGabarit: false,
      collapseGabaritDefault: true
    };
    return _this;
  }

  Gabarit.prototype.render = function () {
    var options = this.props.options;
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseGabaritDefault,
      label: "Default Gabarit URL",
      onToggle: this.onToggleGabaritDefault
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Gabarit Default Url",
      labelWidth: 10,
      key: 'GabaritDefaultUrl',
      inputWidth: 25,
      onChange: this.onGabaritDefaultUrlChanged.bind(this),
      type: "string",
      value: options.saveGabaritDefaultUrl || ''
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      size: 'md',
      key: 'AddGabaritDefaultUrl',
      onClick: this.addGabaritDefaultUrlInput
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      style: {
        padding: '0px 8px'
      }
    }, "Add"))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(this.gabaritDefaultDisplay, {
      list: options.gabaritDefault
    })), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseSelectURL,
      label: "Url List",
      onToggle: this.onToggleSelectUrl
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Gabarit Url",
      labelWidth: 10,
      key: 'GabaritUrl',
      inputWidth: 25,
      onChange: this.onGabaritUrlChanged.bind(this),
      type: "string",
      value: options.gabaritUrlInput || ''
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      size: 'md',
      key: 'AddGabaritUrl',
      onClick: this.addGabaritUrlInput
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
      style: {
        padding: '0px 8px'
      }
    }, "Add"))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(this.gabaritUrlDisplay, {
      list: options.saveGabaritURL
    }), this.props.options.saveGabaritURL.length !== 0 && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex',
        flexDirection: 'row',
        justifyContent: 'right'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      size: 'md',
      onClick: this.fetchGabarit
    }, "Finish"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      size: 'md',
      key: 'delAll',
      onClick: this.delAll,
      variant: "danger"
    }, "Delete all urls")))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseGabarit,
      label: "Gabarit List",
      onToggle: this.onToggleGabarit
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(this.gabaritDisplay, {
      list: options.saveGabaritFile
    })));
  };

  return Gabarit;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (Gabarit);

/***/ }),

/***/ "./components/importInput.tsx":
/*!************************************!*\
  !*** ./components/importInput.tsx ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _Models_PointClass__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../Models/PointClass */ "./Models/PointClass.tsx");
/* harmony import */ var Models_RegionClass__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Models/RegionClass */ "./Models/RegionClass.tsx");
/* harmony import */ var _Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../Models/OrientedLinkClass */ "./Models/OrientedLinkClass.tsx");
/* harmony import */ var _Models_dropZone__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Models/dropZone */ "./Models/dropZone.tsx");


 //import /*pointClassImport, regionClassImport, multiPointClassImport, multiRegionClassImport */ '../../config/testVariable';



 //import { fetchConfFile } from '../Functions/importConfig';


/*
 * TODO
 */

var ImportInput = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(ImportInput, _super);

  function ImportInput(props) {
    var _this = _super.call(this, props) || this;

    _this.result = [];
    _this.totalResult = [];
    /**************************************FETCH******************************************/
    // fetchMono = () => {
    //     console.log(this.props.options.saveImportUrl.mono)
    //     this.result = fetchConfFile(this.props.options.saveImportUrl.mono);
    // }

    /**************************************CATCH******************************************/

    _this.PointValidator = function (newSpace) {
      var resultId = 0;

      _this.props.options.arrayPoints.forEach(function (point) {
        if (newSpace.id === point.id) {
          if (newSpace.name === point.name) {
            resultId = 2;
          } else {
            // console.error('Id of point named "' + newSpace.name + '" already given fail to load!');
            resultId = 1;
          }
        }
      });

      return resultId;
    };

    _this.RegionValidator = function (newSpace) {
      var resultId = 0;

      _this.props.options.regionCoordinateSpace.forEach(function (region) {
        //Id
        if (newSpace.id === region.id) {
          if (newSpace.label === region.label) {
            resultId = 2;
          } else {
            // console.error('Id of region labeled "' + newSpace.label + '" already given, fail to load!');
            resultId = 1;
          }
        }
      });

      return resultId;
    };

    _this.LinkValidator = function (newSpace) {
      var resultId = 0;

      _this.props.options.arrayOrientedLinks.forEach(function (lien) {
        if (newSpace.id === lien.id) {
          if (newSpace.name === lien.name) {
            resultId = 2;
          } else {
            // console.error('Id of link named "' + newSpace.name + '" already given, fail to load!');
            resultId = 1;
          }
        }
      });

      return resultId;
    };

    _this.UrlValidator = function (url) {
      var result = true;

      for (var index in _this.props.options.saveImportUrl.multi) {
        if (_this.props.options.saveImportUrl.multi[index] === url) {
          result = false;
          break;
        }
      }

      return result;
    };
    /**************************************LOADER******************************************/
    // Mono


    _this.pointUpdate = function (updatedPoint) {
      _this.props.options.arrayPoints.forEach(function (point, index) {
        //Id
        if (updatedPoint.id === point.id) {
          if (updatedPoint.name === point.name) {
            _this.props.options.arrayPoints[index] = updatedPoint;

            _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
              arrayPoints: _this.props.options.arrayPoints
            }));
          }
        }
      });
    }; //Looking for a update after Point rework


    _this.loadMonoPoint = function (point) {
      var xMinInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMin, 10);
      var xMaxInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMax, 10);
      var yMinInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMin, 10);
      var yMaxInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMax, 10);
      var widthInitialSpaceDefault = (xMaxInitialSpace - xMinInitialSpace).toString();
      var heightInitialSpaceDefault = (yMaxInitialSpace - yMinInitialSpace).toString();
      var toLoad = new _Models_PointClass__WEBPACK_IMPORTED_MODULE_3__["PointClass"](point.id, point.linkURL, point.meta, point.lowerLimit, point.label, point.textObj, point.mainMetric, point.metrics, point.colorMode, point.traceBack, point.traceBorder, point.positionParameter, point.name, point.valueMetric, point.drawGraphicMarker, point.shape, point.sizeWidth, point.sizeHeight, point.rotateArrow, point.positionShapeX, point.positionShapeY, point.color, point.associateOrientedLinksIn, point.associateOrientedLinksOut, widthInitialSpaceDefault, heightInitialSpaceDefault, point.positionXDefault, point.positionYDefault); // console.log(toLoad);

      var selector = _this.PointValidator(toLoad); // Do some test here to see if your already load a coordinatespace with this id


      if (selector === 0) {
        _this.props.options.arrayPoints.push(toLoad);
      }

      if (selector === 2) {
        _this.pointUpdate(toLoad);
      }
    };

    _this.regionUpdate = function (updatedRegion) {
      _this.props.options.regionCoordinateSpace.forEach(function (region, index) {
        //Id
        if (updatedRegion.id === region.id) {
          if (updatedRegion.label === region.label) {
            _this.props.options.regionCoordinateSpace[index] = updatedRegion;

            _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
              regionCoordinateSpace: _this.props.options.regionCoordinateSpace
            }));
          }
        }
      });
    }; //Looking for a update after Region rework


    _this.loadMonoRegion = function (region) {
      var xMinInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMin, 10);
      var xMaxInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMax, 10);
      var yMinInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMin, 10);
      var yMaxInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMax, 10);
      var widthInitialSpaceDefault = (xMaxInitialSpace - xMinInitialSpace).toString();
      var heightInitialSpaceDefault = (yMaxInitialSpace - yMinInitialSpace).toString();
      var toLoad = new Models_RegionClass__WEBPACK_IMPORTED_MODULE_4__["RegionClass"](region.id, region.linkURL, region.meta, region.lowerLimit, region.label, region.textObj, region.mainMetric, region.metrics, region.colorMode, region.traceBack, region.traceBorder, region.positionParameter, region.idSVG, region.orientedLink, region.coords, region.coordsDefault, region.mode, region.img, widthInitialSpaceDefault, heightInitialSpaceDefault); // console.log(toLoad);
      // Do some test here to see if your already load a coordinatespace with this id

      var selector = _this.RegionValidator(toLoad);

      if (selector === 0) {
        _this.props.options.regionCoordinateSpace.push(toLoad);
      }

      if (selector === 2) {
        _this.regionUpdate(toLoad);
      }
    };

    _this.linkUpdate = function (updatedLink) {
      _this.props.options.arrayOrientedLinks.forEach(function (link, index) {
        //Id
        if (updatedLink.id === link.id) {
          if (updatedLink.name === link.name) {
            _this.props.options.arrayOrientedLinks[index] = updatedLink;

            _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
              arrayOrientedLinks: _this.props.options.arrayOrientedLinks
            }));
          }
        }
      });
    };

    _this.loadMonoLink = function (link) {
      var xMinInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMin, 10);
      var xMaxInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.xMax, 10);
      var yMinInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMin, 10);
      var yMaxInitialSpace = parseInt(_this.props.options.coordinateSpaceInitial.coordinate.yMax, 10);
      var widthInitialSpaceDefault = (xMaxInitialSpace - xMinInitialSpace).toString();
      var heightInitialSpaceDefault = (yMaxInitialSpace - yMinInitialSpace).toString();
      var toLoad = new _Models_OrientedLinkClass__WEBPACK_IMPORTED_MODULE_5__["OrientedLinkClass"](link.id, link.linkURL, link.meta, link.lowerLimit, link.label, link.textObj, link.mainMetric, link.metrics, link.colorMode, link.traceBack, link.traceBorder, link.positionParameter, link.name, link.orientationLink, link.size, link.pointAPositionX, link.pointAPositionY, link.colorCoordinateA, link.pointBPositionX, link.pointBPositionY, link.colorCoordinateB, link.valueMainMetricA, link.valueMainMetricB, link.pointIn, link.pointOut, link.regionIn, link.regionOut, link.zIndex, link.pointCPositionX, link.pointCPositionY, link.isIncurved, link.mainMetricB, link.metricsB, widthInitialSpaceDefault, heightInitialSpaceDefault, link.pointAPositionXDefault, link.pointAPositionYDefault, link.pointBPositionXDefault, link.pointBPositionYDefault, link.pointCPositionXDefault, link.pointCPositionYDefault); // Do some test here to see if your already load a coordinatespace with this id

      var selector = _this.LinkValidator(toLoad);

      if (selector === 0) {
        _this.props.options.arrayOrientedLinks.push(toLoad);
      }

      if (selector === 2) {
        _this.linkUpdate(toLoad);
      }
    }; //Multi


    _this.loadMultiPoints = function (points) {
      points.points.forEach(function (point) {
        _this.loadMonoPoint(point);
      });
    };

    _this.loadMultiRegions = function (regions) {
      regions.regions.forEach(function (region) {
        _this.loadMonoRegion(region);
      });
    };

    _this.loadMultiLinks = function (links) {
      links.links.forEach(function (link) {
        _this.loadMonoLink(link);
      });
    }; //Total


    _this.loadTotal = function (panel) {
      //console.log(panel.imageUrl);
      _this.props.options.baseMap = panel.baseMap;
      _this.props.options.display.police = panel.texteSettings.police;
      _this.props.options.display.size = panel.texteSettings.size;
      _this.props.options.display.style = panel.texteSettings.style;
      _this.props.options.coordinateSpaceInitial = panel.coordinateSpaceInitial;
      panel.regions.forEach(function (url) {
        if (_this.UrlValidator(url) === true) {
          _this.props.options.saveImportUrl.multi.push(url);
        }
      });
      panel.points.forEach(function (url) {
        if (_this.UrlValidator(url) === true) {
          _this.props.options.saveImportUrl.multi.push(url);
        }
      });
      panel.links.forEach(function (url) {
        if (_this.UrlValidator(url) === true) {
          _this.props.options.saveImportUrl.multi.push(url);
        }
      });

      _this.fetchMulti(); // console.log('load total');

    };

    _this.loaderTotal = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var response, file, error_1;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 3,, 4]);

              return [4
              /*yield*/
              , fetch(this.props.options.totalUrlInput)];

            case 1:
              response = _a.sent();
              return [4
              /*yield*/
              , response.json()];

            case 2:
              file = _a.sent();
              this.loadTotal(file);
              return [3
              /*break*/
              , 4];

            case 3:
              error_1 = _a.sent();
              console.error(error_1);
              return [3
              /*break*/
              , 4];

            case 4:
              return [2
              /*return*/
              ];
          }
        });
      });
    }; // fetchTotal = () => {
    //   this.totalResult = fetchConfFile(this.props.options.saveImportUrl.total);
    //   console.log('downloadTotal');
    // };
    // loaderSelector = () => {
    //     // this.loadMultiRegions(multiRegionClassImport);
    // 	// console.table(this.props.options.arrayCoordinateSpace);
    // 	this.result.forEach(file => {
    // 		if (file.hasOwnProperty('regions')){
    //             this.loadMultiRegions(file);
    //             console.log('Load Region');
    //         }
    //         if (file.hasOwnProperty('points')){
    //             this.loadMultiPoints(file);
    //             console.log('Load Point');
    //         }
    //         if (file.hasOwnProperty('links')){
    //             this.loadMultiLinks(file);
    //             console.log('Load Links');
    // 		}
    // 	});
    // }


    _this.fetchMulti = function () {
      //this.result = fetchConfFile(this.props.options.saveImportUrl.multi);
      _this.props.options.saveImportUrl.multi.forEach(function (url) {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
          var file, response, error_2;
          return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
            switch (_a.label) {
              case 0:
                _a.trys.push([0, 3,, 4]);

                file = {};
                return [4
                /*yield*/
                , fetch(url)];

              case 1:
                response = _a.sent();
                return [4
                /*yield*/
                , response.json()];

              case 2:
                file = _a.sent();

                if (file.hasOwnProperty('regions')) {
                  this.loadMultiRegions(file); // console.log('Load Region');
                }

                if (file.hasOwnProperty('points')) {
                  this.loadMultiPoints(file); // console.log('Load Point');
                }

                if (file.hasOwnProperty('links')) {
                  //console.log(file);
                  this.loadMultiLinks(file); // console.log('Load Links');
                }

                return [3
                /*break*/
                , 4];

              case 3:
                error_2 = _a.sent();
                return [3
                /*break*/
                , 4];

              case 4:
                return [2
                /*return*/
                ];
            }
          });
        });
      });
    };
    /**************************************INPUT******************************************/


    _this.onToggleTotalUrl = function (isOpen) {
      _this.setState({
        collapseTotalUrl: isOpen
      });
    };

    _this.onToggleMultiUrl = function (isOpen) {
      _this.setState({
        collapseMultiUrl: isOpen
      });
    };

    _this.onToggleMultiUpload = function (isOpen) {
      _this.setState({
        collapseMultiUpload: isOpen
      });
    }; // public onToggleMonoUrl = (isOpen: boolean): void => {
    // 	this.setState({
    // 		collapseMonoUrl: isOpen,
    // 	});
    // }
    // saveUrl = (url: string, mode: number) => {
    //   // if (mode === 0){
    //   //     this.props.options.saveImportUrl.mono.push(url);
    //   // }
    //   if (mode === 1) {
    //     this.props.options.saveImportUrl.multi.push(url);
    //   }
    //   if (mode === 2) {
    //     this.props.options.saveImportUrl.total.push(url);
    //   }
    // };


    _this.onTotalUrlChanged = function (event) {
      var newData = '';
      newData = event.currentTarget.value;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        totalUrlInput: newData
      }));
    };

    _this.onTotalListUrlChanged = function (event) {
      var newData = _this.props.options.saveImportUrl.total.slice();

      newData[parseInt(event.currentTarget.id, 10)] = event.currentTarget.value;
      _this.props.options.saveImportUrl.total = newData;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveImportUrl: _this.props.options.saveImportUrl
      }));
    };

    _this.onMultiUrlChanged = function (event) {
      var newData = '';
      newData = event.currentTarget.value;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        multiUrlInput: newData
      }));
    };

    _this.onMultiListUrlChanged = function (event) {
      var newData = _this.props.options.saveImportUrl.multi.slice();

      newData[parseInt(event.currentTarget.id, 10)] = event.currentTarget.value;
      _this.props.options.saveImportUrl.multi = newData;

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveImportUrl: _this.props.options.saveImportUrl
      }));
    }; // onMonoUrlChanged = (event: { currentTarget: HTMLInputElement }) => {
    // 	let newData: string = '';
    // 	newData = event.currentTarget.value;
    // 	this.props.onOptionsChange({ ...this.props.options, monoUrlInput: newData });
    // }
    // onMonoListUrlChanged = (event: {currentTarget: HTMLInputElement}) => {
    //     let newData: string[] = this.props.options.saveImportUrl.mono.slice();
    //     newData[parseInt(event.currentTarget.id, 10)] = event.currentTarget.value;
    //     this.props.options.saveImportUrl.mono = newData;
    //     this.props.onOptionsChange({...this.props.options, saveImportUrl: this.props.options.saveImportUrl})
    // }


    _this.addTotalUrlInput = function (onClick) {
      _this.props.options.saveImportUrl.total.push(_this.props.options.totalUrlInput);

      _this.props.options.totalUrlInput = '';

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveImportUrl: _this.props.options.saveImportUrl
      }));
    };

    _this.addMultiUrlInput = function (onClick) {
      _this.props.options.saveImportUrl.multi.push(_this.props.options.multiUrlInput);

      _this.props.options.multiUrlInput = '';

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveImportUrl: _this.props.options.saveImportUrl
      }));
    }; // addMonoUrlInput = (onClick: { currentTarget: HTMLButtonElement }) => {
    //     this.props.options.saveImportUrl.mono.push(this.props.options.monoUrlInput);
    //     this.props.options.monoUrlInput = '';
    //     this.props.onOptionsChange({ ...this.props.options, saveImportUrl: this.props.options.saveImportUrl})
    // }


    _this.totalDeletUrl = function (onClick) {
      var isUrl = function isUrl(url) {
        return url === _this.props.options.saveImportUrl.total[parseInt(onClick.currentTarget.id, 10)];
      };

      _this.props.options.saveImportUrl.total.splice(_this.props.options.saveImportUrl.total.findIndex(isUrl), 1);

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveImportUrl: _this.props.options.saveImportUrl
      }));
    };

    _this.multiDeletUrl = function (onClick) {
      var isUrl = function isUrl(url) {
        return url === _this.props.options.saveImportUrl.multi[parseInt(onClick.currentTarget.id, 10)];
      };

      _this.props.options.saveImportUrl.multi.splice(_this.props.options.saveImportUrl.multi.findIndex(isUrl), 1);

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveImportUrl: _this.props.options.saveImportUrl
      }));
    }; // monoDeletUrl = (onClick: { currentTarget: HTMLButtonElement}) => {
    //     const isUrl = (url: string) => url === this.props.options.saveImportUrl.mono[parseInt(onClick.currentTarget.id, 10)];
    //     this.props.options.saveImportUrl.mono.splice(this.props.options.saveImportUrl.mono.findIndex(isUrl), 1);
    //     this.props.onOptionsChange({...this.props.options, saveImportUrl: this.props.options.saveImportUrl});
    // }


    _this.tempo = function () {// console.log(this.props.options.saveImportUrl);
    };

    _this.totalUrlDisplay = function (props) {
      if (props.list.total.lenght !== 0) {
        var list = props.list.total.map(function (url, index) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'TotalUrlDiv' + index.toString(),
            style: {
              display: 'flex'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
            id: index.toString(),
            key: 'TotalUrl' + index.toString(),
            label: 'Url',
            labelWidth: 5,
            inputWidth: 20,
            onChange: _this.onTotalListUrlChanged.bind(_this),
            type: "string",
            value: url || ''
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
            variant: "danger",
            id: index.toString(),
            key: 'ButtunDel' + index.toString(),
            onClick: _this.totalDeletUrl.bind(_this)
          }, "Del"));
        });
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, list);
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, "No targets avalaible");
    };

    _this.multiUrlDisplay = function (props) {
      if (props.list.multi.lenght !== 0) {
        var list = props.list.multi.map(function (url, index) {
          return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: 'MultiUrlDiv' + index.toString(),
            style: {
              display: 'flex',
              marginTop: '5px'
            }
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
            id: index.toString(),
            key: 'MultiUrl' + index.toString(),
            label: 'Url',
            labelWidth: 10,
            inputWidth: 20,
            onChange: _this.onMultiListUrlChanged.bind(_this),
            type: "string",
            value: url || ''
          }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
            variant: "danger",
            id: index.toString(),
            key: 'ButtunDel' + index.toString(),
            onClick: _this.multiDeletUrl.bind(_this)
          }, "Delete"));
        });
        return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, list);
      }

      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, "No targets avalaible");
    }; // monoUrlDisplay = (props: any): JSX.Element => {
    // 	if (props.list.multi.lenght !== 0) {
    // 		const list = props.list.mono.map((url: string, index: number) =>
    // 			<div key={'MonoUrlDiv' + index.toString()}>
    //                 <FormField id={index.toString()} key={'MonoUrl' + index.toString()}
    // 					label={'Url'} labelWidth={5}
    // 					inputWidth={20} onChange={this.onMonoListUrlChanged.bind(this)} type='string' value={url || ''} />
    // 				<Button variant='danger' id={index.toString()} key={'ButtunDel' + index.toString()}
    // 					onClick={this.monoDeletUrl.bind(this)}>Del</Button>
    // 			</div>
    // 		);
    // 		return (
    // 			<div>{list}</div>
    // 		);
    // 	}
    // 	return (<div>No targets avalaible</div>);
    // }


    _this.delAll = function () {
      // this.props.options.arrayCoordinateSpace = [];
      // this.props.options.arrayOrientedLinks = [];
      // this.props.options.arrayPoints = [];
      _this.props.options.saveImportUrl.total = [];
      _this.props.options.saveImportUrl.multi = []; // this.props.options.saveImportUrl.mono = [];

      _this.props.onOptionsChange(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])(Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"])({}, _this.props.options), {
        saveImportUrl: _this.props.options.saveImportUrl
      }));
    };

    _this.toDel = function () {// console.log(this.props.options.saveImportUrl.multi);
      // console.log(this.props.options.arrayPoints);
    };

    _this.state = {
      collapseTotalUrl: false,
      collapseMultiUrl: false,
      // collapseMonoUrl: false,
      collapseMultiUpload: false
    };
    return _this;
  }

  ImportInput.prototype.render = function () {
    var options = this.props.options;
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseTotalUrl,
      label: "Global Url Import",
      onToggle: this.onToggleTotalUrl
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Total Url",
      labelWidth: 10,
      key: 'TotalUrl',
      inputWidth: 20,
      onChange: this.onTotalUrlChanged.bind(this),
      type: "string",
      value: options.totalUrlInput || ''
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      onClick: this.loaderTotal
    }, "Finish")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "section gf-form-group"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(this.totalUrlDisplay, {
      list: options.saveImportUrl
    }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseMultiUrl,
      label: "Multi Url Import",
      onToggle: this.onToggleMultiUrl
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      style: {
        display: 'flex'
      }
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["FormField"], {
      label: "Multi Url",
      labelWidth: 10,
      key: 'MultiUrl',
      inputWidth: 20,
      onChange: this.onMultiUrlChanged.bind(this),
      type: "string",
      value: options.multiUrlInput || ''
    }), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      key: 'AddMultiUrl',
      onClick: this.addMultiUrlInput
    }, "Add"), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
      onClick: this.fetchMulti
    }, "Finish")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      className: "section gf-form-group"
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(this.multiUrlDisplay, {
      list: options.saveImportUrl
    }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Collapse"], {
      isOpen: this.state.collapseMultiUpload,
      label: "Multi Local Import",
      onToggle: this.onToggleMultiUpload
    }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_Models_dropZone__WEBPACK_IMPORTED_MODULE_6__["default"], {
      options: this.props.options,
      onOptionsChange: this.props.onOptionsChange,
      data: this.props.data
    }))));
  };

  return ImportInput;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (ImportInput);

/***/ }),

/***/ "./components/legend.tsx":
/*!*******************************!*\
  !*** ./components/legend.tsx ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../node_modules/tslib/tslib.es6.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @grafana/ui */ "@grafana/ui");
/* harmony import */ var _grafana_ui__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__);



/**
 * def
 */

var LegendComponent = function (_super) {
  Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"])(LegendComponent, _super);

  function LegendComponent(props) {
    var _this = _super.call(this, props) || this;
    /** async state */


    _this.setStateAsyncFinalHTML = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /** fill lowerlimit in JSX.Element */


    _this.fillLowerLimit = function (lowerLimit, name) {
      var e_1, _a;

      var allLimit = [];
      var i = 0;
      var max = lowerLimit.length - 1;

      try {
        for (var lowerLimit_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(lowerLimit), lowerLimit_1_1 = lowerLimit_1.next(); !lowerLimit_1_1.done; lowerLimit_1_1 = lowerLimit_1.next()) {
          var lower = lowerLimit_1_1.value;
          allLimit.push(react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: name + 'LowerLimit' + i,
            className: "LegendMatt"
          }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
            style: {
              padding: '5px',
              // margin: '10px',
              width: '130px',
              //width: '3.5rem',
              //borderRadius: '39%',
              backgroundColor: lower.backColor,
              border: lower.sizeBorder + 'px solid ' + lower.borderColor,
              listStyleType: 'none',
              display: 'inline-block',
              textAlign: 'center'
            }
          }, lowerLimit.length > 1 && react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("span", {
            style: {
              //display: 'inline-block',
              //verticalAlign: 'middle',
              //marginBottom: '1.25rem',
              fontSize: '10px'
            }
          }, i === 0 ? '-∞' : lower.lowerLimitMin, " - ", i === max ? '+∞' : lower.lowerLimitMax))));
          ++i;
        }
      } catch (e_1_1) {
        e_1 = {
          error: e_1_1
        };
      } finally {
        try {
          if (lowerLimit_1_1 && !lowerLimit_1_1.done && (_a = lowerLimit_1["return"])) _a.call(lowerLimit_1);
        } finally {
          if (e_1) throw e_1.error;
        }
      }

      return allLimit;
    };
    /** get all lower limit for region */


    _this.fillRegion = function () {
      var e_2, _a;

      var allRegion = _this.props.options.regionCoordinateSpace;
      var rendu = [];

      try {
        for (var allRegion_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(allRegion), allRegion_1_1 = allRegion_1.next(); !allRegion_1_1.done; allRegion_1_1 = allRegion_1.next()) {
          var line = allRegion_1_1.value;

          var allLimit = _this.fillLowerLimit(line.lowerLimit, 'region');

          var ownElement = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: line.id + 'DisplayLegendRegion'
          }, line.label, allLimit);
          rendu.push(ownElement);
        }
      } catch (e_2_1) {
        e_2 = {
          error: e_2_1
        };
      } finally {
        try {
          if (allRegion_1_1 && !allRegion_1_1.done && (_a = allRegion_1["return"])) _a.call(allRegion_1);
        } finally {
          if (e_2) throw e_2.error;
        }
      }

      return rendu;
    };

    _this.closeLegend = function (event) {
      _this.props.callBackClose(); // const close = document.getElementById('iconclose');
      // close?.addEventListener('click', () => {
      //   const disappear = document.getElementById('L');
      //   const appear = document.getElementById('legnd');
      //   if (disappear) {
      //     disappear.style.visibility = 'hidden';
      //   }
      //   appear?.addEventListener('click', () => {
      //     if (disappear) {
      //       disappear.style.visibility = 'visible';
      //     }
      //   });
      // });

    };
    /** get all limit for point */


    _this.fillPoint = function () {
      var e_3, _a;

      var allPoint = _this.props.options.arrayPoints;
      var rendu = [];

      try {
        for (var allPoint_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(allPoint), allPoint_1_1 = allPoint_1.next(); !allPoint_1_1.done; allPoint_1_1 = allPoint_1.next()) {
          var line = allPoint_1_1.value;

          var allLimit = _this.fillLowerLimit(line.lowerLimit, 'point');

          var name_1 = line.label || line.name;
          var ownElement = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: name_1 + 'DisplayLegendPoint'
          }, name_1, allLimit);
          rendu.push(ownElement);
        }
      } catch (e_3_1) {
        e_3 = {
          error: e_3_1
        };
      } finally {
        try {
          if (allPoint_1_1 && !allPoint_1_1.done && (_a = allPoint_1["return"])) _a.call(allPoint_1);
        } finally {
          if (e_3) throw e_3.error;
        }
      }

      return rendu;
    };
    /** get all limit for orientedLink */


    _this.fillLink = function () {
      var e_4, _a;

      var allLinks = _this.props.options.arrayOrientedLinks;
      var rendu = [];

      try {
        for (var allLinks_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__values"])(allLinks), allLinks_1_1 = allLinks_1.next(); !allLinks_1_1.done; allLinks_1_1 = allLinks_1.next()) {
          var line = allLinks_1_1.value;

          var allLimit = _this.fillLowerLimit(line.lowerLimit, 'link');

          var name_2 = line.label || line.name;
          var ownElement = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
            key: name_2 + 'DisplayLegendLink'
          }, name_2, allLimit);
          rendu.push(ownElement);
        }
      } catch (e_4_1) {
        e_4 = {
          error: e_4_1
        };
      } finally {
        try {
          if (allLinks_1_1 && !allLinks_1_1.done && (_a = allLinks_1["return"])) _a.call(allLinks_1);
        } finally {
          if (e_4) throw e_4.error;
        }
      }

      return rendu;
    };
    /** generate legend */


    _this.renduState = function () {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        var value;
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              value = react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
                key: 'contentLegend',
                style: {
                  position: 'relative',
                  left: this.state.legend.x,
                  top: this.state.legend.y,
                  maxWidth: '100%',
                  zIndex: 'auto'
                },
                hidden: this.state.legend.hiddenLegend
              }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("article", {
                id: "L",
                style: {
                  width: '200px',
                  position: 'absolute',
                  overflowY: 'scroll',
                  margin: '0',
                  height: '240px',
                  backgroundColor: '#FFF',
                  color: '#000',
                  border: '4px solid #299c46',
                  borderRadius: '4px',
                  // scrollbarColor: '#09090b #212124',
                  scrollbarColor: '#299c46',
                  scrollbarWidth: 'thin',
                  zIndex: 9999,
                  resize: 'both'
                }
              }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
                key: 'legendTitle',
                style: {
                  backgroundImage: 'linear-gradient(90deg, rgb(41, 42, 45), rgb(0, 0, 0))'
                }
              }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("h5", {
                style: {
                  width: '100%',
                  fontSize: '20px',
                  display: 'flex',
                  padding: '10px'
                }
              }, "Legend", react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(_grafana_ui__WEBPACK_IMPORTED_MODULE_2__["Button"], {
                onClick: this.closeLegend,
                style: {
                  marginLeft: 'auto'
                },
                id: "iconclose"
              }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("i", {
                className: "fa fa-times",
                "aria-hidden": "true"
              }))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
                key: 'legendTitleRegion',
                style: {
                  backgroundImage: 'linear-gradient(90deg, rgb(41, 42, 45), rgb(0, 0, 0))'
                }
              }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                style: {
                  fontSize: '15px',
                  padding: '10px 0 10px 14px',
                  fontWeight: 'bold',
                  color: 'white'
                }
              }, "Region"))), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
                key: "regionLegend",
                style: {
                  paddingLeft: '5px',
                  lineHeight: '1.5'
                }
              }, this.fillRegion()), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
                key: 'legendTitlePoint',
                style: {
                  backgroundImage: 'linear-gradient(90deg, rgb(41, 42, 45), rgb(0, 0, 0))'
                }
              }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                style: {
                  fontSize: '15px',
                  padding: '10px 0 10px 14px',
                  fontWeight: 'bold',
                  color: 'white'
                }
              }, "Point")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
                key: "pointLegend",
                style: {
                  paddingLeft: '5px',
                  lineHeight: '1.5'
                }
              }, this.fillPoint()), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
                key: 'legendTitleLink',
                style: {
                  backgroundImage: 'linear-gradient(90deg, rgb(41, 42, 45), rgb(0, 0, 0))'
                }
              }, react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("p", {
                style: {
                  fontSize: '15px',
                  padding: '10px 0 10px 14px',
                  fontWeight: 'bold',
                  color: 'white'
                }
              }, "Oriented Link")), react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
                key: "linkLegend",
                style: {
                  paddingLeft: '5px'
                }
              }, this.fillLink())));
              return [4
              /*yield*/
              , this.setStateAsyncFinalHTML({
                finalHTML: value
              })];

            case 1:
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    };

    _this.setStateLegendAsync = function (state) {
      return new Promise(function (resolve) {
        _this.setState(state, resolve);
      });
    };
    /** update when legend is edited */


    _this.componentDidUpdate = function (prevProps, prevState) {
      return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__awaiter"])(_this, void 0, void 0, function () {
        return Object(tslib__WEBPACK_IMPORTED_MODULE_0__["__generator"])(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(prevProps !== this.props || prevState.legend.hiddenLegend !== this.props.options.legend.hiddenLegend)) return [3
              /*break*/
              , 2];
              return [4
              /*yield*/
              , this.setStateLegendAsync({
                legend: this.props.options.legend
              })];

            case 1:
              _a.sent();

              this.renduState();
              _a.label = 2;

            case 2:
              return [2
              /*return*/
              ];
          }
        });
      });
    };
    /** fill state value when component is mounted */


    _this.componentDidMount = function () {
      _this.renduState();
    };

    _this.state = {
      finalHTML: react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", null),
      legend: _this.props.options.legend
    };
    return _this;
  }
  /**
   * result
   */


  LegendComponent.prototype.render = function () {
    // rip testMoi
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("div", {
      key: 'contentHtmlLegend'
    }, this.state.finalHTML);
  };

  return LegendComponent;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

/* harmony default export */ __webpack_exports__["default"] = (LegendComponent);

/***/ }),

/***/ "./module.ts":
/*!*******************!*\
  !*** ./module.ts ***!
  \*******************/
/*! exports provided: plugin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "plugin", function() { return plugin; });
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @grafana/data */ "@grafana/data");
/* harmony import */ var _grafana_data__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_grafana_data__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./types.ts");
/* harmony import */ var SimplePanel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! SimplePanel */ "./SimplePanel.tsx");
/* harmony import */ var SimpleEditor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! SimpleEditor */ "./SimpleEditor.tsx");




var plugin = new _grafana_data__WEBPACK_IMPORTED_MODULE_0__["PanelPlugin"](SimplePanel__WEBPACK_IMPORTED_MODULE_2__["SimplePanel"]).setDefaults(_types__WEBPACK_IMPORTED_MODULE_1__["defaults"]).setEditor(SimpleEditor__WEBPACK_IMPORTED_MODULE_3__["SimpleEditor"]);

/***/ }),

/***/ "./style/CoordinateSpace.css":
/*!***********************************!*\
  !*** ./style/CoordinateSpace.css ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js??ref--8-1!../../node_modules/postcss-loader/src??ref--8-2!../../node_modules/sass-loader/lib/loader.js!./CoordinateSpace.css */ "../node_modules/css-loader/dist/cjs.js?!../node_modules/postcss-loader/src/index.js?!../node_modules/sass-loader/lib/loader.js!./style/CoordinateSpace.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "../node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./style/SimpleEditor.css":
/*!********************************!*\
  !*** ./style/SimpleEditor.css ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../node_modules/css-loader/dist/cjs.js??ref--8-1!../../node_modules/postcss-loader/src??ref--8-2!../../node_modules/sass-loader/lib/loader.js!./SimpleEditor.css */ "../node_modules/css-loader/dist/cjs.js?!../node_modules/postcss-loader/src/index.js?!../node_modules/sass-loader/lib/loader.js!./style/SimpleEditor.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../node_modules/style-loader/lib/addStyles.js */ "../node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./types.ts":
/*!******************!*\
  !*** ./types.ts ***!
  \******************/
/*! exports provided: defaults */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaults", function() { return defaults; });
var defaults = {
  saveGabaritDefaultUrl: '',
  saveDefaultGabaritFile: {
    queryID: 'A',
    fileName: '',
    loaded: false,
    globalGabarit: {
      lowerLimit: [{
        id: 0,
        lowerLimitMin: '0',
        lowerLimitMax: '0',
        backColor: 'blue',
        borderColor: 'red',
        sizeBorder: '1px'
      }],
      textObject: {
        value: 'default',
        isTextTooltip: 'false',
        colorBack: 'blue',
        colorText: 'black',
        style: {
          bold: 'false',
          italic: 'false',
          underline: 'false'
        },
        generateObjectText: 'false',
        valueGenerateObjectText: {
          legendElement: 'default',
          numericFormatElement: 'default',
          unit: 'default',
          displayObjectInTooltip: 'false',
          addColorTextElement: 'false',
          colorTextElement: 'black',
          addColorBackElement: 'false',
          colorBackElement: 'white'
        },
        generateAuxiliaryElement: {
          legendElement: 'default',
          numericFormatElement: 'default',
          unit: 'default',
          displayObjectInTooltip: 'false',
          addColorTextElement: 'false',
          colorTextElement: 'black',
          addColorBackElement: 'false',
          colorBackElement: 'white'
        }
      },
      defaultColor: 'black',
      colorMode: 'true',
      traceBack: 'true',
      traceBorder: 'true'
    },
    templateGabaritPoint: [],
    templateGabaritRegion: [],
    templateGabaritLink: [],
    templateGabaritPointDefault: [],
    templateGabaritRegionDefault: [],
    templateGabaritLinkDefault: []
  },
  legend: {
    hiddenLegend: true,
    x: 0,
    y: 0
  },
  baseMap: {
    image: '',
    layerImage: '',
    modeSVG: true,
    width: '0',
    height: '0',
    idSVG: '',
    isUploaded: false
  },
  // imageUrl: 'https://upload.wikimedia.org/wikipedia/en/b/be/Locator_Grid.png',
  coordinateSpaceInitial: {
    coordinate: {
      xMin: '0',
      xMax: '0',
      yMin: '0',
      yMax: '0'
    },
    displayArea: true
  },
  displayButton: false,
  regionCoordinateSpace: [],
  arrayPoints: [],
  arrayLinks: [],
  arrayOrientedLinks: [],
  display: {
    police: 'Helvetica',
    size: '1em',
    style: {
      italic: false,
      bold: false,
      underline: false
    }
  },
  fondIsActive: true,
  contourIsActive: true,
  lowerLimit: [],
  colorMode: true,
  contentJson: 'contenu du dashboard',
  Id: 0,
  uid: '',
  title: '',
  style: '',
  editable: '',
  version: 0,
  refresh: {
    value: '0',
    label: '0'
  },
  shemaVersion: 0,
  timezone: '',
  actualPanel: {
    value: '0',
    label: '0'
  },
  panelList: [{
    value: '0',
    label: '0'
  }],
  panelId: 0,
  panelType: '',
  panelTargets: [],
  promTargets: [],
  promGlobalTargets: [],
  Json: {},
  timeRange: {
    from: '2020-01-02 00:00:00',
    to: '2020-01-02 00:00:00'
  },
  personalTarget: {
    expr: ''
  },
  timeQuery: '2020-01-02 00:00:00',
  promUrl: 'http://localhost:9090/api/v1/',
  queryProm: [],
  queryPromGlobal: [],
  queryPromRange: [],
  listStep: [{
    value: '0',
    label: '0'
  }],
  jsonQueryReturn: [],
  jsonGlobalQueryReturn: [],
  mainTarget: {
    expr: ''
  },
  mainQueryProm: '',
  mainQueryReturn: {
    status: '',
    data: {
      resultType: '',
      result: [{
        metric: {
          __name__: '',
          job: ''
        },
        value: []
      }]
    }
  },
  testMainQueryReturn: {},
  coordinatesToDrawLinkWithClick: [{
    id: 0
  }, {
    x: 0,
    xDefault: 0,
    y: 0,
    yDefault: 0,
    labelPoint: '',
    point: {},
    labelRegion: '',
    region: {}
  }, {
    x: 0,
    xDefault: 0,
    y: 0,
    yDefault: 0,
    labelPoint: '',
    point: {},
    labelRegion: '',
    region: {}
  }, {
    x: 0,
    y: 0,
    labelPoint: '',
    point: {},
    labelRegion: '',
    region: {}
  }],
  indexOrientedLink: 0,
  indexPoint: 0,
  indexRegion: 0,
  listCollapsePoint: [],
  listCollapseOrientedLink: [],
  saveImportUrl: {
    total: [],
    multi: [],
    mono: []
  },
  saveImportFile: [],
  totalUrlInput: '',
  multiUrlInput: '',
  monoUrlInput: '',
  zIndexOrientedLink: 1,
  orientedLinkToUpgrade: {},
  orientedLinkToDowngrade: {},
  checkIndexMultiLink: 0,
  newPoint: true,
  newOrientedLink: true,
  currentDashboard: false,
  gabaritUrlInput: '',
  saveGabaritURL: [],
  saveMetadatavalue: [],
  saveGabaritFile: [],
  gabaritDefault: {
    queryID: 'A',
    fileName: 'default',
    loaded: false,
    globalGabarit: {
      lowerLimit: [{
        id: 0,
        lowerLimitMin: '',
        lowerLimitMax: '',
        backColor: 'blue',
        borderColor: 'red',
        sizeBorder: '1'
      }],
      textObject: {
        value: 'default',
        isTextTooltip: 'false',
        colorBack: 'blue',
        colorText: 'black',
        style: {
          bold: 'false',
          italic: 'false',
          underline: 'false'
        },
        generateObjectText: 'false',
        valueGenerateObjectText: {
          legendElement: 'default',
          numericFormatElement: 'default',
          unit: 'default',
          displayObjectInTooltip: 'false',
          addColorTextElement: 'false',
          colorTextElement: 'black',
          addColorBackElement: 'false',
          colorBackElement: 'white'
        },
        generateAuxiliaryElement: {
          legendElement: 'default',
          numericFormatElement: 'default',
          unit: 'default',
          displayObjectInTooltip: 'false',
          addColorTextElement: 'false',
          colorTextElement: 'black',
          addColorBackElement: 'false',
          colorBackElement: 'white'
        }
      },
      defaultColor: 'black',
      colorMode: 'true',
      traceBack: 'true',
      traceBorder: 'true'
    },
    templateGabaritPoint: [],
    templateGabaritRegion: [],
    templateGabaritLink: [],
    templateGabaritPointDefault: [],
    templateGabaritRegionDefault: [],
    templateGabaritLinkDefault: []
  },
  updateOnlyInitialSpace: false
};

/***/ }),

/***/ "@grafana/data":
/*!********************************!*\
  !*** external "@grafana/data" ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__grafana_data__;

/***/ }),

/***/ "@grafana/ui":
/*!******************************!*\
  !*** external "@grafana/ui" ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE__grafana_ui__;

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_react__;

/***/ })

/******/ })});;
//# sourceMappingURL=module.js.map